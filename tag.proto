syntax = "proto3";

package hiber.tag;

import "base.proto";
import "file.proto";
import "health.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.tag";
option java_outer_classname = "TagApi";
option go_package = ".;hiber";

/* Tag management api calls. You can already get tags for objects when you get their data, and even create new tags
 * when updating them, so these calls are meant for easier tag management if you need it.
 */
service TagService {
    rpc List (ListTagsRequest) returns (ListTagsRequest.Response);
    rpc Create (CreateTagRequest) returns (Tag);
    rpc Update (UpdateTagRequest) returns (Tag);
    rpc Delete (DeleteTagRequest) returns (DeleteTagRequest.Response);

    /* Count the tags in your organization by health. */
    rpc Health (TagHealth.Request) returns (TagHealth.Response);
}

/* Tag in your organization.
 * Tags can be assigned to devices and assets to group them together or mark a certain property.
 *
 * A Tag has three parts: its id in your organization, a Label that describes how it should be displayed, and
 * Metadata (which is only included when using the TagService) with additional information.
 */
message Tag {
    /* Label for a tag, containing all the information needed to display it. */
    message Label {
        string name = 1;
        string type = 2;
    }

    /* Metadata for a tag.
     * This is typically not included in calls where the tag is repeated a lot, like the device list.
     *
     * Use the TagService.List call to get the tags with Metadata.
     */
    message Metadata {
        /* Location for the tag (e.g. a plot of land, a specific well or a field). */
        oneof location {
            /* Single point location for this tag. */
            Location location_point = 4;

            /* Square area (on the map) for this tag. */
            Area location_area = 5;

            /* Complex shaped area for this tag. */
            Shape location_shape = 6;
        }

        /* Files for this tag.
         * Typically an image of a place. See the File.media_type for more information.
         */
        repeated file.File files = 7;
    }

    int64 id = 1;

    /* The label to display for this tag. */
    Label label = 3;

    /* Metadata for this tag.
     * This is typically not included in calls where the tag is repeated a lot, like the device list.
     * Use the TagService.List call to get the tags with Metadata.
     */
    optional Metadata metadata = 4;
}

message TagSelection {
    repeated string search = 1;
    repeated string names = 2;
    optional Filter.Tags filter = 3;
    repeated string types = 4;
    optional LocationSelection location = 5;
}

message UpdateTagsForItem {
    repeated int64 tag_ids_to_add = 1;
    repeated int64 tag_ids_to_remove = 2;
    repeated hiber.tag.Tag.Label new_tags_to_add = 3;
}

message ListTagsRequest {
    message Response {
        repeated Tag tags = 1;
        ListTagsRequest request = 2;
        /* map<tag-id, count> */
        map<int64, int32> tag_asset_count = 5;
        /* map<tag-id, count> */
        map<int64, int32> tag_modem_count = 3;
        /* map<webhook-id, count> */
        map<int64, int32> tag_webhook_count = 4;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* Select the tags to list. Optional, when omitted or empty everything is included. */
    optional TagSelection selection = 2;

    /* Count the assets for each tag in the response. */
    optional bool asset_count = 5;

    /* Count the modems for each tag in the response. */
    optional bool modem_count = 3;

    /* Count the webhooks for each tag in the response. */
    optional bool webhook_count = 4;
}

message CreateTagRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    Tag.Label create = 2;

    /* Location for the tag (e.g. a plot of land, a specific well or a field). */
    oneof location {
        /* Single point location for this tag. */
        Location location_point = 4;

        /* Square area (on the map) for this tag. */
        Area location_area = 5;

        /* Complex shaped area for this tag. */
        Shape location_shape = 6;
    }

    /* Add files to the new tag. These can be just an identifier to an existing File, or a full file upload.
     * Keep in mind the grpc request size limitation.
     */
    repeated file.File files = 7;
}

message UpdateTagRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    int64 id = 2;
    Tag.Label update = 3;

    oneof location {
        /* Update the location to a single point location. */
        Location location_point = 4;

        /* Update the location to a square area (on the map). */
        Area location_area = 5;

        /* Update the location to a complex shaped area. */
        Shape location_shape = 6;

        /* Remove the location from this tag. */
        bool remove_location = 7;
    }

    /* Add files to the tag. These can be just an identifier to an existing File, or a full file upload.
     * Keep in mind the grpc request size limitation.
     */
    repeated file.File add_files = 8;

    /* Remove files from the tag and delete them from the system (if no other references exist). */
    repeated string delete_files = 9;
}

message DeleteTagRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    int64 id = 2;
}

message TagHealth {
    hiber.tag.Tag tag = 1;
    health.HealthLevel health_level = 2;
    bool most_severe = 3;

    uint32 asset_count = 4;
    uint32 modem_count = 5;

    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        optional string organization = 1;

        /* Select the tags to list. Optional, when omitted or empty everything is included. */
        optional TagSelection selection = 2;

        /* Count the assets for each tag in the response. */
        optional bool asset_count = 3;

        /* Count the modems for each tag in the response. */
        optional bool modem_count = 4;
    }

    message Response {
        repeated TagHealth tag_health = 1;
        Request request = 2;
    }
}
