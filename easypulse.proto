/* Easypulse specific view and services.
 *
 * This file contains specific views and services for the easypulse feature set.
 * This feature set is only available to organizations with the easypulse feature enabled.
 *
 * For Easypulse, we've introduced the concept of an Asset, which is a modem with some assumptions about the type of
 * data it sends. Additionally, aggregations can be requested of Asset history when requesting Assets, allowing for a
 * somewhat customized Asset model.
 */
syntax = "proto3";

package hiber.easypulse;

import "base.proto";
import "field.proto";
import "health.proto";
import "tag.proto";
import "value.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.easypulse";
option java_outer_classname = "EasypulseApi";
option go_package = "hiber";

/* Service to list and manage Assets. */
service EasypulseService {
    /* List the Easypulse Assets in your organization.
     * Optionally, aggregated historical data can be added to the returned Assets, with a given name.
     *
     * Fails when your organizations does not have the Easypulse feature.
     */
    rpc Assets (Easypulse.ListAssets.Request) returns (Easypulse.ListAssets.Response);

    /* List the history for a single field, and optionally apply an aggregation and/or grouping to it.
     * Deprecated in favor of the ValueService.
     */
    rpc History (Easypulse.History.Request) returns (Easypulse.History.Response){
        option deprecated = true;
    }

    /* List the fields for Easypulse, so they can be used with other services. */
    rpc Fields (Easypulse.Fields.Request) returns (Easypulse.Fields.Response);

    /* Manage the target values that are used to determine score values. */
    rpc TargetValues (Easypulse.TargetValues.List.Request) returns (Easypulse.TargetValues.List.Response);
    rpc UpdateTargetValues (Easypulse.TargetValues.Update.Request) returns (Easypulse.TargetValues);
}

message Easypulse {

    /* Asset in your organization.
     * An asset is a view of a modem, with assumptions about message data fields handled in the API.
     *
     * In addition, an Asset can be enriched with aggregations of the data fields when requested (for example,
     * fuel level average over the past month, or total run time in the past week).
     */
    message Asset {
        /* The organization the asset is in. */
        string organization = 1;

        /* The modem number for the Asset. */
        string number = 2;

        /* The custom name for the Asset, defaults to modem number. */
        string name = 3;

        /* Optional external identifier the Asset may have. */
        string external_identifier = 4;

        /* A key value map of peripherals for the Assets. */
        map<string, string> peripherals = 5;

        /* Add additional notes to an asset. */
        string notes = 6;

        /* Add additional notes to an asset that only people with the permission can access. */
        string secure_notes = 7;

        /* The timezone configured for the asset. */
        string time_zone = 27;

        /* Health level based on the modem alarm and some always-present alarms. */
        health.HealthLevel health_level = 8;

        Lifecycle lifecycle = 34;

        /* Tags (or groups, when used in Mission Control) this asset is in. */
        repeated hiber.tag.Tag tags = 9;

        /* When this asset was last updated. */
        LastUpdate last_update = 10;

        /* Current value of the odometer. */
        hiber.value.Value.Numeric.Distance odometer = 18;

        /* Duration of total hours the engine has ran. */
        Duration engine_runtime = 19;
        /* Duration of total hours the engine has idled. */
        Duration engine_idle_time = 29;

        /* The total amount of fuel used by this vehicle. */
        hiber.value.Value.Numeric.Volume fuel_used_running = 20;
        /* The total amount of fuel used by this vehicle while idling. */
        hiber.value.Value.Numeric.Volume fuel_used_idling = 28;

        /* The amount of times the power-take-off was engaged */
        int32 power_take_off_engagement_count = 31;
        /* The duration the power-take-off was engaged for */
        Duration power_take_off_engagement_duration = 32;

        /* Engine temperature. */
        hiber.value.Value.Numeric.Temperature engine_oil_temperature = 21;

        /* The most recent fuel level. */
        hiber.value.Value.Numeric.Percentage fuel_level = 22;

        /* The most recent temperature in degrees Celsius. */
        hiber.value.Value.Numeric.Temperature temperature = 24;

        /* The most recent speed measurement. */
        hiber.value.Value.Numeric.Speed speed = 23;

        /* The most recent peak rpm measurement. */
        int32 rpm = 30;

        /* The most recent tire pressure measurement. */
        hiber.value.Value.Numeric.Pressure tire_pressure = 25;

        /* The most recent battery level. */
        hiber.value.Value.Numeric.BatteryLevel battery_level = 26;

        /* The most recently reported location. */
        Location location = 15;

        /* Any aggregations added when this asset was requested. */
        map<string, History.Response> aggregations = 16;

        /* List of tell-tale status indicators. The order of the list is intentional.*/
        repeated TellTale tell_tales = 33;

        /* Information about the last update we received from this asset. */
        message LastUpdate {
            uint64 id = 1;

            /* Time the server has received the last update. */
            Timestamp received_at = 2;

            /* Time the asset sent the last update. */
            Timestamp sent_at = 3;

            /* The body of the last update. */
            BytesOrHex body = 4;
        }

        enum Lifecycle {
            /* Modem is deployed, but not active yet. Invisible for customer. */
            ACCEPTANCE_TESTING = 0;

            /* Modem is active and sending messages.
             * See health for more details on its health, based on the past messages.
             */
            INSTALLED = 1;

            PAUSED = 6;
            DISABLED = 5;
            DECOMMISSIONED = 4;
        }

        reserved 11, 12, 13, 14, 17;
    }

    /* An AssetSelection is used to select which Assets should be affected:
     * - When listing Assets, it is used to determine which Assets are returned
     * - When updating Assets, it is used to determine which Assets are updated
     */
    message AssetSelection {
        /* Search for assets by name, modem number, tag or notes. */
        string search = 1;

        /* Select assets by modem number. */
        Filter.Modems assets = 2;

        /* Select assets by health level. */
        repeated string health_levels = 3;

        /* Select assets by tag. */
        hiber.tag.TagSelection filter_by_tags = 4;
    }

    /* List the Easypulse Assets in your organization.
     * Optionally, aggregated historical data can be added to the returned Assets, with a given name.
     *
     * Fails when your organizations does not have the Easypulse feature.
     */
    message ListAssets {

        /* Request to list Assets in your organization. */
        message Request {
            /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
            string organization = 1;

            /* Select the Assets to return. */
            AssetSelection selection = 2;

            /* Paginate over the returned Assets. */
            Pagination pagination = 3;

            /* Any aggregations to return with the assets, specified as a name and a History.Request. */
            map<string, History.Request> aggregations = 4;

            /* Sort the returned assets using the given option. By default, Assets are sorted by name. */
            Sort sort = 5;

            enum Sort {
                NAME = 0;
                NAME_DESC = 1;
                LAST_UPDATED = 2;
                INACTIVITY = 3;
                NUMBER_ASC = 4;
                NUMBER_DESC = 5;
                LOWEST_FUEL_LEVEL = 6;
                HIGHEST_FUEL_LEVEL = 7;
                LOWEST_TIRE_PRESSURE = 8;
                HIGHEST_TIRE_PRESSURE = 9;
                LOWEST_BATTERY_LEVEL = 10;
                HIGHEST_BATTERY_LEVEL = 11;
                LOWEST_TEMPERATURE = 12;
                HIGHEST_TEMPERATURE = 13;

                /* Health sorted from least to most severe (i.e. OK, WARNING, ERROR). */
                HEALTH = 14;
                /* Health sorted from most to least severe (i.e. ERROR, WARNING, OK). */
                HEALTH_DESC = 15;
                /* Health sorted alphabetically by health level name. */
                HEALTH_ASC_ALPHABETICAL = 16;
                /* Health sorted alphabetically by health level name, descending order. */
                HEALTH_DESC_ALPHABETICAL = 17;

                /* Sort modem on its Status. */
                LIFECYCLE_ASC = 18;
                /* Sort modem on its Status in reverse order. */
                LIFECYCLE_DESC = 19;
                /* Status sorted alphabetically by Status name. */
                LIFECYCLE_ASC_ALPHABETICAL = 20;
                /* Status sorted alphabetically by Status name, descending order. */
                LIFECYCLE_DESC_ALPHABETICAL = 21;
            }
        }

        /* Response with a list of Assets */
        message Response {
            /* The selected Assets. */
            repeated Asset assets = 1;

            /* The applied pagination, including total results, page information, etc. */
            Pagination.Result pagination = 2;

            /* The request that was received, corrected and used to produce this result. */
            Request request = 3;
        }
    }

    /* List the fields for the easypulse organization, to be used with the value service, for example.
     */
    message Fields {
        message EasypulseField {
            field.Field field = 1;
            value.ValueAggregation default_aggregation = 2;
            optional value.ValueTransformation default_transformation = 3;
            value.Value.Numeric.DurationUnit default_partition = 4;

            oneof target_value {
                TargetValues.DurationTargetValue target_value_duration = 5;
                TargetValues.DistanceTargetValue target_value_distance = 6;
            }
        }

        message StateBasedFields {
            EasypulseField on = 1;
            EasypulseField running = 2;
            EasypulseField idle = 3;
            EasypulseField off = 4;
        }

        EasypulseField odometer = 1;
        EasypulseField max_rpm = 2;
        EasypulseField max_speed = 3;
        EasypulseField battery_level = 4;
        EasypulseField fuel_level = 5;

        /** Fuel usage while in different states of usage. */
        StateBasedFields fuel_used = 6;

        /** Time spent in different states of usage. */
        StateBasedFields engine_time = 8;
        EasypulseField engine_oil_temperature = 7;

        message PTOEngagement {
            EasypulseField count = 1;
            EasypulseField time = 2;
        }
        PTOEngagement pto_engagement = 9;

        message Request {
            /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
            string organization = 1;

            /* Request the fields for a specific modem.
             * The fields are always the same, but the defaults and target values may be different.
             */
            optional string modem = 2;

            /* Whether to apply the unit preferences to the fields.
             * This will convert any fields into your preferred unit, for convenience.
             */
            bool apply_unit_preferences = 3;
        }

        message Response {
            Fields fields = 1;
            Request request = 2;
        }
    }

    /* List the history for a single field, and optionally apply an aggregation and/or grouping to it.
     * Deprecated in favor of the ValueService.
     */
    message History {
        option deprecated = true;

        /* Request to get the history of a field, for the selected Assets in the organization.
         * Deprecated in favor of the ValueService.
         */
        message Request {
            option deprecated = true;

            /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
            string organization = 1;

            /* Select the asset(s) to get the history for. */
            AssetSelection selection = 2;

            /* Paginate the returned values.
             * This may not be relevant, depending on the aggregation (which may result in a single value) and the
             * time range.
             */
            Pagination pagination = 13;

            /* The time to view the history for. */
            TimeRange time_range = 3;

            /* How to aggregate the data. */
            Aggregation aggregation = 4;

            Sort sort = 15;

            /* Options to group the data, reducing data points to a set of groups.
             * If no grouping is set, the aggregation typically returns a single value.
             */
            oneof group {
                /* Split up the data in time block of the given size. */
                Duration split_by_duration = 5;

                /* Limit the results to the given amount of data points, applying the function to each chunk. */
                uint32 reduce_to_max_size = 6;
            }

            /* Get the history for the fuel level. */
            bool fuel_level = 7;
            /* Get the history for the tire pressure. */
            bool tire_pressure = 8;
            /* Get the history for the battery level. */
            bool battery_level = 9;
            /* Get the history for the temperature. */
            bool temperature = 10;
            /* Get the history for the run time. */
            bool run_time = 11;
            /* Get the history for the idle time. */
            bool idle_time = 12;
            /* Get the history for the location. */
            bool location = 14;
            /* Get the history for the speed. */
            bool speed = 16;
            /* Get the history for the rpm of the engine */
            bool rpm = 28;
            /* Get the history for the engine state */
            bool engine_state = 34;


            /* Get the fuel efficiency in ???. */
            bool fuel_efficiency = 17;
            /* Get the distance traveled in ???. */
            bool distance_traveled = 18;

            /* Get the value of the odometer. (Total traveled distance by vehicle) */
            bool odometer = 24;
            /* Get the total amount of run-time hours for the engine. */
            bool engine_runtime = 25;
            /* Get the total amount of idle-time hours for the engine. */
            bool engine_idle_time = 29;

            /* Get the total amount of fuel used by the engine while running. */
            bool fuel_used_running = 26;
            /* Get the total amount of fuel used by the engine while idling. */
            bool fuel_used_idling = 31;

            /* Get the total amount of times the power take of was engaged. */
            bool power_take_off_engagement_count = 32;
            /* Get the total duration of time the power take of was engaged. */
            bool power_take_off_engagement_duration = 33;

            /* Get the history for the engine oil temperature. */
            bool engine_oil_temperature = 27;

            /* Get the normalized score for the fuel efficiency, using a preconfigured baseline. */
            bool fuel_efficiency_score = 19;
            /* Get the normalized score for the distance traveled, using a preconfigured baseline. */
            bool distance_traveled_score = 20;
            /* Get the normalized score for the idle time, using a preconfigured baseline. */
            bool idle_time_score = 21;
            /* Get the normalized score for the run time, using a preconfigured baseline. */
            bool run_time_score = 22;
            /* Get the average normalized score for the run time, idle time, distance traveled and fuel efficiency. */
            bool utilization_score = 23;

            /* Options to aggregate the history data points (in a group). */
            enum Aggregation {
                /* Do not aggregate the history data points, just list all of them. */
                NONE = 0;

                /* Average value of all history data points (in a group). */
                AVERAGE = 1;

                /* Sum all history data points (in a group). */
                SUM = 2;

                /* Just take the last value (in a group). */
                LAST = 3;

                /* Take the lowest value (in a group). */
                MINIMUM = 4;

                /* Take the highest value (in a group). */
                MAXIMUM = 5;
            }

            /* How to sort the returned values. */
            enum Sort {
                TIME_DESCENDING = 0;
                TIME_ASCENDING = 1;
            }
        }

        /* Response with the (aggregated) history of a field, for the selected Assets in the organization.
         * Deprecated in favor of the ValueService.
         */
        message Response {
            option deprecated = true;

            /* The processed historical data points.
             * For example, when applying the SUM aggregation to all data points, this list would only contains a
             * single value, the sum of values.
             */
            repeated Value values = 1;

            /* The pagination result, containing information about amounts and pages. */
            Pagination.Result pagination = 2;

            /* The request that was received, corrected and used to produce this result. */
            Request request = 3;

            /* Processed historical data point. If this is a group, it will have a time range to denote the group. */
            message Value {
                /* When not grouping, time of the individual point.
                 * When grouping would return an exact data point (i.e. not an average), the time of that point.
                 * When grouping would not return an exact data point (i.e. average), the end of the time range.
                 */
                Timestamp timestamp = 1;

                /* When grouping, the start and end time for the group. */
                TimeRange time_range = 2;

                /* The fuel level, as a percentage. */
                float fuel_level = 3;
                /* The tire pressure in bar. */
                float tire_pressure_deprecated = 4 [deprecated = true];
                /* The battery level, as a percentage. */
                float battery_level_deprecated = 5 [deprecated = true];
                /* The temperature in degrees Celsius. */
                float temperature = 6;
                /* The time the Asset was running. */
                Duration run_time = 7;
                /* The time the Asset was idle. */
                Duration idle_time = 8;
                /* The location of the asset at the timestamp, or the last location in the time range. */
                Location location = 9;
                /* The speed of the asset in km/h. */
                float speed_deprecated = 10 [deprecated = true];

                int32 rpm = 30;

                /* Fuel efficiency in ???. */
                float fuel_efficiency = 11;
                /* Distance traveled in ???. */
                float distance_traveled = 12;

                /* State of the engine */
                EngineState engine_state = 25;

                /* Normalized score for the fuel efficiency, using a preconfigured baseline. */
                float fuel_efficiency_score = 13;
                /* Normalized score for the distance traveled, using a preconfigured baseline. */
                float distance_traveled_score = 14;
                /* Normalized score for the idle time, using a preconfigured baseline. */
                float idle_time_score = 15;
                /* Normalized score for the run time, using a preconfigured baseline. */
                float run_time_score = 16;
                /* Average normalized score for the run time, idle time, distance traveled and fuel efficiency. */
                float utilization_score = 23;
                /* Current value of the odometer. */
                hiber.value.Value.Numeric.Distance odometer = 17;

                /* Duration of total hours the engine has ran. */
                Duration engine_runtime = 18;
                /* Duration of total hours the engine has been idling. */
                Duration engine_idle_time = 27;

                /* The total amount of fuel used by this vehicle. */
                hiber.value.Value.Numeric.Volume fuel_used_running = 19;
                /* The total amount of fuel used by this vehicle while idling. */
                hiber.value.Value.Numeric.Volume fuel_used_idling = 26;

                int32 power_take_off_engagement_count = 28;
                Duration power_take_off_engagement_duration = 29;

                /* Engine temperature. */
                hiber.value.Value.Numeric.Temperature engine_oil_temperature = 20;
                /* Speed of the asset. */
                hiber.value.Value.Numeric.Speed speed = 21;
                /* The tire pressure of the asset. */
                hiber.value.Value.Numeric.Pressure tire_pressure = 22;
                /* The battery level, as a percentage. */
                hiber.value.Value.Numeric.BatteryLevel battery_level = 24;
            }
        }
    }

    /* Target values for a modem. */
    message TargetValues {
        /* The organization the asset is in. */
        string organization = 1;

        /* The asset number these target values are for. */
        string number = 2;

        DurationTargetValue engine_run_time = 3;
        DurationTargetValue engine_idle_time = 4;
        DurationTargetValue engine_off_time = 5;
        DistanceTargetValue distance_travelled = 8;
        DurationTargetValue availability = 9;
        SinarmasTargetValues sinarmas_specific = 10;
        oneof fuel_efficiency {
            FuelEfficiencyTargetValue fuel_efficiency_unit = 6;
            VolumeTargetValue fuel_efficiency_as_volume = 7;
        }

        /* A target value that measures time per time, i.e. 12 hours per day. */
        message DurationTargetValue {
            bool enabled = 1;
            float value = 2;
            value.Value.Numeric.DurationUnit unit = 3;
            value.Value.Numeric.DurationUnit per_time = 4;
        }

        /* A target value that measures volume per time, i.e. 2 liters per day. */
        message VolumeTargetValue {
            bool enabled = 1;
            float value = 2;
            value.Value.Numeric.Volume.Unit unit = 3;
            value.Value.Numeric.DurationUnit per_time = 4;
        }

        /* A target value that measures distance per time, i.e. 12 kilometers per day. */
        message DistanceTargetValue {
            bool enabled = 1;
            float value = 2;
            value.Value.Numeric.Distance.Unit unit = 3;
            value.Value.Numeric.DurationUnit per_time = 4;
        }

        /* A target value that measures fuel efficiency. */
        message FuelEfficiencyTargetValue {
            bool enabled = 1;
            float value = 2;
            value.Value.Numeric.FuelEfficiency.Unit unit = 3;
        }

        /* A specific set of target values for Sinarmas. */
        message SinarmasTargetValues {
            TreesTargetValue trees = 1;
            TreeVolumeTargetValue tree_volume = 2;

            message TreesTargetValue {
                bool enabled = 1;
                uint32 value = 2;
                value.Value.Numeric.DurationUnit per_time = 3;
            }
            message TreeVolumeTargetValue {
                bool enabled = 1;
                float value = 2;
                value.Value.Numeric.Volume.Unit unit = 3;
                value.Value.Numeric.DurationUnit per_time = 4;
                float volume_per_tree = 5;
            }
        }

        message List {
            message Request {
                /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
                string organization = 1;

                /* Select the Assets to return. */
                AssetSelection selection = 2;

                /* Paginate over the returned Assets. */
                Pagination pagination = 3;

                /* Sort the returned assets using the given option. By default, Assets are sorted by name. */
                ListAssets.Request.Sort sort = 4;

                /* Whether to apply the unit preferences to the fields.
                 * This will convert any fields into your preferred unit, for convenience.
                 */
                bool apply_unit_preferences = 5;
            }

            message Response {
                /* The selected Assets. */
                repeated TargetValues asset_target_values = 1;

                /* The applied pagination, including total results, page information, etc. */
                Pagination.Result pagination = 2;

                /* The request that was received, corrected and used to produce this result. */
                Request request = 3;
            }
        }

        message Update {
            message Request {
                /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
                string organization = 1;

                /* The asset number to update the target values for. */
                string number = 2;

                /* Replace the engine_run_time target value with this DurationTargetValue. */
                DurationTargetValue replace_engine_run_time = 3;
                /* Replace the engine_idle_time target value with this DurationTargetValue. */
                DurationTargetValue replace_engine_idle_time = 4;
                /* Replace the engine_off_time target value with this DurationTargetValue. */
                DurationTargetValue replace_engine_off_time = 5;
                /* Replace the distance_travelled target value with this DistanceTargetValue. */
                DistanceTargetValue replace_distance_travelled = 8;
                /* Replace the availability target value with this DurationTargetValue. */
                DurationTargetValue replace_availability = 9;

                oneof replace_fuel_efficiency {
                    /* Replace the fuel_efficiency target value with this FuelEfficiencyTargetValue. */
                    FuelEfficiencyTargetValue replace_fuel_efficiency_unit = 6;
                    /* Replace the fuel_efficiency target value with this VolumeTargetValue. */
                    VolumeTargetValue replace_fuel_efficiency_as_volume = 7;
                }

                /* Replace the sinarmas_specific target values with this SinarmasTargetValues. */
                SinarmasTargetValues replace_sinarmas_specific = 10;
            }
        }
    }

    enum EngineState {
        OFF = 0;
        IDLING = 1;
        RUNNING = 2;
        RESERVED = 3;
    }

    /* A tell tale is an indicator of a part of the system. */
    message TellTale {
        Indicator indicator = 1;
        string name = 2;
        string label = 3;
        string description = 4;
        value.Value.Enum enum_value = 5;

        message Indicator {
            State state = 1;
            string color = 2;
            string label = 3;

            /* The state of a tell-tale sensor. Ordinal numbers follow the spec of the CAN bus for states */
            enum State {
                /* The tell-tale has not been triggered. This can be considered an OK state. */
                OFF = 0;
                /* The tell-tale indicates something is very wrong with the system it is monitoring. */
                RED = 1;
                /* The tell-tale indicates something is wrong with the system it is monitoring, but not broken yet. */
                YELLOW = 2;
                /* The tell-tale indicates there is some information about the system it is monitoring. */
                INFO = 3;
                /* The tell-tale sensor for this system is not available. */
                NOT_AVAILABLE = 4;

                /* Other, not part of the CAN-Bus spec. */
                OTHER = 5;
            }
        }
    }

}
