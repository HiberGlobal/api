syntax = "proto3";

package hiber.value;

import "google/protobuf/duration.proto";

option java_multiple_files = true;
option java_package = "global.hiber.api.grpc.value";
option go_package = "hiber";

message Value {
    /* The type of value that is represented. */
    enum Type {
        OTHER = 0;

        /* This field contains numeric values, with an optional unit of measurement defined below. */
        NUMERIC = 1;

        /* This field contains text to be displayed. */
        TEXT = 2;

        /* This field switches between several predefined values. Typically used for status fields. */
        ENUM = 3;
    }

    Type type = 1;
    oneof value {
        Numeric numeric = 2;
        string text = 3;
        Enum enum = 4;
    }

    /* If the value is numeric, this specifies the unit, value, etc. */
    message Numeric {
        /* The type of numeric value that is represented.
         * Supported types will automatically convert to the preferred unit (based on the user settings).
         */
        enum Type {
            TYPE_UNKNOWN = 0;
            PERCENTAGE = 1;
            TEMPERATURE = 2;
            DISTANCE = 3;
            PRESSURE = 4;
            VOLTAGE = 5;
            SPEED = 6;
            VOLUME = 7;
            DURATION = 8;
            FUEL_EFFICIENCY = 9;
            MASS = 10;
            BATTERY_LEVEL = 11;
            FLOW = 12;
            ROTATION_SPEED = 13;
            RATE = 14;
        }

        /* Special case for battery level, since it can be provided in many units.
         * Not included in the UnitPreferences, since it cannot be converted.
         */
        message BatteryLevel {
            /* Convenience type for battery level. Other units may be added here later, like voltage. */
            enum BatteryLevelUnit {
                /* Battery level as a percentage (technically not a unit). */
                PERCENT = 0;
            }

            double value = 1;
            BatteryLevelUnit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            BatteryLevelUnit converted_from = 4;
        }

        /* The value for rotation speed. The only value is revolutions per minute (RPM), therefore it is not included in
         * unit preferences.
         */
        message RotationSpeed {
            enum RotationSpeedUnit {
                REVOLUTIONS_PER_MINUTE = 0; // rpm
            }

            double value = 1;
            RotationSpeedUnit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            RotationSpeedUnit converted_from = 4;
        }

        /* The value is a distance value, converted to your preferred distance unit. */
        message Distance {
            /* Unit of distance */
            enum DistanceUnit {
                METER = 0; // m
                MILLIMETER = 1; // mm
                CENTIMETER = 2; // cm
                KILOMETER = 3; // km
                YARD = 5; // yd
                MILE = 4; // mi
                FOOT = 6; // '
                INCH = 7; // ″

                /* NM. This is a special case unit and may not be auto-converted to your UnitPreference. */
                NAUTICAL_MILE = 8;
            }

            double value = 1;
            DistanceUnit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            DistanceUnit converted_from = 4;
        }

        /* The value is a distance value, converted to your preferred distance unit. */
        message FuelEfficiency {
            /* Unit of fuel efficiency */
            enum FuelEfficiencyUnit {
                LITER_PER_100_KILOMETER = 0; // l/100km
                KILOMETER_PER_LITER = 1; // km/l
                KILOMETER_PER_GALLON = 2; // km/gal (US)
                KILOMETER_PER_IMPERIAL_GALLON = 3; // km/gal (imp)
                MILES_PER_GALLON = 4; // mpg (US)
                MILES_PER_IMPERIAL_GALLON = 5; // mpg (imp)
                MILES_PER_LITER = 6; // mpl
            }

            double value = 1;
            FuelEfficiencyUnit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            FuelEfficiencyUnit converted_from = 4;
        }

        /* The value is a percentage. */
        message Percentage {
            /* Convenience type for percentage. Technically not a unit, but for consistency, we've added it here. */
            enum PercentageUnit {
                /* % */
                PERCENT = 0;
            }

            float value = 1;
            PercentageUnit unit = 3;

            /* Textual representation with % symbol, rounded based on the user preferences and field config. */
            string textual = 2;
        }

        /* The value is a pressure value, converted to your preferred pressure unit. */
        message Pressure {
            /* Unit of pressure. */
            enum PressureUnit {
                BAR = 0; // bar
                PSI = 1; // psi
                K_PA = 2; // kPa
            }

            double value = 1;
            PressureUnit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            PressureUnit converted_from = 4;
        }

        /* The value is a speed value, converted to your preferred speed unit. */
        message Speed {
            /* Unit of speed. */
            enum SpeedUnit {
                KILOMETERS_PER_HOUR = 0; // km/h
                /* kn. This is a special case unit and may not be auto-converted to your UnitPreference. */
                KNOTS = 1;
                METERS_PER_SECOND = 2; // m/s
                MILES_PER_HOUR = 3; // mph
                FEET_PER_SECOND = 4; // ft/s
            }

            double value = 1;
            SpeedUnit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            SpeedUnit converted_from = 4;
        }

        /* The value is a temperature, converted to your preferred temperature unit. */
        message Temperature {
            /* Unit of temperature. */
            enum TemperatureUnit {
                KELVIN = 0; // K
                DEGREES_CELSIUS = 1; // °C
                DEGREES_FAHRENHEIT = 2; // °F
            }

            double value = 1;
            TemperatureUnit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            TemperatureUnit converted_from = 4;
        }

        /* The value is a voltage, converted to your preferred voltage unit. */
        message Voltage {
            /* Unit of voltage. */
            enum VoltageUnit {
                MILLIVOLT = 0; // mV
            }

            double value = 1;
            VoltageUnit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            VoltageUnit converted_from = 4;
        }

        /* The value is a volume value, converted to your preferred volume unit. */
        message Volume {
            /* Unit of volume. */
            enum VolumeUnit {
                LITER = 0; // l
                GALLON_US = 1; // gal (US)
                GALLON_IMPERIAL = 2; // gal (imp)
                CUBIC_METER = 3; // m³
                CUBIC_FEET = 4; // ft³
            }

            double value = 1;
            VolumeUnit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            VolumeUnit converted_from = 4;
        }

        /* The value is a volume value, converted to your preferred volume unit. */
        message Mass {
            /* Unit of mass. */
            enum MassUnit {
                KILOGRAMS = 0; // kg
                POUNDS = 1; // lb
            }

            double value = 1;
            MassUnit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            MassUnit converted_from = 4;
        }

        message Flow {
            /* Unit of volume per time. */
            enum FlowUnit {
                CUBIC_METER_PER_HOUR = 0; // m³/h
                BARRELS_PER_DAY = 1; // bbl/d
                CUBIC_METER_PER_SECOND = 2; // m³/s
                CUBIC_FEET_PER_HOUR = 3; // ft³/h
                CUBIC_FEET_PER_SECOND = 4; // ft³/s
                LITER_PER_HOUR = 5; // l/h
                LITER_PER_SECOND = 6; // l/s
            }

            double value = 1;
            FlowUnit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;
            /* The original unit, iff this value was converted from another unit because of user preferences. */
            FlowUnit converted_from = 4;
        }

        message Rate {
            enum RateUnit {
                /* The amount of items counted in a 24 hour window. */
                ITEMS_PER_24_HOURS = 0;
            }

            uint32 value = 1;
            RateUnit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;
            /* The original unit, iff this value was converted from another unit because of user preferences. */
            RateUnit converted_from = 4;
        }

        message Duration {
            /* Unit of duration. */
            enum DurationUnit {
                MILLISECONDS = 0; // ms
                SECONDS = 1; // s
                MINUTES = 2; // min
                HOURS = 3; // h
                DAYS = 4; // d
                WEEKS = 5; // w
            }

            google.protobuf.Duration duration = 1;
            double value = 3;
            DurationUnit unit = 4;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 2;
            /* The original unit, iff this value was converted from another unit because of user preferences. */
            DurationUnit converted_from = 5;
        }

        Type type = 1;
        oneof value {
            BatteryLevel battery_level = 11;
            Distance distance = 3;
            Duration duration = 4;
            FuelEfficiency fuel_efficiency = 14;
            Percentage percentage = 5;
            Pressure pressure = 6;
            Speed speed = 7;
            Temperature temperature = 8;
            Voltage voltage = 9;
            Volume volume = 10;
            Mass mass = 12;
            Flow flow = 13;
            RotationSpeed rotation_speed = 16;
            Rate rate = 17;

            double unknown = 15;
        }
    }

    /* If this value is an enum, this specifies the value, display name and color for this enum value. */
    message Enum {
        /* The enum value. This might be a cryptic value, see the display_name and description for more information. */
        string value = 1;

        /* User-facing name for this value. */
        string display_name = 2;

        /* More details for this enum value. */
        string description = 3;

        /* (Optional) color for this enum value. */
        string color = 4;

        /* Priority of the value, typically used for ordering. */
        int32 priority = 5;
    }
}

/* Get an aggregated value for the selected data (e.g. average).
 * Text fields can only use the LAST aggregation.
 * Enum fields support a subset of aggregations:
 *   - DEFAULT and LAST return the last value;
 *   - MINIMUM and MAXIMUM return the lowest or highest value (respectively) based on the enum value order;
 *   - AVERAGE and SUM are not supported.
 */
enum ValueAggregation {
    DEFAULT = 0;

    /* Return the average value.
     * Not supported for textual and enum fields. When used with these fields, LAST is used instead.
     */
    AVERAGE = 1;

    /* Return the sum all values.
     * Not supported for textual and enum fields. When used with these fields, LAST is used instead.
     */
    SUM = 2;

    /* Just take the last value. */
    LAST = 3;

    /* Return the lowest value.
     * For enum fields, the order of values is used to determine the MINIMUM.
     * Not supported for textual fields. When used with these fields, LAST is used instead.
     */
    MINIMUM = 4;

    /* Return the highest value.
     * For enum fields, the order of values is used to determine the MAXIMUM.
     * Not supported for textual fields. When used with these fields, LAST is used instead.
     */
    MAXIMUM = 5;
}

/* Transform the values into a derived value. */
enum ValueTransformation {
    /* Instead of returning the value, return the amount of time a value was active.
     * Aggregation (if applicable) is applied afterwards on the duration value.
     */
    DURATION = 0;

    /* Instead of returning the value, return the difference between the value and the previous value.
     * Aggregation (if applicable) is applied before the delta is calculated.
     */
    DELTA = 1;
}
