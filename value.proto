syntax = "proto3";

package hiber.value;

import "base.proto";

option java_multiple_files = true;
option java_package = "global.hiber.api.grpc.value";
option go_package = "hiber";

message Value {
    /* The type of value that is represented. */
    enum Type {
        OTHER = 0;

        /* This field contains numeric values, with an optional unit of measurement defined below. */
        NUMERIC = 1;

        /* This field contains text to be displayed. */
        TEXT = 2;

        /* This field switches between several predefined values. Typically used for status fields. */
        ENUM = 3;
    }

    Type type = 1;
    oneof value {
        Numeric numeric = 2;
        string text = 3;
        Enum enum = 4;
    }

    /* If the value is numeric, this specifies the unit, value, etc. */
    message Numeric {
        /* The type of numeric value that is represented.
         * Supported types will automatically convert to the preferred unit (based on the user settings).
         */
        enum Type {
            TYPE_UNKNOWN = 0;
            PERCENTAGE = 1;
            TEMPERATURE = 2;
            DISTANCE = 3;
            PRESSURE = 4;
            VOLTAGE = 5;
            SPEED = 6;
            VOLUME = 7;
            DURATION = 8;
            FUEL_EFFICIENCY = 9;
            MASS = 10;
            BATTERY_LEVEL = 11;
            FLOW = 12;
        }

        /* Special case for battery level, since it can be provided in many units.
         * Not included in the UnitPreferences, since it cannot be converted.
         */
        message BatteryLevel {
            enum Unit {
                /* Battery level as a percentage (technically not a unit). */
                PERCENT = 0;
                // other units will be added here later, like voltage
            }

            double value = 1;
            Unit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            Unit converted_from = 4;
        }

        /* The value is a distance value, converted to your preferred distance unit. */
        message Distance {
            enum Unit {
                METER = 0;
                MILLIMETER = 1;
                CENTIMETER = 2;
                KILOMETER = 3;
                YARD = 5;
                MILE = 4;
                FOOT = 6;
                INCH = 7;

                /* This is a special case unit and may not be auto-converted to your UnitPreference. */
                NAUTICAL_MILE = 8;
            }

            double value = 1;
            Unit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            Unit converted_from = 4;
        }

        /* The value is a distance value, converted to your preferred distance unit. */
        message FuelEfficiency {
            enum Unit {
                LITER_PER_100_KILOMETER = 0;
                KILOMETER_PER_LITER = 1;
                KILOMETER_PER_GALLON = 2;
                KILOMETER_PER_IMPERIAL_GALLON = 3;
                MILE_PER_GALLON = 4;
                MILE_PER_IMPERIAL_GALLON = 5;
                MILE_PER_LITER = 6;
            }

            double value = 1;
            Unit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            Unit converted_from = 4;
        }

        /* The value is a percentage. */
        message Percentage {
            enum Unit {
                /* Technically not a unit, but for consistency, we've added it here. */
                PERCENT = 0;
            }

            float value = 1;
            Unit unit = 3;

            /* Textual representation with % symbol, rounded based on the user preferences and field config. */
            string textual = 2;
        }

        /* The value is a pressure value, converted to your preferred pressure unit. */
        message Pressure {
            enum Unit {
                BAR = 0;
                PSI = 1;
                K_PA = 2;
            }

            double value = 1;
            Unit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            Unit converted_from = 4;
        }

        /* The value is a speed value, converted to your preferred speed unit. */
        message Speed {
            enum Unit {
                KILOMETERS_PER_HOUR = 0;
                /* This is a special case unit and may not be auto-converted to your UnitPreference. */
                KNOTS = 1;
                METERS_PER_SECOND = 2;
                MILES_PER_HOUR = 3;
            }

            double value = 1;
            Unit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            Unit converted_from = 4;
        }

        /* The value is a temperature, converted to your preferred temperature unit. */
        message Temperature {
            enum Unit {
                KELVIN = 0;
                DEGREES_CELSIUS = 1;
                DEGREES_FAHRENHEIT = 2;
            }

            double value = 1;
            Unit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            Unit converted_from = 4;
        }

        /* The value is a voltage, converted to your preferred voltage unit. */
        message Voltage {
            enum Unit {
                MILLIVOLT = 0;
            }

            double value = 1;
            Unit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            Unit converted_from = 4;
        }

        /* The value is a volume value, converted to your preferred volume unit. */
        message Volume {
            enum Unit {
                LITER = 0;
                GALLON_US = 1;
                GALLON_IMPERIAL = 2;
                CUBIC_METER = 3;
                CUBIC_FEET = 4;
            }

            double value = 1;
            Unit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            Unit converted_from = 4;
        }

        /* The value is a volume value, converted to your preferred volume unit. */
        message Mass {
            enum Unit {
                KILOGRAMS = 0;
                POUNDS = 1;
            }

            double value = 1;
            Unit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;

            /* The original unit, iff this value was converted from another unit because of user preferences. */
            Unit converted_from = 4;
        }

        message Flow {
            enum Unit {
                CUBIC_METER_PER_HOUR = 0;
            }

            double value = 1;
            Unit unit = 2;

            /* Textual representation including unit symbol, rounded based on the user preferences and field config. */
            string textual = 3;
            /* The original unit, iff this value was converted from another unit because of user preferences. */
            Unit converted_from = 4;
        }

        /* The duration enum is not wrapped in Duration, since duration is always returned as a normalize Duration.
         * This unit is still used for fields, however.
         */
        enum DurationUnit {
            MILLISECONDS = 0;
            SECONDS = 1;
            MINUTES = 2;
            HOURS = 3;
            DAYS = 4;
            WEEKS = 5;
        }

        Type type = 1;
        oneof value {
            BatteryLevel battery_level = 11;
            Distance distance = 3;
            Duration duration = 4;
            FuelEfficiency fuel_efficiency = 14;
            Percentage percentage = 5;
            Pressure pressure = 6;
            Speed speed = 7;
            Temperature temperature = 8;
            Voltage voltage = 9;
            Volume volume = 10;
            Mass mass = 12;
            Flow flow = 13;
            double unknown = 15;
        }
    }

    /* If this value is an enum, this specifies the value, display name and color for this enum value. */
    message Enum {
        /* The enum value. This might be a cryptic value, see the display_name and description for more information. */
        string value = 1;

        /* User-facing name for this value. */
        string display_name = 2;

        /* More details for this enum value. */
        string description = 3;

        /* (Optional) color for this enum value. */
        string color = 4;

        /* Priority of the value, typically used for ordering. */
        int32 priority = 5;
    }
}
