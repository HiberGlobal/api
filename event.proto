syntax = "proto3";

import "base.proto";
import "organization.proto";
import "publisher.proto";
import "modem.proto";
import "modem_transfer.proto";
import "modem_claim.proto";
import "tag.proto";
import "token.proto";
import "user.proto";
import "webhook.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.event";
option java_outer_classname = "EventApi";
option go_package = "hiber";

package hiber.event;

/* Events are used in a number of ways in the api. With this service you can
 * search, list and stream them for your own purposes
 */
service EventService {
    rpc List (ListEventsRequest) returns (ListEventsRequest.Response);
    rpc Stream (EventStreamRequest) returns (stream Event);
}

/* Generic Event object, used in streams where events are mixed. Protobuf provides helper methods to extract
 * the contained object.
 */
message Event {
    bool is_error = 1;
    oneof event {
        ModemEvent.ModemLocationUpdatedEvent modem_location_updated = 2;
        ModemEvent.ModemStaleEvent modem_stale = 3;
        ModemEvent.MessageEvent.ModemMessageReceivedEvent modem_message_received = 4;
        ModemEvent.MessageEvent.ModemMessageDroppedEvent modem_message_dropped = 5;
        ModemEvent.MessageEvent.ModemMessageDelayedEvent modem_message_delayed = 6;
        ModemEvent.MessageEvent.ModemMessageCannotBeParsedEvent modem_message_cannot_be_parsed = 7;
        UserEvent.UserAddedEvent user_added = 8;
        UserEvent.UserRemovedEvent user_removed = 9;
        UserEvent.UserAccessRequestEvent user_access_request = 10;
        ModemTransferEvent.ModemTransferStartedEvent modem_transfer_started = 15;
        ModemTransferEvent.ModemTransferCancelledEvent modem_transfer_cancelled = 16;
        ModemTransferEvent.ModemTransferReceivedEvent modem_transfer_received = 17;
        ModemTransferEvent.ModemTransferNotReceivedEvent modem_transfer_not_received = 18;
        ModemTransferEvent.ModemTransferReturnTransferStartedEvent modem_transfer_return_transfer_started = 19;
        ModemEvent.ClaimEvent.ModemClaimedEvent modem_claimed_event = 20;
        TokenEvent.TokenExpiryWarningEvent token_expiry_warning = 23;
        TokenEvent.TokenExpiredEvent token_expired = 24;
        TokenEvent.TokenCreatedEvent token_created = 30;
        OrganizationEvent.OrganizationUpdatedEvent organization_updated = 25;
        PublisherEvent.CreatedEvent publisher_created = 31;
        PublisherEvent.UpdatedEvent publisher_updated = 32;
        PublisherEvent.DeletedEvent publisher_deleted = 33;
        PublisherEvent.FailedEvent publisher_failed = 34;
        // reserved 11, 12, 13, 14, 21, 22, 26, 27, 28, 29;
    }

    message ModemEvent {
        /* When a message comes in, the modem's location is updated automatically. This event is generated whenever the
         * modem's location is updated
         */
        message ModemLocationUpdatedEvent {
            string organization = 1;
            string modem_number = 2;
            Location location = 3;
            Timestamp time = 4;
            repeated hiber.tag.Tag tags = 5;
            string title = 6;
            string description = 7;
        }

        /* When a modem hasn't received any message for a configurable period, it is considered stale. This event is
         * generated as soon as this condition is determined
         */
        message ModemStaleEvent {
            string organization = 1;
            string modem_number = 2;
            int32 maximum_inactivity_period = 3;
            Timestamp time = 4;
            Timestamp last_message = 5;
            repeated hiber.tag.Tag tags = 6;
            string title = 7;
            string description = 8;
        }

        message MessageEvent {

            /* This event is generated whenever a message comes in, after is has been decrypted. It contains the relevant data
             * in the message object, including location and the user-defined encrypted payload
             */
            message ModemMessageReceivedEvent {
                string organization = 1;
                string modem_number = 2;
                hiber.modem.ModemMessage message = 3;
                repeated hiber.tag.Tag tags = 4;
                string title = 5;
                string description = 6;
                Timestamp time = 7;
            }

            /* Every message has a sequence marker. When we detect a jump in the sequence number, we can determine whether we
             * missed a message (or even multiple messages). Typically, this is caused by interference between the modem and
             * the satellite. Note that this event is only generated when a message comes in. If no messages come in for a
             * certain period, the ModemStaleEvent is used.
             */
            message ModemMessageDroppedEvent {
                string organization = 1;
                string modem_number = 2;
                int32 dropped_messages = 3;
                hiber.modem.ModemMessage message = 4;
                repeated hiber.tag.Tag tags = 5;
                Health modem_health = 6;
                string title = 7;
                string description = 8;
                Timestamp time = 9;
            }

            /* Triggered when the time between sending and receiving the message is above a certain threshold. This can
             * indicate that there is a communication issue between the modem and the server, i.e. a malfunction ground
             * station, so that the satellite takes longer to send its data on.
             */
            message ModemMessageDelayedEvent {
                string organization = 1;
                string modem_number = 2;
                hiber.modem.ModemMessage message = 3;
                int64 delay_seconds = 4;
                repeated hiber.tag.Tag tags = 5;
                Health modem_health = 6;
                string title = 7;
                string description = 8;
                Timestamp time = 9;
            }

            /* Triggered when a message cannot be parsed. This can have multiple reasons, for example, an invalid
             * message version.
             */
            message ModemMessageCannotBeParsedEvent {
                string organization = 1;
                string modem_number = 2;
                uint64 modem_message_id = 3;
                Timestamp time = 4;
                string reason = 5;
                repeated hiber.tag.Tag tags = 6;
                string title = 7;
                string description = 8;
            }
        }

        message ClaimEvent {
            message ModemClaimedEvent {
                string organization = 1;
                string modem_number = 2;
                hiber.modem.ModemClaim claim = 3;
                Timestamp time = 4;
                string title = 5;
                string description = 6;
                repeated hiber.tag.Tag tags = 7;
            }
        }
    }

    message ModemTransferEvent {
        message ModemTransferStartedEvent {
            hiber.modem.ModemTransfer transfer = 1;
            string organization = 2;
            Timestamp time = 3;
            repeated hiber.tag.Tag tags = 4;
            string title = 5;
            string description = 6;
        }

        message ModemTransferCancelledEvent {
            hiber.modem.ModemTransfer transfer = 1;
            string organization = 2;
            Timestamp time = 3;
            repeated hiber.tag.Tag tags = 4;
            string title = 5;
            string description = 6;
        }

        message ModemTransferReceivedEvent {
            hiber.modem.ModemTransfer transfer = 1;
            string organization = 2;
            Timestamp time = 3;
            repeated hiber.tag.Tag tags = 4;
            string title = 5;
            string description = 6;
        }

        message ModemTransferNotReceivedEvent {
            hiber.modem.ModemTransfer transfer = 1;
            string organization = 2;
            Timestamp time = 3;
            repeated hiber.tag.Tag tags = 4;
            string title = 5;
            string description = 6;
        }

        message ModemTransferReturnTransferStartedEvent {
            hiber.modem.ModemTransfer return_transfer = 1;
            hiber.modem.ModemTransfer original_transfer = 2;
            repeated hiber.modem.ModemTransferReturnLine return_lines = 3;
            string organization = 4;
            Timestamp time = 5;
            repeated hiber.tag.Tag tags = 6;
            string title = 7;
            string description = 8;
        }
    }

    message UserEvent {
        message UserAddedEvent {
            string organization = 1;
            string user = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message UserRemovedEvent {
            string organization = 1;
            string user = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message UserAccessRequestEvent {
            string organization = 1;
            string user = 2;
            Timestamp time = 3;
            string title = 4;
            string description = 5;
        }
    }

    message PublisherEvent {
        message CreatedEvent {
            string organization = 1;
            publisher.Publisher created = 2;
            repeated tag.Tag tags = 3;
            string title = 4;
            string description = 5;
            Timestamp time = 6;
        }

        message UpdatedEvent {
            string organization = 1;
            UpdateClearableString updated_description = 2;
            publisher.Publisher.Data partial_update_data = 3;
            publisher.UpdatePublisherRequest.UpdateEvents updated_event_filter = 4;
            publisher.UpdatePublisherRequest.UpdateModems updated_modem_filter = 5;
            publisher.UpdatePublisherRequest.UpdateTags updated_tag_filter = 6;
            UpdateBoolean updated_active_state = 7;
            repeated tag.Tag tags = 8;
            string title = 9;
            string description = 10;
            Timestamp time = 11;
        }

        message DeletedEvent {
            string organization = 1;
            publisher.Publisher deleted = 2;
            repeated tag.Tag tags = 3;
            string title = 4;
            string description = 5;
            Timestamp time = 6;
        }

        message FailedEvent {
            string organization = 1;
            string reason = 2;
            publisher.Publisher failed = 3;
            repeated tag.Tag tags = 4;
            string title = 5;
            string description = 6;
            Timestamp time = 7;
        }
    }

    message TokenEvent {
        message TokenCreatedEvent {
            string organization = 1;
            token.Token token = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message TokenExpiryWarningEvent {
            string organization = 1;
            token.Token token = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message TokenExpiredEvent {
            string organization = 1;
            token.Token token = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }
    }

    message OrganizationEvent {
        message OrganizationUpdatedEvent {
            string organization = 1;
            string display_name_updated = 2;
            string vat_number_updated = 3;
            organization.Organization.Address address_updated = 4;
            UpdateBoolean is_business_updated = 5;
            string billng_name_updated = 6;
            organization.Organization.Address billing_address_updated = 7;
            organization.Organization.Contact contact_updated = 8;
            string title = 9;
            string description = 10;
            Timestamp time = 11;
        }
    }

}

message BundledEvent {
    EventType type = 1;
    int32 amount = 2;
    string title = 3;
    string description = 4;
    Timestamp last_event = 5;
}

/* Selection object for Event list and stream. Filter events on modem, webhook, time and error state, and
 * paginate the list.
 * Events are returned bundled by default. this means that, instead of the details, you get a list of bundles,
 * one per event type, with the count.
 */
message EventSelection {
    Filter.Events events = 1;
    Filter.Modems modems = 2;
    Filter.Publishers publishers = 3;
    Filter.Tags tags = 4;
    TimeRange time_range = 6;
    bool errors_only = 7;
    /* When not set, no unbundled events are returned.
     * When set, returns unbundled events per type, paginated per type.
     */
    bool unbundled_events = 8;
    bool include_resolved_events = 9;
}

/* Lists all events matching the given criteria.
 * The frequency of event can vary greatly per type, resulting in unclear pagination and some event types overshadowing
 * others. For this reason, event are bundled by default, reducing them to a count per event type.
 * If unbundled events for certain types are required, this can be toggled in the selection object.
 * Pagination is only applied to unbundled events, and is applied per event type. This may result in a non-linear
 * timeline from page to page when selecting two types with a large difference in frequency, but makes sure you
 * see the most recent events of each type on the first page.
 */
message ListEventsRequest {
    message Response {
        message EventTypeResponse {
            EventType type = 1;
            repeated Event unbundled_events = 2;
            Pagination.Result pagination = 3;
        }

        ListEventsRequest request = 2;
        repeated BundledEvent events = 4;
        repeated EventTypeResponse unbundled_events = 5;
        reserved 1, 3;
    }

    enum Sort {
        TIME_DESCENDING = 0;
        TIME_ASCENDING = 1;
        MODEM_NUMBER_ASC = 2;
        MODEM_NUMBER_DESC = 3;
        MODEM_NUMBER_SPECIFIED = 4;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    EventSelection selection = 2;
    /* Pagination is applied per event type on unbundled events. It is not necessary for bundled events. */
    Pagination pagination = 3;
    Sort sort = 4;
}

/* Creates a stream for new events, matching the provided selection.
 */
message EventStreamRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    EventSelection selection = 2;
}
