syntax = "proto3";

package hiber.event;

import "google/protobuf/struct.proto";

import "assignment.proto";
import "asset.proto";
import "base.proto";
import "export.proto";
import "file.proto";
import "health.proto";
import "integration_mqtt.proto";
import "modem.proto";
import "modem_alarm.proto";
import "modem_message_body_parser.proto";
import "organization.proto";
import "process_point.proto";
import "publisher.proto";
import "tag.proto";
import "token.proto";
import "transfer.proto";
import "webhook.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.event";
option java_outer_classname = "EventApi";
option go_package = ".;hiber";

/* Events are used in a number of ways in the api. With this service you can
 * search, list and stream them for your own purposes.
 *
 * Events are filtered by permission, e.g. if you cannot access the users, you would not see user-related events.
 * Requesting user-related events explicitly if you cannot access the users will return an error.
 */
service EventService {
    rpc List (ListEventsRequest) returns (ListEventsRequest.Response) {
        /* For organization created events. */
        option (permission_usage) = ORGANIZATION_CREATE;
        /* For organization updated events. */
        option (permission_usage) = ORGANIZATION_UPDATE;
        /* For organization deleted events. */
        option (permission_usage) = ORGANIZATION_DELETE;
        /* For asset events. */
        option (permission_usage) = ASSETS;
        /* For process point events. */
        option (permission_usage) = PROCESS_POINTS;
        /* For modem/device-related events. */
        option (permission_usage) = MODEMS;
        /* For message events. */
        option (permission_usage) = MODEM_MESSAGES;
        /* For parser-related events. */
        option (permission_usage) = MODEMS_MESSAGE_BODY_PARSERS;
        /* For alarm-related events. */
        option (permission_usage) = MODEMS_ALARMS;
        /* For transfer events. */
        option (permission_usage) = TRANSFERS;
        /* For publisher-related events. */
        option (permission_usage) = PUBLISHERS;
        /* For user-related events. */
        option (permission_usage) = USERS;
        /* For user management events. */
        option (permission_usage) = USERS_MANAGE;
        /* For token-related events. */
        option (permission_usage) = TOKENS;
        /* For export-related events. */
        option (permission_usage) = EXPORT;

        option (support_permission_usage) = DEVICE_VIEW_ALL_LIFECYCLES;
    }
    rpc Stream (EventStreamRequest) returns (stream Event) {
        /* For organization created events. */
        option (permission_usage) = ORGANIZATION_CREATE;
        /* For organization updated events. */
        option (permission_usage) = ORGANIZATION_UPDATE;
        /* For organization deleted events. */
        option (permission_usage) = ORGANIZATION_DELETE;
        /* For asset events. */
        option (permission_usage) = ASSETS;
        /* For process point events. */
        option (permission_usage) = PROCESS_POINTS;
        /* For modem/device-related events. */
        option (permission_usage) = MODEMS;
        /* For message events. */
        option (permission_usage) = MODEM_MESSAGES;
        /* For parser-related events. */
        option (permission_usage) = MODEMS_MESSAGE_BODY_PARSERS;
        /* For alarm-related events. */
        option (permission_usage) = MODEMS_ALARMS;
        /* For transfer events. */
        option (permission_usage) = TRANSFERS;
        /* For publisher-related events. */
        option (permission_usage) = PUBLISHERS;
        /* For user-related events. */
        option (permission_usage) = USERS;
        /* For user management events. */
        option (permission_usage) = USERS_MANAGE;
        /* For token-related events. */
        option (permission_usage) = TOKENS;
        /* For export-related events. */
        option (permission_usage) = EXPORT;

        option (support_permission_usage) = DEVICE_VIEW_ALL_LIFECYCLES;
    }
    rpc History (EventHistory.Request) returns (EventHistory.Response) {
        /* For organization created events. */
        option (permission_usage) = ORGANIZATION_CREATE;
        /* For organization updated events. */
        option (permission_usage) = ORGANIZATION_UPDATE;
        /* For organization deleted events. */
        option (permission_usage) = ORGANIZATION_DELETE;
        /* For asset events. */
        option (permission_usage) = ASSETS;
        /* For process point events. */
        option (permission_usage) = PROCESS_POINTS;
        /* For modem/device-related events. */
        option (permission_usage) = MODEMS;
        /* For message events. */
        option (permission_usage) = MODEM_MESSAGES;
        /* For parser-related events. */
        option (permission_usage) = MODEMS_MESSAGE_BODY_PARSERS;
        /* For alarm-related events. */
        option (permission_usage) = MODEMS_ALARMS;
        /* For transfer events. */
        option (permission_usage) = TRANSFERS;
        /* For publisher-related events. */
        option (permission_usage) = PUBLISHERS;
        /* For user-related events. */
        option (permission_usage) = USERS;
        /* For user management events. */
        option (permission_usage) = USERS_MANAGE;
        /* For token-related events. */
        option (permission_usage) = TOKENS;
        /* For export-related events. */
        option (permission_usage) = EXPORT;

        option (support_permission_usage) = DEVICE_VIEW_ALL_LIFECYCLES;
    }

    rpc ModemHealth (ModemHealthEvents.Request) returns (ModemHealthEvents.Response) {
        /* For modem/device-related events. */
        option (permission_usage) = MODEMS;
        /* For message events. */
        option (permission_usage) = MODEM_MESSAGES;
        /* For parser-related events. */
        option (permission_usage) = MODEMS_MESSAGE_BODY_PARSERS;
        /* For alarm-related events. */
        option (permission_usage) = MODEMS_ALARMS;
        /* For transfer events. */
        option (permission_usage) = TRANSFERS;

        option (support_permission_usage) = DEVICE_VIEW_ALL_LIFECYCLES;
    }
    rpc Resolve (ResolveEvent.Request) returns (ResolveEvent.Response) {
        option (permission_usage) = ORGANIZATION_UPDATE;
    }
    rpc MarkResolved (MarkEventsResolved.Request) returns (MarkEventsResolved.Response) {
        option (permission_usage) = ORGANIZATION_UPDATE;
    }

    rpc GetEventConfiguration (EventConfiguration.Request) returns (EventConfiguration) {
        option (permission_usage) = PERMISSION_DEFAULT;
    }
    rpc UpdateEventConfiguration (EventConfiguration) returns (EventConfiguration) {
        option (permission_usage) = ORGANIZATION_UPDATE;
    }
    rpc UpdateEventHealthConfiguration (UpdateEventHealthConfiguration.Request) returns (UpdateEventHealthConfiguration.Response) {
        option (permission_usage) = ORGANIZATION_UPDATE;
    }
}

/* Generic Event object, used in streams where events are mixed. Protobuf provides helper methods to extract
 * the contained object.
 */
message Event {
    /* The device data for this event, if it is related to a single device. */
    message Device {
        string number = 1;
        string name = 2;
        string identifier = 3;
    }

    /* Time of the event. */
    EventType type = 98;

    /* Time of the event. */
    Timestamp time = 99;

    /* Whether this event causes the 'Error' health level.
     * If your organization does not use the default health levels, this field will be omitted.
     * Use health_level instead.
     */
    bool is_error = 1 [deprecated = true];

    /* Whether this event causes the 'Warning' health level.
     * If your organization does not use the default health levels, this field will be omitted.
     * Use health_level instead.
     */
    bool is_warning = 100 [deprecated = true];

    /* The health level caused by this event.
     * This health generally applies to either a device, a token or a publisher,
     * and is also applied to the organization health.
     * Not every event affects health, so this field might be empty.
     */
    health.HealthLevel health_level = 101;

    oneof resolved_status {
        /* Whether this event was resolved. */
        bool resolved = 106;

        /* The identifier to use when resolving this event.
         * Only present when not resolved, and only available for some event types.
         */
        string resolve_identifier = 107;
    }

    /* Short text describing the event. */
    string title = 102;

    /* Longer text describing the event in more detail. */
    string description = 103;

    /* The device data for this event, if it is related to a single device. */
    Device device = 104;

    /* The tags for this event, if any. */
    repeated tag.Tag tags = 105;

    oneof event {
        AssetEvent.AssetCreatedEvent asset_created = 70;
        AssetEvent.AssetUpdatedEvent asset_updated = 71;
        AssetEvent.AssetDeletedEvent asset_deleted = 72;

        ProcessPointEvent.ProcessPointCreatedEvent process_point_created = 73;
        ProcessPointEvent.ProcessPointUpdatedEvent process_point_updated = 74;
        ProcessPointEvent.ProcessPointDeletedEvent process_point_deleted = 75;

        DeviceEvent.DeviceCreatedEvent device_created = 55;
        DeviceEvent.DeviceUpdatedEvent device_updated = 39;
        DeviceEvent.DeviceLocationUpdatedEvent device_location_updated = 2;
        DeviceEvent.DeviceInstalledEvent device_installed = 36;

        MessageEvent.MessageReceivedEvent message_received = 4;
        MessageEvent.MessageBodyReceivedEvent message_body_received = 44;
        MessageEvent.MessageBodyParsedEvent message_body_parsed = 45;
        MessageEvent.MessageCannotBeParsedEvent message_cannot_be_parsed = 7;

        MessageBodyParserEvent.CreatedEvent message_body_parser_created = 46;
        MessageBodyParserEvent.UpdatedEvent message_body_parser_updated = 47;
        MessageBodyParserEvent.DeletedEvent message_body_parser_deleted = 48;

        AlarmEvent.AlarmTriggeredEvent alarm_triggered = 56;
        AlarmEvent.CreatedEvent alarm_created = 57;
        AlarmEvent.UpdatedEvent alarm_updated = 58;
        AlarmEvent.DeletedEvent alarm_deleted = 59;

        AssignmentEvent.AssignedEvent assigned = 68;
        AssignmentEvent.UnassignedEvent unassigned = 69;

        UserEvent.UserAddedEvent user_added = 8;
        UserEvent.UserRemovedEvent user_removed = 9;
        UserEvent.UserInvitedEvent user_invited = 41;
        UserEvent.UserAccessRequestEvent user_access_request = 10;
        UserEvent.UserValidationUpdatedEvent user_validation_updated = 54;

        TransferEvent transfer = 17;

        TokenEvent.TokenExpiryWarningEvent token_expiry_warning = 23;
        TokenEvent.TokenExpiredEvent token_expired = 24;
        TokenEvent.TokenCreatedEvent token_created = 30;
        TokenEvent.TokenDeletedEvent token_deleted = 35;

        OrganizationEvent.OrganizationCreatedEvent organization_created = 37;
        OrganizationEvent.OrganizationUpdatedEvent organization_updated = 25;
        OrganizationEvent.OrganizationDeletedEvent organization_deleted = 38;
        OrganizationEvent.MessageSummaryEvent message_summary = 42;
        OrganizationEvent.EventConfigurationUpdated organization_event_configuration_updated = 43;

        PublisherEvent.CreatedEvent publisher_created = 31;
        PublisherEvent.UpdatedEvent publisher_updated = 32;
        PublisherEvent.DeletedEvent publisher_deleted = 33;
        PublisherEvent.AutoDisabledEvent publisher_auto_disabled = 40;
        PublisherEvent.FailedEvent publisher_failed = 34;

        ExportEvent.ExportCreatedEvent export_created = 65;
        ExportEvent.ExportReadyEvent export_ready = 66;
        ExportEvent.ExportFailedEvent export_failed = 67;
    }
    reserved 3, 6, 11 to 16, 18 to 22, 26 to 29, 49 to 53, 60 to 64;

    message AssetEvent {
        message AssetCreatedEvent {
            string organization = 1;
            string asset_identifier = 2;
            asset.Asset asset = 3;
            Timestamp time = 4;
            repeated tag.Tag tags = 5;
            string title = 6;
            string description = 7;
        }

        message AssetUpdatedEvent {
            message Update {
                optional string name = 1;
                optional string description = 2;
                optional string notes = 3;
                optional string time_zone = 4;
                optional uint32 expected_transmission_rate = 5;
                optional asset.Asset.Type type = 6;
                optional google.protobuf.Struct metadata = 7;
                optional Location location = 8;
                repeated file.File files = 9;
            }

            string organization = 1;
            Update updated = 2;
            string asset_identifier = 3;
            Timestamp time = 4;
            repeated tag.Tag tags = 5;
            string title = 6;
            string description = 7;
        }

        message AssetDeletedEvent {
            string organization = 1;
            string deleted = 2;
            Timestamp time = 3;
            repeated tag.Tag tags = 4;
            string title = 5;
            string description = 6;
        }
    }

    message ProcessPointEvent {
        message ProcessPointCreatedEvent {
            string organization = 1;
            string process_point_identifier = 2;
            processpoint.ProcessPoint process_point = 3;
            Timestamp time = 4;
            repeated tag.Tag tags = 5;
            string title = 6;
            string description = 7;
        }

        message ProcessPointUpdatedEvent {
            message Update {
                optional string name = 1;
                optional string description = 2;
                optional string notes = 3;
                optional string time_zone = 4;
                optional uint32 expected_transmission_rate = 5;
                optional processpoint.ProcessPoint.Type type = 6;
                optional google.protobuf.Struct metadata = 7;
                optional Location location = 8;
                repeated file.File files = 9;
            }

            string organization = 1;
            Update updated = 2;
            string process_point_identifier = 3;
            Timestamp time = 4;
            repeated tag.Tag tags = 5;
            string title = 6;
            string description = 7;
        }

        message ProcessPointDeletedEvent {
            string organization = 1;
            string deleted = 2;
            Timestamp time = 3;
            repeated tag.Tag tags = 4;
            string title = 5;
            string description = 6;
        }
    }

    message DeviceEvent {
        message DeviceCreatedEvent {
            string organization = 1;
            string number = 2;

            /* External device id for this device (e.g. a MAC address). */
            string external_device_id = 20;

            Timestamp time = 4;
            repeated tag.Tag tags = 5;
            string title = 6;
            string description = 7;
        }

        message DeviceUpdatedEvent {
            string organization = 1;
            string number = 2;

            /* External device id for this device (e.g. a MAC address). */
            string external_device_id = 20;

            UpdateClearableString display_name = 10 [deprecated = true];
            optional string updated_display_name = 22;

            map<string, string> peripherals = 15;

            UpdateClearableString notes = 16 [deprecated = true];
            optional string updated_notes = 23;

            optional string device_type = 21;
            bool secure_notes_updated = 17;
            reserved 18;
            Duration health_warning_period = 19;
            Timestamp time = 4;
            repeated tag.Tag tags = 5;
            string title = 6;
            string description = 7;

            reserved 11, 12, 13, 14;
        }

        /* When a message comes in, the device's location is updated automatically. This event is generated whenever the
         * device's location is updated
         */
        message DeviceLocationUpdatedEvent {
            string organization = 1;
            string number = 2;

            /* External device id for this device (e.g. a MAC address). */
            string external_device_id = 8;

            /* The updated location for this device. */
            Location location = 3;

            /* The device time of the first message with the new location. */
            Timestamp updated_at = 9;

            /* The time this event was generated on the server, after the message was received. */
            Timestamp time = 4;

            repeated tag.Tag tags = 5;
            string title = 6;
            string description = 7;
        }

        /* When the device is marked as installed. */
        message DeviceInstalledEvent {
            string organization = 1;
            string number = 2;

            /* External device id for this device (e.g. a MAC address). */
            string external_device_id = 11;

            /* The time this device was installed. */
            Timestamp time = 4;

            repeated tag.Tag tags = 7;
            string title = 8;
            string description = 9;
        }
    }
    message MessageEvent {

        /* This event is generated whenever a message comes in, after is has been decrypted
         * and parsed (if any body parsers are configured for the device).
         *
         * It contains the relevant data in the message object, including location and the
         * user-defined body.
         *
         * If any body parser(s) are configured for the device, the device message object also contains
         * a ParsedBody for each of them.
         */
        message MessageReceivedEvent {
            string organization = 1;
            string modem_number = 2 [deprecated = true];
            string device_number = 9;

            /* External device id for this device (e.g. a MAC address). */
            string device_external_device_id = 8;

            /* The received message, including parsed body. */
            modem.ModemMessage message = 3;

            /* The device's tags. */
            repeated tag.Tag tags = 4;

            string title = 5;
            string description = 6;
            Timestamp time = 7;
        }

        /* This lightweight event is generated whenever a message comes in, after is has been decrypted. */
        message MessageBodyReceivedEvent {
            string organization = 1;
            string device_number = 2;

            /* External device id for this device (e.g. a MAC address). */
            string device_external_device_id = 3;

            /* Id of the message that was parsed. */
            uint64 message_id = 4;

            /* Time the message was sent from the device. */
            Timestamp sent_at = 5;

            /* Message body convenience object. */
            BytesOrHex body = 6;

            /* The device's tags. */
            repeated tag.Tag tags = 7;

            string title = 8;
            string description = 9;
            Timestamp time = 10;
        }

        /* This event is generated whenever a message is parsed successfully by an assigned body parser.
         * If multiple body parsers are assigned to a device, multiple DeviceMessageBodyParsedEvent events will
         * be produced by an incoming message.
         * For the total result of all assigned parsers, see the DeviceMessageReceivedEvent, which is produced
         * after all body parsers have been applied.
         */
        message MessageBodyParsedEvent {
            string organization = 1;
            string device_number = 2;

            /* External device id for this device (e.g. a MAC address). */
            string device_external_device_id = 3;

            /* Id of the message that was parsed. */
            uint64 message_id = 4;

            /* Time the message was sent from the device. */
            Timestamp sent_at = 5;

            /* The identifier of the parser that parsed the body. */
            string parser_identifier = 6;

            /* The name of the parser that parsed the body. */
            string parser_name = 7;

            /* The resulting json from parsing the message body. */
            google.protobuf.Struct parsed_message = 8;

            /* The device's tags. */
            repeated tag.Tag tags = 9;

            string title = 10;
            string description = 11;
            Timestamp time = 12;
        }

        /* Triggered when a message cannot be parsed. This can have multiple reasons, for example, an invalid
         * message version.
         */
        message MessageCannotBeParsedEvent {
            string organization = 1;
            string device_number = 2;

            /* External device id for this device (e.g. a MAC address). */
            string device_external_device_id = 9;

            /* The message that cannot be parsed.
             * This message may or may not be available in the system, depending one the reason it could not
             * be parsed.
             */
            uint64 message_id = 3;

            /* The moment this event was triggered. */
            Timestamp time = 4;

            /* The reason this message could not be parsed.
             * This could be, for example:
             * - invalid message envelope, but with enough information to determine the device
             * - all body parsers failed to parse the body of the message
             */
            string reason = 5;
            repeated tag.Tag tags = 6;
            string title = 7;
            string description = 8;

            /* The health level caused for the device (and organization) by this event. */
            health.HealthLevel health_level = 10;

            oneof resolved_status {
                /* Whether this event was resolved. */
                bool resolved = 11;

                /* The identifier to use when resolving this event. Only present when not resolved */
                string resolve_identifier = 12;
            }
        }
    }

    /* Events related to MessageBodyParsers. */
    message MessageBodyParserEvent {
        message CreatedEvent {
            string organization = 1;
            modem.message.bodyparser.ModemMessageBodyParser created = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message UpdatedEvent {
            string organization = 1;

            UpdateClearableString updated_name = 2 [deprecated = true];
            optional string name = 9;

            UpdateClearableString updated_content_ksy = 3 [deprecated = true];
            optional string content_ksy = 10;

            modem.message.bodyparser.SimpleModemMessageBodyParser updated_simple_parser = 4;

            Filter.ChildOrganizations.Update updated_available_to_child_organizations = 5 [deprecated = true];
            optional Filter.ChildOrganizations available_to_child_organizations = 11;

            string title = 6;
            string description = 7;
            Timestamp time = 8;
        }

        message DeletedEvent {
            string organization = 1;
            string deleted = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }
    }

    message AlarmEvent {
        message AlarmTriggeredEvent {
            string organization = 1;
            string device_number = 2;
            string device_external_device_id = 3;

            /* The id of the device that triggered the alarm, if any. */
            uint64 message_id = 4;

            /* The identifier of the alarm. */
            string alarm_identifier = 5;

            /* The description of the alarm. */
            string alarm_description = 6;

            /* The filled in error message(s) for the failing checks in the alarm. */
            map<string, string> error_messages = 7;

            /* The highest health level caused by the failing checks in this alarm,
             * for the device (and organization).
             */
            health.HealthLevel health_level = 12;

            repeated hiber.tag.Tag tags = 8;
            string title = 9;
            string description = 10;
            Timestamp time = 11;

            /* When this alarm event was resolved. */
            oneof resolved_status {
                /* Whether this event was resolved. */
                Timestamp resolved_at = 13;

                /* The identifier to use when resolving this event. Only present when not resolved */
                string resolve_identifier = 16;
            }

            /* Optional health that this alarm event causes after it has been resolved. */
            health.HealthLevel health_level_after_resolved = 14;

            /* How long the optional health that this alarm event causes after it has been resolved lasts. */
            Timestamp health_level_after_resolved_until = 15;
        }

        message CreatedEvent {
            string organization = 1;
            modem.alarm.ModemAlarm created = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message UpdatedEvent {
            message Update {
                UpdateClearableString deprecated_description = 1 [deprecated = true];
                optional string description = 7;
                string trigger_condition = 2;
                google.protobuf.Struct checks = 4;
                UpdateClearableString update_default_health_level = 5 [deprecated = true];
                optional string updated_default_health_level = 8;
                modem.alarm.ModemAlarm.HealthLevelAfterResolved update_health_level_after_resolved = 6;

                reserved 3;
            }

            string organization = 1;
            Update updated = 2;
            string alarm_identifier = 3;
            string title = 4;
            string description = 5;
            Timestamp time = 6;
        }

        message DeletedEvent {
            string organization = 1;
            string deleted = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }
    }

    message TransferEvent {
        string organization = 2;
        Timestamp time = 3;

        repeated tag.Tag tags = 4;

        string title = 5;
        string description = 6;

        transfer.Transfer transfer = 7;
    }

    message AssignmentEvent {
        message AssignedEvent {
            string organization = 1;
            assign.Assignment created = 2;
            repeated tag.Tag tags = 4;
            string title = 5;
            string description = 6;
            Timestamp time = 7;
        }

        message UnassignedEvent {
            string organization = 1;
            assign.Assignment removed = 2;
            repeated tag.Tag tags = 4;
            string title = 5;
            string description = 6;
            Timestamp time = 7;
        }
    }

    message UserEvent {
        message UserAddedEvent {
            string organization = 1;
            string user = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message UserRemovedEvent {
            string organization = 1;
            string user = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message UserInvitedEvent {
            string organization = 1;
            string email = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message UserAccessRequestEvent {
            string organization = 1;
            string user = 2;
            Timestamp time = 3;
            string title = 4;
            string description = 5;
        }

        message UserValidationUpdatedEvent {
            string organization = 1;
            string email_validation_regex = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }
    }

    message PublisherEvent {
        message CreatedEvent {
            string organization = 1;
            publisher.Publisher created = 2;
            repeated tag.Tag tags = 3;
            string title = 4;
            string description = 5;
            Timestamp time = 6;
        }

        message UpdatedEvent {
            message WebhookUpdate {
                optional string url = 1;
                UpdateClearableString deprecated_secret = 2 [deprecated = true];
                optional string secret = 4;
                optional webhook.Webhook.ContentType content_type = 3;
                UpdateOptionalId deprecated_certificate_id = 9 [deprecated = true];
                optional int64 certificate_id = 5;
            }

            message MQTTUpdate {
                string url = 1;
                integration.mqtt.MQTTPublisher.ContentType content_type = 2;
                string topic = 3;
                integration.mqtt.MQTTPublisher.Data.QoS qos = 4;

                UpdateClearableString deprecated_identifier = 5 [deprecated = true];
                optional string identifier = 9;

                UpdateClearableString deprecated_username = 6 [deprecated = true];
                optional string username = 10;

                UpdateClearableString deprecated_password = 7 [deprecated = true];
                optional string password = 11;

                UpdateOptionalId deprecated_certificate_id = 8 [deprecated = true];
                optional int64 certificate_id = 12;
            }

            message EmailUpdate {
            }

            message SlackUpdate {
            }

            message ShellSsipUpdate {
            }

            string organization = 1;
            UpdateClearableString deprecated_updated_description = 2 [deprecated = true];
            optional string updated_description = 24;

            /* Deprecated in favor of the new updated_data field */
            publisher.Publisher.Data partial_update_data = 3 [deprecated = true];

            oneof updated_data {
                WebhookUpdate webhook = 15;
                MQTTUpdate mqtt = 16;
                EmailUpdate email = 18;
                SlackUpdate slack = 22;
                ShellSsipUpdate shell_ssip = 23;
            }

            Filter.Events.Update deprecated_updated_event_filter = 4 [deprecated = true];
            optional Filter.Events updated_event_filter = 25;

            Filter.Modems.Update deprecated_updated_modem_filter = 5 [deprecated = true];
            optional Filter.Modems updated_modem_filter = 26;

            Filter.Tags.Update deprecated_updated_tag_filter = 6 [deprecated = true];
            optional Filter.Tags updated_tag_filter = 27;

            UpdateBoolean deprecated_updated_active_state = 7 [deprecated = true];
            optional bool updated_active_state = 28;

            reserved 20;
            Duration health_warning_period = 21;

            repeated tag.Tag tags = 8;
            string title = 9;
            string description = 10;
            Timestamp time = 11;

            reserved 17;
        }

        message DeletedEvent {
            string organization = 1;
            publisher.Publisher deleted = 2;
            repeated tag.Tag tags = 3;
            string title = 4;
            string description = 5;
            Timestamp time = 6;
        }

        message AutoDisabledEvent {
            string organization = 1;
            int64 id = 2;
            repeated tag.Tag tags = 3;
            string title = 4;
            string description = 5;
            Timestamp time = 6;

            /* The health level caused for the publisher (and organization) by this event. */
            health.HealthLevel health_level = 7;
        }

        message FailedEvent {
            string organization = 1;
            string reason = 2;
            publisher.Publisher failed = 3;
            repeated tag.Tag tags = 4;
            string title = 5;
            string description = 6;
            Timestamp time = 7;

            /* The health level caused for the publisher (and organization) by this event. */
            health.HealthLevel health_level = 8;
        }
    }

    message TokenEvent {
        message TokenCreatedEvent {
            string organization = 1;
            token.Token token = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message TokenExpiryWarningEvent {
            string organization = 1;
            token.Token token = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;

            /* The health level caused for the organization by this event. */
            health.HealthLevel health_level = 6;
        }

        message TokenExpiredEvent {
            string organization = 1;
            token.Token token = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message TokenDeletedEvent {
            string organization = 1;
            token.Token token = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }
    }

    message OrganizationEvent {
        message OrganizationCreatedEvent {
            string parent_organization = 1;
            organization.Organization created = 2;
            string title = 9;
            string description = 10;
            Timestamp time = 11;
        }

        message OrganizationUpdatedEvent {
            string organization = 1;
            optional string display_name_updated = 2;
            optional string vat_number_updated = 3;
            optional organization.Organization.Address address_updated = 4;
            UpdateBoolean is_business_updated = 5 [deprecated = true];
            optional bool business_updated = 14;
            optional string billing_name_updated = 6;
            optional organization.Organization.Address billing_address_updated = 7;
            optional organization.Organization.Contact contact_updated = 8;
            string title = 9;
            string description = 10;
            Timestamp time = 11;
            repeated organization.Organization.Feature features_added = 12;
            repeated organization.Organization.Feature features_removed = 13;
        }

        message OrganizationDeletedEvent {
            string parent_organization = 1;
            string deleted_organization = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message EventConfigurationUpdated {
            message MessageSummaryUpdate {
                UpdateBoolean enabled = 1 [deprecated = true];
                optional bool state = 4;
                optional Duration period = 2;
                optional Timestamp align_to_time = 3;
            }

            string organization = 1;
            MessageSummaryUpdate message_summary_update = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        /* Message summary event that is sent when it has been configured for the organization.
         * The period is configurable, using the EventConfiguration.
         * This event is disabled by default.
         */
        message MessageSummaryEvent {
            message MessageCount {
                string device = 1;
                modem.ModemMessage.Source source = 2;
                int32 amount = 3;
            }

            string organization = 1;
            repeated MessageCount message_count = 2;
            string title = 5;
            string description = 6;
            Timestamp time = 7;
            TimeRange time_range = 8;
        }
    }

    message ExportEvent {
        message ExportCreatedEvent {
            string organization = 1;
            export.Export export = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message ExportReadyEvent {
            string organization = 1;
            export.Export export = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message ExportFailedEvent {
            string organization = 1;
            export.Export export = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }
    }
}

/* A bundle/set of events, all of the same event-type. */
message BundledEvent {
    EventType type = 1;
    string title = 3;
    string description = 4;

    /* Indicates that the amount is an exact count, and not an approximated value. */
    message ExactAmount {
        int32 amount = 1;
        Timestamp last_event = 2;
    }

    /* Indicates that the amount is an approximation, and not an exact value.
     * Some events will be approximated to avoid a large number of events affecting the request time.
     * Because of the nature of approximation, we don't have a "last" event, so no timestamp is available.
     */
    message ApproximatedAmount {
        int32 amount = 1;
    }

    oneof amount {
        ExactAmount exact_amount = 7;
        ApproximatedAmount approximated_amount = 8;
    }

    /* Deprecated in favour of using the amount field that is either an ExactAmount or ApproximatedAmount */
    int32 deprecated_amount = 2 [deprecated = true];

    /* Deprecated in favour of using the amount field that is either an ExactAmount or ApproximatedAmount.
     * since `last_event` is not available when using approximation (we don't know the actual last event),
     * this field is only present when getting an ExactAmount.
     */
    Timestamp deprecated_last_event = 5 [deprecated = true];

    /* Indicates that the amount is an approximation, and not an exact value.
     * Some events will be approximated to avoid a large number of events affecting the request time.
     * Deprecated in  favour of using the oneof_amount field that is either an ExactAmount or ApproximatedAmount
     */
    bool deprecated_approximated_amount = 6 [deprecated = true];
}

/* Selection object for Event list and stream. Filter events on device, webhook, time and error state, and
 * paginate the list.
 * Events are returned bundled by default. this means that, instead of the details, you get a list of bundles,
 * one per event type, with the count.
 */
message EventSelection {
    optional Filter.Events events = 1;
    optional Filter.Modems modems = 2;
    optional Filter.Publishers publishers = 3;
    optional Filter.Tags tags = 4;
    optional TimeRange time_range = 6;

    /* Filter events by actual configured health level. */
    repeated string health_levels = 11;

    /* By default, events that have been resolved are not listed. */
    optional bool include_resolved_events = 9;

    /* When not set, no unbundled events are returned.
     * When set, returns unbundled events per type, paginated per type.
     * Deprecated: use unbundled_events on ListEventsRequest
     */
    optional bool unbundled_events = 8 [deprecated = true];

    /* Return only events that cause the default Error health.
     * Deprecated: use health_levels with custom health levels instead.
     */
    optional bool errors_only = 7 [deprecated = true];

    /* Return only events that cause the default Warning health.
     * Deprecated: use health_levels with custom health levels instead.
     */
    optional bool warnings_only = 10 [deprecated = true];
}

/* Lists all events matching the given criteria.
 * The frequency of event can vary greatly per type, resulting in unclear pagination and some event types overshadowing
 * others. For this reason, event are bundled by default, reducing them to a count per event type.
 * If unbundled events for certain types are required, this can be toggled in the selection object.
 * Pagination is only applied to unbundled events, and is applied per event type. This may result in a non-linear
 * timeline from page to page when selecting two types with a large difference in frequency, but makes sure you
 * see the most recent events of each type on the first page.
 */
message ListEventsRequest {
    message Response {
        message EventTypeResponse {
            EventType type = 1;
            repeated Event unbundled_events = 2;
            Pagination.Result pagination = 3;
        }

        ListEventsRequest request = 2;
        repeated BundledEvent events = 4;
        repeated EventTypeResponse unbundled_events = 5;

        reserved 1, 3;
    }

    enum Sort {
        TIME_DESCENDING = 0;
        TIME_ASCENDING = 1;
        DEVICE_NUMBER_ASC = 2;
        DEVICE_NUMBER_DESC = 3;
        DEVICE_NUMBER_SPECIFIED = 4;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* Select the events to list. Optional, when omitted or empty everything is included. */
    optional EventSelection selection = 2;

    /* Pagination is applied per event type on unbundled events. It is not necessary for bundled events. */
    optional Pagination pagination = 3;

    optional Sort sort = 4;

    /* When not set, bundled/grouped events are returned.
     * When set, returns unbundled events per type, paginated per type.
     * Overrides unbundled_events in EventSelection message.
     */
    optional bool unbundled_events = 5;

    /* Return events for process point instead of asset.
     * Defaults to using asset for backwards compatibility.
     */
    optional bool use_process_point = 6 [deprecated = true];
}

/* Get the history of events that match the given filter, chronologically (by default, from now backwards in time).
 *
 * Only returns the Event with first-level fields set, event details are not included in the response
 * (the oneof is not set).
 */
message EventHistory {
    /* Selection for which events to include the response.
     * Using the EventSelection you'll be able to filter on specific types, or other properties of events.
     * The Pagination object will let you limit the number of events returned.
     */
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        optional string organization = 1;

        /* Select the events to list. Optional, when omitted or empty everything is included. */
        optional EventSelection selection = 2;
        optional Pagination pagination = 3;

        /* Return events for process point instead of asset.
         * Defaults to using asset for backwards compatibility.
         */
        optional bool use_process_point = 4 [deprecated = true];
    }

    message Response {
        Request request = 1;
        repeated Event events = 2;
        Pagination.Result pagination = 3;
    }
}

/* Creates a stream for new events, matching the provided selection.
 *
 * Note: streams are limited to one per user due to GRPC limitations.
 */
message EventStreamRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* Select the events to stream. Optional, when omitted or empty everything is included. */
    optional EventSelection selection = 2;

    /* Include events from child organizations, if requested.
     * This is only available for streaming, listing events can only be listed per organization.
     * Keep in mind that filtering events using the selection is limited.
     * Filtering on tags or publishers, for example, can only apply to the parent organization.
     */
    optional Filter.ChildOrganizations child_organizations = 3;

    /* Return events for process point instead of asset.
     * Defaults to using asset for backwards compatibility.
     */
    optional bool use_process_point = 4 [deprecated = true];
}

/* Get the list of events that affect device health, chronologically (by default, from now backwards in time).
 *
 * Only returns the Event with first-level fields set, event details are not included in the response
 * (the oneof is not set).
 */
message ModemHealthEvents {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        optional string organization = 1;

        /* Select the events to list. Optional, when omitted or empty everything is included. */
        optional EventSelection selection = 2;
        optional Pagination pagination = 3;

        /* Return events for process point instead of asset.
         * Defaults to using asset for backwards compatibility.
         */
        optional bool use_process_point = 4 [deprecated = true];
    }
    message Response {
        Request request = 1;
        repeated Event events = 2;
        Pagination.Result pagination = 3;
    }
}

/* Resolve a resolvable event using its resolve_identifier. */
message ResolveEvent {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        optional string organization = 1;

        /* The resolve identifier of the event you wish to resolve. */
        string resolve_identifier = 2;
    }
    message Response {
        /* The amount of events that were resolved. */
        uint32 resolved = 2;

        reserved 1;
    }
}

/* Mark a selection of events as resolved. */
message MarkEventsResolved {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        optional string organization = 1;

        /* Selection of events to resolve. */
        EventSelection selection = 3;
    }
    message Response {
        /* The amount of events that were resolved. */
        uint32 resolved = 1;

        /* The original request, echoed back with any applied corrections. */
        Request request = 2;
    }
}

/* Configuration for configurable events.
 * Some events are disable by default, or can be configured in different ways. Their configuration is available here.
 */
message EventConfiguration {
    /* When enabled, this sends a MessageSummaryEvent periodically.
     * For example, you can configure the message summary to be a daily message, aligned to midnight in your time zone.
     */
    message MessageSummaryConfiguration {
        /* The message summary event is disabled by default. */
        bool enabled = 1;

        /* The period to send the message summary event for. The event can be sent every hour, day, etc. */
        Duration period = 2;

        /* Align the period to given time.
         * For example, an hourly period sends can be aligned to 0:00 to send every whole hour.
         * A weekly period can be aligned to send at a specific time on Monday by aligning to a timestamp on a Monday.
         * If a textual time zone is configured in this timestamp, it is used as well and should shift with changes
         * like daylight saving time automatically.
         */
        Timestamp align_to_time = 3;

        /* Send an event, even if the summary does not contain any information
         */
        bool include_empty_summaries = 4;
    }

    /* Details the health level configuration for an event-type.
     * Health of the system can be influenced by multiple things, among which certain events.
     * When an event that has health associated with it,
     * said health level will be applied to the part of the system it refers to.
     * For instance, an event about not being able to parse device messages, will influence device health.
     * An event about a failing parser, will affect parser health.
     *
     * In general, when multiple events affect the health level of a subsystem,
     * the most severe health will be applied.
     *
     * When an expiry duration is set, events will no longer affect health of the subsystem after the configured period.
     * Health levels reset to the least severe applicable level, typically "Ok".
     *
     * For instance, an event might not be relevant anymore after 5 days.
     * By setting expiry to "5d", the event will resolve automatically 5 days after the last event happened.
     * Depending on other factors that influence device health,
     * the health level will be reset to the least severe health level available.
     *
     * If there is no expiry duration, events need to be resolved manually.
     *
     * To update, use EventService/UpdateEventHealthConfiguration(UpdateEventHealthConfiguration.Request)
     */
    message EventHealthLevelConfiguration {
        /* The event type for which this configuration is applicable. */
        EventType type = 1;
        /* The health level to produce when this event happens. */
        health.HealthLevel level = 2;
        /* If set, the duration for which the health level is applied. Afterward this event has no effect on health. */
        Duration expiry = 3;

        /* When this configuration item was created. */
        Timestamp created_at = 4;
        /* The most recent time this configuration item was updated. */
        Timestamp updated_at = 5;
    }

    string organization = 1;
    MessageSummaryConfiguration message_summary_configuration = 2;

    /* List of event-types that have a health-level associated with them. Ignored when updating. */
    repeated EventHealthLevelConfiguration event_health_level_configuration = 3;
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        optional string organization = 1;
    }
}

message UpdateEventHealthConfiguration {

    /* Updates health-level configuration for a specific event-type.
     * To find available health-level names, use HealthService/List(ListHealthLevels.Request).
     * To clear an existing expiry, set `updated` true and leave `duration` to be the default value.
     */
    message UpdateEventHealth {
        /* When set, events of this type will affect the system with the configured health level. */
        EventType type = 1;

        /* The health level to produce when the event happens, by name. */
        string level = 2;

        /* After the expiry duration, the event will not affect health anymore. Clear for manual resolving of events. */
        optional Duration expiry = 4;
        UpdateOptionalDuration deprecated_expiry = 3 [deprecated = true];
    }

    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        optional string organization = 1;
        /* List of event-types to update health for. When listing same event twice, behaviour is undefined. */
        repeated UpdateEventHealth updates = 2;
    }
    message Response {
        /* The original request, echoed back. */
        Request request = 1;
        /* The updated event configuration. */
        EventConfiguration event_configuration = 2;
    }
}
