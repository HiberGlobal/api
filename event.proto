syntax = "proto3";

package hiber.event;

import "google/protobuf/struct.proto";

import "base.proto";
import "integration_aws_iot.proto";
import "integration_mqtt.proto";
import "modem.proto";
import "modem_claim.proto";
import "modem_message_body_parser.proto";
import "modem_message_body_parser_automatic_assignment.proto";
import "modem_transfer.proto";
import "organization.proto";
import "publisher.proto";
import "tag.proto";
import "token.proto";
import "user.proto";
import "webhook.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.event";
option java_outer_classname = "EventApi";
option go_package = "hiber";

/* Events are used in a number of ways in the api. With this service you can
 * search, list and stream them for your own purposes
 */
service EventService {
    rpc List (ListEventsRequest) returns (ListEventsRequest.Response);
    rpc Stream (EventStreamRequest) returns (stream Event);

    rpc GetEventConfiguration (EventConfiguration.Request) returns (EventConfiguration);
    rpc UpdateEventConfiguration (EventConfiguration) returns (EventConfiguration);
}

/* Generic Event object, used in streams where events are mixed. Protobuf provides helper methods to extract
 * the contained object.
 */
message Event {
    bool is_error = 1;
    oneof event {
        ModemEvent.ModemUpdatedEvent modem_updated = 39;
        ModemEvent.ModemLocationUpdatedEvent modem_location_updated = 2;
        ModemEvent.ModemActivatedEvent modem_activated = 36;
        ModemEvent.ModemStaleEvent modem_stale = 3;
        ModemEvent.MessageEvent.ModemMessageReceivedEvent modem_message_received = 4;
        ModemEvent.MessageEvent.ModemMessageBodyReceivedEvent modem_message_body_received = 44;
        ModemEvent.MessageEvent.ModemMessageBodyParsedEvent modem_message_body_parsed = 45;
        ModemEvent.MessageEvent.ModemMessageDroppedEvent modem_message_dropped = 5;
        ModemEvent.MessageEvent.ModemMessageDelayedEvent modem_message_delayed = 6;
        ModemEvent.MessageEvent.ModemMessageCannotBeParsedEvent modem_message_cannot_be_parsed = 7;
        ModemEvent.MessageBodyParserEvent.CreatedEvent modem_message_body_parser_created = 46;
        ModemEvent.MessageBodyParserEvent.UpdatedEvent modem_message_body_parser_updated = 47;
        ModemEvent.MessageBodyParserEvent.DeletedEvent modem_message_body_parser_deleted = 48;
        ModemEvent.MessageBodyParserEvent.AutomaticAssignmentEvent.CreatedEvent modem_message_body_parser_automatic_assignment_created = 49;
        ModemEvent.MessageBodyParserEvent.AutomaticAssignmentEvent.UpdatedEvent modem_message_body_parser_automatic_assignment_updated = 50;
        ModemEvent.MessageBodyParserEvent.AutomaticAssignmentEvent.DeletedEvent modem_message_body_parser_automatic_assignment_deleted = 51;
        ModemEvent.MessageBodyParserEvent.AssignedEvent modem_message_body_parser_assigned = 52;
        ModemEvent.MessageBodyParserEvent.UnassignedEvent modem_message_body_parser_unassigned = 53;
        UserEvent.UserAddedEvent user_added = 8;
        UserEvent.UserRemovedEvent user_removed = 9;
        UserEvent.UserInvitedEvent user_invited = 41;
        UserEvent.UserAccessRequestEvent user_access_request = 10;
        UserEvent.UserValidationUpdatedEvent user_validation_updated = 54;
        ModemTransferEvent.ModemTransferStartedEvent modem_transfer_started = 15;
        ModemTransferEvent.ModemTransferCancelledEvent modem_transfer_cancelled = 16;
        ModemTransferEvent.ModemTransferReceivedEvent modem_transfer_received = 17;
        ModemTransferEvent.ModemTransferNotReceivedEvent modem_transfer_not_received = 18;
        ModemTransferEvent.ModemTransferReturnTransferStartedEvent modem_transfer_return_transfer_started = 19;
        ModemEvent.ClaimEvent.ModemClaimedEvent modem_claimed_event = 20;
        TokenEvent.TokenExpiryWarningEvent token_expiry_warning = 23;
        TokenEvent.TokenExpiredEvent token_expired = 24;
        TokenEvent.TokenCreatedEvent token_created = 30;
        TokenEvent.TokenDeletedEvent token_deleted = 35;
        OrganizationEvent.OrganizationCreatedEvent organization_created = 37;
        OrganizationEvent.OrganizationUpdatedEvent organization_updated = 25;
        OrganizationEvent.OrganizationDeletedEvent organization_deleted = 38;
        OrganizationEvent.ModemMessageSummaryEvent modem_message_summary = 42;
        OrganizationEvent.EventConfigurationUpdated organization_event_configuration_updated = 43;
        PublisherEvent.CreatedEvent publisher_created = 31;
        PublisherEvent.UpdatedEvent publisher_updated = 32;
        PublisherEvent.DeletedEvent publisher_deleted = 33;
        PublisherEvent.AutoDisabledEvent publisher_auto_disabled = 40;
        PublisherEvent.FailedEvent publisher_failed = 34;
        // reserved 11, 12, 13, 14, 21, 22, 26, 27, 28, 29;
    }

    message ModemEvent {
        message ModemUpdatedEvent {
            string organization = 1;
            string modem_number = 2;

            UpdateClearableString display_name = 10;
            modem.Modem.Peripherals.HiberAntenna antenna = 11;
            UpdateClearableString custom_antenna = 12;
            UpdateBoolean gps = 13;
            Location location = 14;
            map<string, string> peripherals = 15;
            UpdateClearableString notes = 16;
            bool secure_notes_updated = 17;
            reserved 18;
            Duration health_warning_period = 19;
            Timestamp time = 4;
            repeated tag.Tag tags = 5;
            string title = 6;
            string description = 7;
        }

        /* When a message comes in, the modem's location is updated automatically. This event is generated whenever the
         * modem's location is updated
         */
        message ModemLocationUpdatedEvent {
            string organization = 1;
            string modem_number = 2;
            Location location = 3;
            Timestamp time = 4;
            repeated tag.Tag tags = 5;
            string title = 6;
            string description = 7;
        }

        /* When a modem hasn't received any message for a configurable period, it is considered stale. This event is
         * generated as soon as this condition is determined
         */
        message ModemStaleEvent {
            string organization = 1;
            string modem_number = 2;
            int32 maximum_inactivity_period = 3;
            Timestamp time = 4;
            Timestamp last_message = 5;
            repeated tag.Tag tags = 6;
            string title = 7;
            string description = 8;
        }

        /* When the first _real_ message for a modem comes in, the modem is considered to be activated.
         * A _real_ message is:
         * - a message received through a modem, on an environment that has real modems (hiber.cloud)
         * - any test message, on an environment that only has simulated modems (dev.hiber.global)
         */
        message ModemActivatedEvent {
            string organization = 1;
            string modem_number = 2;
            uint64 message_id = 3;
            Timestamp time = 4;
            Timestamp sent_at = 10;
            repeated tag.Tag tags = 7;
            string title = 8;
            string description = 9;
        }

        message MessageEvent {

            /* This event is generated whenever a message comes in, after is has been decrypted
             * and parsed (if any body parsers are configured for the modem).
             *
             * It contains the relevant data in the message object, including location and the
             * user-defined body.
             *
             * If any body parser(s) are configured for the modem, the modem message object also contains
             * a ParsedBody for each of them.
             */
            message ModemMessageReceivedEvent {
                string organization = 1;
                string modem_number = 2;
                string modem_external_device_id = 8;

                /* The received message, including parsed body. */
                modem.ModemMessage message = 3;

                /* The modem's tags. */
                repeated tag.Tag tags = 4;

                string title = 5;
                string description = 6;
                Timestamp time = 7;
            }

            /* This lightweight event is generated whenever a message comes in, after is has been decrypted. */
            message ModemMessageBodyReceivedEvent {
                string organization = 1;
                string modem_number = 2;
                string modem_external_device_id = 3;

                /* Id of the message that was parsed. */
                uint64 message_id = 4;

                /* Time the message was sent from the modem. */
                Timestamp sent_at = 5;

                /* Message body convenience object. */
                BytesOrHex body = 6;

                /* The modem's tags. */
                repeated tag.Tag tags = 7;

                string title = 8;
                string description = 9;
                Timestamp time = 10;
            }

            /* This event is generated whenever a message is parsed successfully by an assigned body parser.
             * If multiple body parsers are assigned to a modem, multiple ModemMessageParsedEvent events will
             * be produced by an incoming message.
             * For the total result of all assigned parsers, see the ModemMessageReceivedEvent, which is produced
             * after all body parsers have been applied.
             */
            message ModemMessageBodyParsedEvent {
                string organization = 1;
                string modem_number = 2;
                string modem_external_device_id = 3;

                /* Id of the message that was parsed. */
                uint64 message_id = 4;

                /* Time the message was sent from the modem. */
                Timestamp sent_at = 5;

                /* The identifier of the parser that parsed the body. */
                string parser_identifier = 6;

                /* The name of the parser that parsed the body. */
                string parser_name = 7;

                /* The resulting json from parsing the message body. */
                google.protobuf.Struct parsed_message = 8;

                /* The modem's tags. */
                repeated tag.Tag tags = 9;

                string title = 10;
                string description = 11;
                Timestamp time = 12;
            }

            /* Every message has a sequence marker. When we detect a jump in the sequence number,
             * we can determine whether we missed a message (or even multiple messages).
             * Typically, this is caused by interference between the modem and the satellite.
             * Note that this event is only generated when a message comes in.
             * If no messages come in for a certain period, the ModemStaleEvent is used.
             */
            message ModemMessageDroppedEvent {
                string organization = 1;
                string modem_number = 2;

                /* The amount of dropped messages between the previous message and this message. */
                int32 dropped_messages = 3;

                /* The message that produced this event.
                 * Note that this is a reduced version of the message, and may omit parsed body.
                 */
                modem.ModemMessage message = 4;

                /* The modem's tags at the time this message was received. */
                repeated tag.Tag tags = 5;

                Health modem_health = 6;
                string title = 7;
                string description = 8;
                Timestamp time = 9;
            }

            /* Triggered when the time between sending and receiving the message is above a certain threshold. This can
             * indicate that there is a communication issue between the modem and the server, i.e. a malfunction ground
             * station, so that the satellite takes longer to send its data on.
             */
            message ModemMessageDelayedEvent {
                string organization = 1;
                string modem_number = 2;

                /* The message that produced this event.
                 * Note that this is a reduced version of the message, and may omit parsed body.
                 */
                modem.ModemMessage message = 3;

                /* The amount of seconds the message was delayed, if it is more than 1 day. */
                int64 delay_seconds = 4;

                /* The modem's tags at the time this message was received. */
                repeated tag.Tag tags = 5;

                Health modem_health = 6;
                string title = 7;
                string description = 8;
                Timestamp time = 9;
            }

            /* Triggered when a message cannot be parsed. This can have multiple reasons, for example, an invalid
             * message version.
             */
            message ModemMessageCannotBeParsedEvent {
                string organization = 1;
                string modem_number = 2;
                uint64 modem_message_id = 3;
                Timestamp time = 4;
                string reason = 5;
                repeated tag.Tag tags = 6;
                string title = 7;
                string description = 8;
            }
        }

        /* Events related to ModemMessageBodyParsers. */
        message MessageBodyParserEvent {
            message CreatedEvent {
                string organization = 1;
                modem.message.bodyparser.ModemMessageBodyParser created = 2;
                string title = 3;
                string description = 4;
                Timestamp time = 5;
            }

            message UpdatedEvent {
                string organization = 1;
                UpdateClearableString updated_name = 2;
                UpdateClearableString updated_content_ksy = 3;
                modem.message.bodyparser.SimpleModemMessageBodyParser updated_simple_parser = 4;
                Filter.ChildOrganizations.Update updated_available_to_child_organizations = 5;
                string title = 6;
                string description = 7;
                Timestamp time = 8;
            }

            message DeletedEvent {
                string organization = 1;
                string deleted = 2;
                string title = 3;
                string description = 4;
                Timestamp time = 5;
            }

            message AssignedEvent {
                string organization = 1;
                repeated string parsers = 2;
                repeated string modems = 3;
                repeated tag.Tag tags = 4;
                string title = 5;
                string description = 6;
                Timestamp time = 7;
            }

            message UnassignedEvent {
                string organization = 1;
                repeated string parsers = 2;
                repeated string modems = 3;
                repeated tag.Tag tags = 4;
                string title = 5;
                string description = 6;
                Timestamp time = 7;
            }

            message AutomaticAssignmentEvent {
                message CreatedEvent {
                    string organization = 1;
                    modem.message.bodyparser.ModemMessageBodyParserAutomaticAssignmentRule created = 2;
                    string title = 3;
                    string description = 4;
                    Timestamp time = 5;
                }

                message UpdatedEvent {
                    message Update {
                        UpdateClearableString description = 1;
                        repeated string parsers_added = 2;
                        repeated string parsers_removed = 3;
                        Filter.Modems.Update modems = 4;
                        Filter.Tags.Update tags = 5;
                        repeated string manufacturers_added = 6;
                        repeated string manufacturers_removed = 7;
                        map<string, string> peripherals_added = 8;
                        repeated string peripherals_removed = 9;
                        Filter.ChildOrganizations.Update apply_to_child_organizations = 10;
                        UpdateBoolean active = 11;
                    }

                    string organization = 1;
                    Update updated = 2;
                    string title = 3;
                    string description = 4;
                    Timestamp time = 5;
                }

                message DeletedEvent {
                    string organization = 1;
                    string deleted = 2;
                    string title = 3;
                    string description = 4;
                    Timestamp time = 5;
                }
            }
        }

        message ClaimEvent {
            message ModemClaimedEvent {
                string organization = 1;
                string modem_number = 2;
                modem.ModemClaim claim = 3;
                Timestamp time = 4;
                string title = 5;
                string description = 6;
                repeated tag.Tag tags = 7;
            }
        }
    }

    message ModemTransferEvent {
        message ModemTransferStartedEvent {
            modem.ModemTransfer transfer = 1;
            string organization = 2;
            Timestamp time = 3;
            repeated tag.Tag tags = 4;
            string title = 5;
            string description = 6;
        }

        message ModemTransferCancelledEvent {
            modem.ModemTransfer transfer = 1;
            string organization = 2;
            Timestamp time = 3;
            repeated tag.Tag tags = 4;
            string title = 5;
            string description = 6;
        }

        message ModemTransferReceivedEvent {
            modem.ModemTransfer transfer = 1;
            string organization = 2;
            Timestamp time = 3;
            repeated tag.Tag tags = 4;
            string title = 5;
            string description = 6;
        }

        message ModemTransferNotReceivedEvent {
            modem.ModemTransfer transfer = 1;
            string organization = 2;
            Timestamp time = 3;
            repeated tag.Tag tags = 4;
            string title = 5;
            string description = 6;
        }

        message ModemTransferReturnTransferStartedEvent {
            modem.ModemTransfer return_transfer = 1;
            modem.ModemTransfer original_transfer = 2;
            repeated modem.ModemTransferReturnLine return_lines = 3;
            string organization = 4;
            Timestamp time = 5;
            repeated tag.Tag tags = 6;
            string title = 7;
            string description = 8;
        }
    }

    message UserEvent {
        message UserAddedEvent {
            string organization = 1;
            string user = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message UserRemovedEvent {
            string organization = 1;
            string user = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message UserInvitedEvent {
            string organization = 1;
            string email = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message UserAccessRequestEvent {
            string organization = 1;
            string user = 2;
            Timestamp time = 3;
            string title = 4;
            string description = 5;
        }

        message UserValidationUpdatedEvent {
            string organization = 1;
            string email_validation_regex = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }
    }

    message PublisherEvent {
        message CreatedEvent {
            string organization = 1;
            publisher.Publisher created = 2;
            repeated tag.Tag tags = 3;
            string title = 4;
            string description = 5;
            Timestamp time = 6;
        }

        message UpdatedEvent {
            message WebhookUpdate {
                string url = 1;
                UpdateClearableString secret = 2;
                webhook.Webhook.ContentType content_type = 3;
                UpdateOptionalId certificate_id = 9;
            }

            message MQTTUpdate {
                string url = 1;
                integration.mqtt.MQTTPublisher.ContentType content_type = 2;
                string topic = 3;
                integration.mqtt.MQTTPublisher.Data.QoS qos = 4;
                UpdateClearableString identifier = 5;
                UpdateClearableString username = 6;
                UpdateClearableString password = 7;
                UpdateOptionalId certificate_id = 8;
            }

            message AWSIoTUpdate {
                string aws_iot_url = 2;
                UpdateOptionalId certificate_id = 3;
                string mqtt_client_identifier = 5;
            }

            message EmailUpdate {
            }

            string organization = 1;
            UpdateClearableString updated_description = 2;

            /* Deprecated in favor of the new updated_data field */
            publisher.Publisher.Data partial_update_data = 3 [deprecated = true];

            oneof updated_data {
                WebhookUpdate webhook = 15;
                MQTTUpdate mqtt = 16;
                AWSIoTUpdate aws_iot = 17;
                EmailUpdate email = 18;
            }

            Filter.Events.Update updated_event_filter = 4;
            Filter.Modems.Update updated_modem_filter = 5;
            Filter.Tags.Update updated_tag_filter = 6;

            UpdateBoolean updated_active_state = 7;
            reserved 20;
            Duration health_warning_period = 21;

            repeated tag.Tag tags = 8;
            string title = 9;
            string description = 10;
            Timestamp time = 11;
        }

        message DeletedEvent {
            string organization = 1;
            publisher.Publisher deleted = 2;
            repeated tag.Tag tags = 3;
            string title = 4;
            string description = 5;
            Timestamp time = 6;
        }

        message AutoDisabledEvent {
            string organization = 1;
            int64 id = 2;
            repeated tag.Tag tags = 3;
            string title = 4;
            string description = 5;
            Timestamp time = 6;
        }

        message FailedEvent {
            string organization = 1;
            string reason = 2;
            publisher.Publisher failed = 3;
            repeated tag.Tag tags = 4;
            string title = 5;
            string description = 6;
            Timestamp time = 7;
        }
    }

    message TokenEvent {
        message TokenCreatedEvent {
            string organization = 1;
            token.Token token = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message TokenExpiryWarningEvent {
            string organization = 1;
            token.Token token = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message TokenExpiredEvent {
            string organization = 1;
            token.Token token = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message TokenDeletedEvent {
            string organization = 1;
            token.Token token = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }
    }

    message OrganizationEvent {
        message OrganizationCreatedEvent {
            string parent_organization = 1;
            organization.Organization created = 2;
            string title = 9;
            string description = 10;
            Avatar avatar = 12;
            Timestamp time = 11;
        }

        message OrganizationUpdatedEvent {
            string organization = 1;
            string display_name_updated = 2;
            string vat_number_updated = 3;
            organization.Organization.Address address_updated = 4;
            UpdateBoolean is_business_updated = 5;
            string billing_name_updated = 6;
            organization.Organization.Address billing_address_updated = 7;
            organization.Organization.Contact contact_updated = 8;
            string title = 9;
            string description = 10;
            Timestamp time = 11;
        }

        message OrganizationDeletedEvent {
            string parent_organization = 1;
            string deleted_organization = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        message EventConfigurationUpdated {
            message ModemMessageSummaryUpdate {
                UpdateBoolean enabled = 1;
                Duration period = 2;
                Timestamp align_to_time = 3;
            }

            string organization = 1;
            ModemMessageSummaryUpdate modem_message_summary_update = 2;
            string title = 3;
            string description = 4;
            Timestamp time = 5;
        }

        /* Message summary event that is sent when it has been configured for the organization.
         * The period is configurable, using the EventConfiguration.
         * This event is disabled by default.
         */
        message ModemMessageSummaryEvent {
            message MessageCount {
                string modem = 1;
                modem.ModemMessage.Source source = 2;
                int32 amount = 3;
            }

            string organization = 1;
            repeated MessageCount message_count = 2;
            string title = 5;
            string description = 6;
            Timestamp time = 7;
            TimeRange time_range = 8;
        }
    }
}

message BundledEvent {
    EventType type = 1;
    int32 amount = 2;
    string title = 3;
    string description = 4;
    Timestamp last_event = 5;
}

/* Selection object for Event list and stream. Filter events on modem, webhook, time and error state, and
 * paginate the list.
 * Events are returned bundled by default. this means that, instead of the details, you get a list of bundles,
 * one per event type, with the count.
 */
message EventSelection {
    Filter.Events events = 1;
    Filter.Modems modems = 2;
    Filter.Publishers publishers = 3;
    Filter.Tags tags = 4;
    TimeRange time_range = 6;
    bool errors_only = 7;
    /* When not set, no unbundled events are returned.
     * When set, returns unbundled events per type, paginated per type.
     */
    bool unbundled_events = 8;
    bool include_resolved_events = 9;
}

/* Lists all events matching the given criteria.
 * The frequency of event can vary greatly per type, resulting in unclear pagination and some event types overshadowing
 * others. For this reason, event are bundled by default, reducing them to a count per event type.
 * If unbundled events for certain types are required, this can be toggled in the selection object.
 * Pagination is only applied to unbundled events, and is applied per event type. This may result in a non-linear
 * timeline from page to page when selecting two types with a large difference in frequency, but makes sure you
 * see the most recent events of each type on the first page.
 */
message ListEventsRequest {
    message Response {
        message EventTypeResponse {
            EventType type = 1;
            repeated Event unbundled_events = 2;
            Pagination.Result pagination = 3;
        }

        ListEventsRequest request = 2;
        repeated BundledEvent events = 4;
        repeated EventTypeResponse unbundled_events = 5;
        reserved 1, 3;
    }

    enum Sort {
        TIME_DESCENDING = 0;
        TIME_ASCENDING = 1;
        MODEM_NUMBER_ASC = 2;
        MODEM_NUMBER_DESC = 3;
        MODEM_NUMBER_SPECIFIED = 4;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    EventSelection selection = 2;
    /* Pagination is applied per event type on unbundled events. It is not necessary for bundled events. */
    Pagination pagination = 3;
    Sort sort = 4;
}

/* Creates a stream for new events, matching the provided selection.
 */
message EventStreamRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    EventSelection selection = 2;
}

/* Configuration for configurable events.
 * Some events are disable by default, or can be configured in different ways. Their configuration is available here.
 */
message EventConfiguration {
    /* When enabled, this sends a ModemMessageSummaryEvent periodically.
     * For example, you can configure the message summary to be a daily message, aligned to midnight in your time zone.
     */
    message ModemMessageSummaryConfiguration {
        /* The message summary event is disabled by default. */
        bool enabled = 1;

        /* The period to send the message summary event for. The event can be sent every hour, day, etc. */
        Duration period = 2;

        /* Align the period to given time.
         * For example, an hourly period sends can be aligned to 0:00 to send every whole hour.
         * A weekly period can be aligned to send at a specific time on Monday by aligning to a timestamp on a Monday.
         *
         * If a textual time zone is configured in this timestamp, it is used as well and should shift with changes
         * like daylight saving time automatically.
         */
        Timestamp align_to_time = 3;
    }

    string organization = 1;
    ModemMessageSummaryConfiguration modem_message_summary_configuration = 2;

    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;
    }
}
