syntax = "proto3";

package hiber.publisher;

import "base.proto";
import "email_notifications.proto";
import "integration_mqtt.proto";
import "integration_slack.proto";
import "tag.proto";
import "webhook.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.publisher";
option java_outer_classname = "PublisherApi";
option go_package = ".;hiber";

/* Generic publisher. A Publisher is a generic parent of the
 * - webhook publisher
 * - MQTT publisher
 * - email publisher
 *
 * As such, it has common data and can have a configuration for one of those types.
 *
 * Used to have it's own API encompassing everything, but this has been split up to its individual parts in
 * - WebhookService
 * - MQTTService
 * - EmailNotificationPreferencesService
 *
 * Now, this types is only used in the relevant events.
 */
message Publisher {
    int64 id = 1;
    string description = 2;

    /* This field remains for backwards compatibility, but it should not be used. */
    Data deprecated_data = 3 [deprecated = true];
    Filters filters = 4;
    repeated hiber.tag.Tag tags = 5;
    Health health = 6;
    Type type = 7;
    Timestamp in_cooldown_until = 8;
    bool disabled = 9;

    /* Id of the user that created this publisher */
    string created_by = 15;

    /* The configuration for its type. */
    oneof data {
        webhook.Webhook.WebhookData http = 10;
        integration.mqtt.MQTTPublisher.Data mqtt = 11;
        email.EmailNotificationPreferences email = 13;
        integration.slack.SlackPublisher.Data slack = 14;
        Data.ShellSsipConfig shell_ssip = 16;
    }

    reserved 12;

    /* This type remains for backwards compatibility, but it should not be used. */
    enum ContentType {
        option deprecated = true;

        DEFAULT = 0;
        JSON = 1;
        PROTO = 2;
    }

    enum Type {
        HTTP = 0;
        MQTT = 1;
        EMAIL = 3;
        SLACK = 4;
        SHELL_SSIP = 5;

        reserved 2;
    }

    /* This type remains for backwards compatibility, but it should not be used. */
    message Data {
        option deprecated = true;

        string url = 1;
        ContentType content_type = 2;
        bool disabled = 3;
        int64 certificate_id = 4;
        string certificate_name = 5;
        int64 ca_certificate_id = 6;
        string ca_certificate_name = 7;
        oneof config {
            HTTPConfig http = 8;
            MQTTConfig mqtt = 9;
        }

        /* This field remains for backwards compatibility, but it should not be used. */
        message MQTTConfig {
            option deprecated = true;

            string topic = 1;
            QoS qos = 2;
            /* Optional username to authenticate with. */
            string username = 3;
            /* Optional password to authenticate with. Requires username to be set. */
            string password = 4;
            /* Identifier used by the MQTT client. Defaults to "hiber". */
            string identifier = 5;

            enum QoS {
                DEFAULT = 0;
                /* Qos level 0 */
                AT_MOST_ONCE = 1;
                /* Qos level 1 */
                AT_LEAST_ONCE = 2;
                /* Qos level 2 */
                EXACTLY_ONCE = 3;
            }
        }

        /* This field remains for backwards compatibility, but it should not be used. */
        message HTTPConfig {
            option deprecated = true;

            /* Used to generate the HMAC-SHA256 header on every publisher call, which you can use to verify the message.
             * The HMAC-SHA256 header is calculated with the message body and this secret.
             * There are many examples of how to do this in different languages, for example:
             * https://github.com/danharper/hmac-examples
             */
            string secret = 1;
        }

        message ShellSsipConfig {
            string url = 1;
            string tenant_id = 2;
            string resource_id = 3;
        }
    }

    message Filters {
        Filter.Events event_types = 1;
        Filter.Modems modem_numbers = 2;
        Filter.Tags tags = 3;
    }
}

message UpdatePublisherRequest {
    option deprecated = true;

    message UpdateModems {
        option deprecated = true;

        bool updated = 1;
        Filter.Modems value = 2;
    }
}
