/* Service to specify alarm for a modem, monitoring message data, location or activity.
 *
 * An alarm is a collection of checks that validate the correctness of a modem. For example, an alarm might
 * check that the modem is in a given location, or that a field in its messages is between certain values.
 *
 * Alarms are created in isolation, and need to be assigned to a modem before they do anything.
 * This can be done using the Assign and Unassign methods in the service, or using the AssignmentService for more
 * advanced use cases, like assigning to a tag.
 */
syntax = "proto3";

package hiber.modem.alarm;

import "google/protobuf/struct.proto";

import "base.proto";
import "field.proto";
import "modem.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.modem.alarm";
option java_outer_classname = "ModemAlarmApi";
option go_package = "hiber";

service ModemAlarmService {
    /* List available modem alarms (including inherited from your parent organizations). */
    rpc List (ListModemAlarms.Request) returns (ListModemAlarms.Response);

    /* Create a new modem alarm with any number of checks. */
    rpc Create (CreateModemAlarm.Request) returns (CreateModemAlarm.Response);

    /* Update a modem alarm and its checks, if you are the owner. */
    rpc Update (UpdateModemAlarm.Request) returns (UpdateModemAlarm.Response);

    /* Delete a modem alarm, if you are the owner. */
    rpc Delete (DeleteModemAlarm.Request) returns (DeleteModemAlarm.Response);

    /* Add a check to a modem alarm, if you are the owner. */
    rpc AddCheck (UpdateModemAlarmAddCheck.Request) returns (UpdateModemAlarmAddCheck.Response);

    /* Update a check in a modem alarm, if you are the owner. */
    rpc UpdateCheck (UpdateModemAlarmUpdateCheck.Request) returns (UpdateModemAlarmUpdateCheck.Response);

    /* Remove a check from a modem alarm, if you are the owner. */
    rpc RemoveCheck (UpdateModemAlarmRemoveCheck.Request) returns (UpdateModemAlarmRemoveCheck.Response);

    /* Test a set of parameters on a modem alarm, to see the result when they are applied during assignment. */
    rpc TestParameters (TestModemAlarmTestParameters.Request) returns (TestModemAlarmTestParameters.Response);

    /* Assign a modem alarm to a modem. */
    rpc Assign (AssignModemAlarms.Request) returns (AssignModemAlarms.Response);

    /* Unassign a modem alarm from a modem. */
    rpc Unassign (UnassignModemAlarms.Request) returns (UnassignModemAlarms.Response);
}

/* Alarm for a modem, monitoring message data, location or activity.
 *
 * An alarm is a collection of checks that validate the correctness of a modem. For example, an alarm might
 * check that the modem is in a given location, or that a field in its messages is between certain values.
 *
 * Health for an alarm event is determined by taking the most severe health level from the health_levels configured
 * on the failing checks, using this default for any checks that do not have a health_level configured.
 * This can be changed on assignment with the default_health_level parameter, to fit the needs of the organization.
 *
 * Note, when an alarm is inherited the health levels may not match yours. If the health level matches one of
 * your health levels, that level is used. Otherwise, the catch-all health level is used.
 * See the health definition for more information on the catch-all health level (typically the most severe).
 * Note that the health level displayed here is the result of the steps above.
 *
 * When assigned to a (set of) modem(s), an alarm can be customized using its parameters.
 * Parameters are based on the check fields, and are also used in the check error message template.
 * For the alarm parameters, check parameters are prefixed with the check identifier.
 *
 * For example: An alarm with check A (field "healthy" equals 1) and check B (field "state" oneof ["OK", "ACTIVE"])
 * would have the following parameters:
 * {
 *   "A": {
 *     "expected": 1,
 *     "field.path": "healthy",
 *     "field.equals.expected": 1
 *   },
 *   "B": {
 *     "expected": ["OK", "ACTIVE"],
 *     "field.path": "state",
 *     "field.oneof.expected": ["OK", "ACTIVE"]
 *   }
 * }
 */
message ModemAlarm {
    /* The identifier for this alarm.
     * This identifier is globally unique.
     */
    string identifier = 1;
    /* Short name for this alarm (optional). */
    string name = 9;

    /* Longer description for this alarm (optional). */
    string description = 2;

    /* When this alarm was created. */
    Timestamp created_at = 10;

    /* When this alarm was last updated. */
    Timestamp updated_at = 11;

    /* Condition determining when an alarm is triggered if it has multiple checks. */
    enum TriggerCondition {
        /* Defaults to the current value when updating, or to ANY_CHECK_FAILED when creating. */
        DEFAULT = 0;

        /* Trigger the alarm when any of the checks fail.
         * This is useful when providing a single device health alarm, that checks, for example, battery,
         * operating temperature, etc. and should trigger when any of those are outside the expected range.
         */
        ANY_CHECK_FAILED = 1;

        /* Trigger the alarm only when all checks fail.
         * This is useful when creating a combined alarm, where several data points factor into the decisions to
         * trigger the alarm, for example, combining a check on the current value with a delta check on the
         * historical values, to trigger only if the value is high for a longer period.
         */
        ALL_CHECKS_FAILED = 2;
    }

    /* Condition determining when an alarm is triggered if it has multiple checks. */
    TriggerCondition trigger_condition = 4;

    /* The default health level for checks in this alarm, if they have no health_level configured. */
    string default_health_level = 7;

    /* Allow the alarm to cause a health level for the modem even after it has been resolved.
     * By configuring this, you can specify the modem health should be affected for a longer period.
     * For example, when using an inactivity check, this could be used to configure modem health ERROR while
     * inactive, lowering to INVESTIGATE for a day after a new message comes in.
     */
    HealthLevelAfterResolved health_level_after_resolved = 8;

    /* The checks in this alarm, that validate the state of the modem. */
    repeated Check checks = 5;

    /* Parameters for this alarm.
     * This field displays all the parameters that can be set for the alarm on assignment, with their current value.
     */
    google.protobuf.Struct alarm_parameters = 6;

    /* A check is a specification of how things should be, i.e. "a value should be within this range".
     * When it fails, it produces an event with:
     * - a custom health level, or the default defined in the alarm
     * - an error message, define from a template in the check
     *
     * The error message template is a string with parameters for the relevant data.
     * The parameters are included as {parameter}, which gets replaced with the value.
     *
     * The supported parameters are different per check, but the parameters below are always supported:
     * - modem:name: the modem name.
     * - modem:number: the modem number.
     * - message: the id of the message, if any.
     * - expected: a shortcut for the expected value(s), depending on the check:
     *   - inactivity check: expected duration
     *   - location check: expected area as [(bottom left), (top right)], and shape as [(point), (point), ..., (point)]
     *   - equals/minimum/maximum check: expected value
     *   - oneof check (allowed/blocked): expected values as [a, b, c]
     *   - threshold/delta check: expected range as minimum..maximum, extended with duration for delta check
     * - actual: the invalid actual value(s) for this check.
     *
     * The checks below define other available parameters.
     *
     * For example (using some parameters for specific checks):
     * - "Your device {modem} has left its designated area! It is now at {actual}."
     * - "Your device battery is at {actual}%, which is below the recommended minimum of {field.threshold.minimum}%."
     * - "Your device battery is draining faster than expected: {actual}% over the past {field.delta.period}."
     * - "Your device temperature has exceeded {value.threshold.maximum} degrees: {actual}."
     * - "Your device reported an unhealthy state {actual}. Healthy states are: {expected}."
     * - "Your device reported an unhealthy state {actual}. Healthy states are: {field.oneof.expected}."
     * - "Your device reported an unhealthy state {actual}. Please set it back to {expected}."
     * - "Your device reported an unhealthy state {actual}. Please set it back to {field.equals.expected}."
     * - "Unexpected value {actual} for field {field.path}!"
     *
     * Numeric values can be formatted with an extra postfix on the parameters
     * - Round numeric values by adding ":.2f" (for 2 decimals). For example: "{actual:.3f}" (rounds to 3 decimals)
     * - Always sign numeric values (when rounded) by prefixing the format with a plus. For example: `{actual:+.3f}`
     * - This is applied to numeric fields and fields that can be numeric, like `{actual}` and `{expected}`.
     */
    message Check {
        /* Name of this check, unique within the alarm.
         * This is used to update or remove the check, and to determine the destination for any parameters.
         * If omitted, a random name is generated based on the type of check.
         */
        string name = 1;

        /* Longer description for this check (optional). */
        string description = 8;

        /* The health level that this check would cause for a modem, when it fails.
         * If not set, the alarm default is used.
         */
        string health_level = 2;

        /* The error message template for this check, with parameters that will be filled in based on the check. */
        string error_message_template = 3;

        oneof check {
            /* Check whether the device is in a given location. */
            LocationCheck location = 4;
            /* Check that a message body field has a specified value. */
            FieldCheck field = 5;
            /* Check whether the device exceeds inactivity limits. */
            InactivityCheck inactivity = 6;
            /* Check whether a message delay exceeds delay limits. */
            DelayCheck delay = 7;
        }

        /* Check that the device location is within a given area.
         *
         * Has the following parameters:
         * - location.expected: replace the referenced named location
         * - location.named: replace the referenced named location
         */
        message LocationCheck {
            /* Specify the name of a named location (NamedLocation) that the device must be in. */
            string named = 3;

            reserved 1, 2;
        }

        /* Check whether the device exceeds inactivity limits.
         *
         * Has the following parameters:
         * - inactivity.maximum: the maximum allowed inactivity
         */
        message InactivityCheck {
            /* The maximum value for the modem's inactivity (time since last message was received on the server). */
            Duration maximum = 1;
            Duration deprecated_maximum = 29 [deprecated = true];
        }

        /* Check whether the message was delayed more than a configured limit.
         * The delay is the time between the message was sent (ModemMessage.sent_at) and the time it was
         * received on the server (ModemMessage.received_at).
         *
         * Has the following parameters:
         * - delay.maximum: the maximum allowed delay
         */
        message DelayCheck {
            /* The maximum value for the message delay (duration between sent and received time). */
            Duration maximum = 1;
        }

        /* A check that evaluates each new message, and checks selected field(s) in the parsed body.
         *
         * When multiple fields are selected, the checks are applied to all of them individually.
         *
         * See the Json Path documentation at https://goessner.net/articles/JsonPath/ for details on json path.
         * We currently do not allow filter expressions.
         *
         * Simple examples selecting a field:
         * - $.my_field: a field in the root of the parsed object
         * - $.my_obj.my_field: a field in a deeper structure
         * - $.my_array[x].my_field: the field my_field of the element at index x is selected
         *
         * Complex use cases are also possible, but they require a bit more understanding of json path logic:
         * - $.my_array.length(): the length of my_array is selected. Combine with an equals or threshold check,
                                  to require that an array has a certain length.
         * - $.my_array..my_field: the array of my_field values (for all objects in my_array) is selected
         * - $.my_array[*].my_field: the array of my_field values (for all objects in my_array) is selected
         *
         * Note that for the examples above, if they return an array, the entire array is used as the value
         * in the comparison for equals and oneof.
         *
         * A check of this type has the following parameters (matches the fields):
         * - field.path: replace the path for this field
         * - field.ignoreFieldNotFound: replace the value for ignore_field_not_found
         *
         * For the equals check:
         * - field.equals.expected: iff this is an equals check, replace the expected value
         *
         * For the allowed check:
         * - field.allowed.allowed: iff this is an allowed check, replace the expected values
         *
         * For the blocked check:
         * - field.blocked.blocked: iff this is a blocked check, replace the expected values

         * For the threshold check:
         * - field.threshold.expected: iff this is a threshold check, replace the expected range
         * - field.threshold.minimum: iff this is a threshold check, replace the expected minimum
         * - field.threshold.maximum: iff this is a threshold check, replace the expected maximum
         *
         * For the delta check:
         * - field.delta.period: iff this is a delta check, replace the expected duration
         * - field.delta.threshold.expected: iff this is a delta check, replace the expected range
         * - field.delta.threshold.minimum: iff this is a delta check, replace the expected minimum
         * - field.delta.threshold.maximum: iff this is a delta check, replace the expected maximum
         *
         * All of the parameters above can be used in the error message template.
         *
         * The delta check also adds a few additional error message variables:
         * - {field.delta.previous}: the previous value for the field
         * - {field.delta.difference} (also {actual}): the difference between previous and current value for the field
         * - {field.delta.current}: the current value for the field
         */
        message FieldCheck {
            /* Select the field(s) that this check is applied to, using a json path. */
            string path = 1;

            /* Whether to ignore this check if the field is not found.
             * This can be useful if your path selects multiple values in an array, like my_array[*].value,
             * and not all entries have the field, or when fields are omitted if they have a default value.
             */
            bool ignore_field_not_found = 2;

            /* The unit that this alarm check is using.
             * The field's values will automatically be converted into this unit before the check is applied.
             * Note: unit is not currently available in the alarm_parameters.
             */
            field.Field.Numeric.Unit unit = 9;

            oneof check {
                /* Check that a field equals a value. */
                EqualsCheck equals = 3;
                /* Check that a field equals one of a set of values. */
                AllowedCheck allowed = 4;
                /* Check that a field does not equal one of a set of values. */
                BlockedCheck blocked = 10;
                /* Chech that a field is higher than the given value. */
                MinimumCheck minimum = 7;
                /* Check that a field is lower than the given value. */
                MaximumCheck maximum = 8;
                /* Check that a field is within a given numeric range. */
                ThresholdCheck threshold = 5;
                /* Check that a field's difference in value over a given period is within a specified numeric range. */
                DeltaCheck delta = 6;
            }

            /* Check that the field is equal to the given value. */
            message EqualsCheck {
                /* The expected value a field should have. */
                google.protobuf.Value expected = 1;
            }

            /* Check that the field is in a set of expected values. */
            message AllowedCheck {
                /* The list of allowed values, one of which should match the field value. */
                repeated google.protobuf.Value allowed = 1;
            }

            /* Check that the field is not in a set of blocked values. */
            message BlockedCheck {
                /* The list of blocked values; the field should not match any of them. */
                repeated google.protobuf.Value blocked = 1;
            }

            /* Check that the field is higher than the given value. */
            message MinimumCheck {
                /* The minimum numeric value the field should have. */
                double minimum = 1;
            }

            /* Check that the field is lower than the given value. */
            message MaximumCheck {
                /* The maximum numeric value the field should have. */
                double maximum = 3;
            }

            /* Check that the field is above a minimum threshold and under a maximum threshold.
             * If minimum <= maximum, this means that the value must be between minimum and maximum.
             * If minimum > maximum, however, this means that the value must NOT be between maximum and minimum
             * (i.e. minimum 100 with maximum 50 means it cannot be between 50 and 100).
             */
            message ThresholdCheck {
                /* The range the value must be in.
                 * If maximum < minimum, the value must effectively be outside the inverted range, i.e.
                 * 20..10 implies the value must not be in 10..20.
                 */
                DoubleRange expected = 1;

                /* The minimum expected value, available separately for convenience and check parameters. */
                double minimum = 2;

                /* The maximum expected value, available separately for convenience and check parameters. */
                double maximum = 3;
            }

            /* A check that evaluates the differences in values over time, for the selected field(s) in the parsed body.
             */
            message DeltaCheck {
                /* The period to evaluate when determining the value difference. */
                Duration period = 1;

                /* Check that the delta is within a given numeric range. */
                ThresholdCheck threshold = 2;

                /* Whether the field data should be encrypted in cache storage.
                 * Delta checks use a cache for field from messages that are affected by a delta check.
                 * Encrypting the individual field values is (relatively) computationally expensive and may lead to
                 * a slightly delayed alarm event. In the future, some delta features may only
                 * be available to unencrypted values due to performance issues.
                 */
                bool encrypted = 3;

                /* Whether to ignore this check if the previous value is not found (i.e. there is no history). */
                bool ignore_previous_value_not_found = 4;
            }
        }
    }

    /* Allow the alarm to cause a health level for the modem even after a new message has come in.
     *
     * Typically, an alarm event only affects the modem health while it is from the last message from that modem.
     * By configuring this, you can specify the modem health should be affected for a longer period.
     *
     * For example, when using an inactivity check, this could be used to configure modem health ERROR while
     * inactive, lowering to INVESTIGATE for a day after a new message comes in.
     */
    message HealthLevelAfterResolved {
        /* The health level that this check would cause for a modem, when the original failure is resolved. */
        string health_level = 1;

        /* The amount of time that this health level would be active. */
        Duration period = 2;
    }

    reserved 3;
}

/*
 * Selection criteria for listing modem alarms in an organization. If no options are provided, all modem alarms
 * are valid.
 *
 * If values are provided both for identifiers and search, then only alarms are selected that match both criteria.
 */
message ModemAlarmSelection {
    /* Selects alarms by the given list of alarm identifiers. */
    repeated string identifiers = 1;

    /* Search for the given string in identifier, description, fields and values. */
    string search = 2;

    reserved 3, 4;
}

/*
 * List modem alarms in an organization.
 */
message ListModemAlarms {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;

        /* Selection criteria for listing modem alarms. */
        ModemAlarmSelection selection = 2;
        /* Pagination for the returned alarms. */
        Pagination pagination = 3;

        /* Apply your UnitPreferences to the alarm checks.
         * For example, if a temperature check is configured in kelvin, but your unit preferences specify celsius for
         * temperature, the check value will be converted to celsius instead.
         */
        bool apply_unit_preferences = 4;
    }
    message Response {
        /* A list of modem alarms. */
        repeated ModemAlarm modem_alarms = 1;
        /* A pagination object, which can be used to go through the alarms. */
        Pagination.Result pagination = 2;
        /* The request made to list the given alarms. */
        Request request = 3;
    }
}

/* Create a new alarm.
 *
 * The request contains the option to add checks as well.
 * This is a shortcut for creating an alarm and then adding checks, and as such can result in multiple events:
 * - a created event on the alarm
 * - an update event on the alarm checks, iff any checks were added
 */
message CreateModemAlarm {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;

        /* A name for the alarm. */
        string name = 7;

        /* A short description of what the alarm should do. */
        string description = 2;

        /* Condition determining when an alarm is triggered if it has multiple checks. */
        ModemAlarm.TriggerCondition trigger_condition = 3;

        /* The checks to add to this alarm. Shortcut for creating an alarm and then adding checks to it. */
        repeated ModemAlarm.Check checks = 4;

        /* The default health level for this alarm. See ModemAlarm.default_health_level for more information. */
        string default_health_level = 5;

        /* The health level this alarm should cause after it is resolved.
         * See ModemAlarm.health_level_after_resolved for more information.
         */
        ModemAlarm.HealthLevelAfterResolved health_level_after_resolved = 6;
    }
    message Response {
        /* The created modem alarm. */
        ModemAlarm created = 1;
    }
}

/* Update the alarm, iff you are the owner or can impersonate the owner organization.
 *
 * The request contains the option to add, remove or update checks as well.
 * This is a shortcut for updating an alarm and then adding, removing and/or updating checks,
 * and as such can result in multiple events:
 * - an update event on the alarm, iff there were any non-check changes to the alarm.
 * - an update event on the alarm checks, iff there were any check addition, updates or deletions
 */
message UpdateModemAlarm {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;

        /* The identifiers of the alarm to update */
        string identifier = 2;

        /* Update the name, optionally. */
        UpdateClearableString update_name = 11;

        /* Update the description, optionally. */
        UpdateClearableString update_description = 3;

        /* Update the trigger condition, optionally. */
        ModemAlarm.TriggerCondition update_trigger_condition = 4;

        /* Update the default health level, optionally. */
        UpdateClearableString update_default_health_level = 5;

        /* Update the health after resolved, optionally. */
        ModemAlarm.HealthLevelAfterResolved update_health_level_after_resolved = 6;

        /* Remove the health after resolved, optionally. */
        bool remove_health_level_after_resolved = 7;

        /* The checks to add to this alarm. Shortcut for updating an alarm and then adding checks to it. */
        repeated ModemAlarm.Check add_checks = 8;

        /* The checks to update in this alarm. Shortcut for updating an alarm and then updating checks. */
        map<string, ModemAlarm.Check> update_checks = 9;

        /* The checks to remove from this alarm. Shortcut for updating an alarm and then removing checks. */
        repeated string delete_checks = 10;
    }
    message Response {
        ModemAlarm updated = 1;
    }
}

/* Add a check to the alarm, iff you are the owner or can impersonate the owner organization. */
message UpdateModemAlarmAddCheck {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;
        /* The identifier of the alarm to which the check is added. */
        string alarm_identifier = 2;

        /* The check to add to the Modem Alarm. Identifier of the check must be unique within the alarm. */
        ModemAlarm.Check check = 3;
    }
    message Response {
        ModemAlarm updated = 1;
    }
}

/* Update a check of an alarm.
 *
 * Only the values of a check can be updated, e.g., it is not possible to change an inactivity check to a location
 * check.
*/
message UpdateModemAlarmUpdateCheck {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;
        /* The identifier of the alarm of which to update the check. */
        string alarm_identifier = 2;
        /* The identifier of the check to update. */
        string check_identifier = 3;
        /* The new values for the check of this alarm. */
        ModemAlarm.Check update_check = 4;

        /* If set, the update is not actually saved, but only applied and returned.
         * This is a convenience to easily test parameters for a check similar to TestModemAlarmTestParameters.
         */
        bool test_parameters_only = 6;

        reserved 5;
    }
    message Response {
        ModemAlarm updated = 1;
    }
}

/* Remove a check from an alarm. */
message UpdateModemAlarmRemoveCheck {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;
        /* The identifier of the alarm from which to remove the check. */
        string alarm_identifier = 2;
        /* The identifier of the check to remove. */
        string check_identifier = 3;
    }
    message Response {
        ModemAlarm updated = 1;
    }
}

/* Delete an alarm. */
message DeleteModemAlarm {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;
        /* Identifier of the modem alarm to delete. */
        string identifier = 2;
    }
    message Response {
    }
}

/* Test a set of parameters on a modem alarm, to see the result when they are applied during assignment. */
message TestModemAlarmTestParameters {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;
        /* The identifier of the alarm on which to test parameters. */
        string alarm_identifier = 2;
        /* The parameters of the alarm that are changed. */
        google.protobuf.Struct parameters = 3;
    }
    message Response {
        ModemAlarm result = 1;
    }
}

/* Directly assigned modem alarm to a modem. */
message AssignedModemAlarm {
    string alarm_identifier = 1;
    string modem_number = 2;
}

/* Add direct assignments.
 * If an overlapping assignment using a rule exists, it is shadowed by the direct assignment.
 *
 * Simplified version of assign.AssignDirectly.
 */
message AssignModemAlarms {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;
        ModemAlarmSelection alarms = 2;
        modem.ModemSelection modems = 3;

        /* The alarm parameters, by alarm identifier, if any, overriding any default values in the alarm(s). */
        map<string, google.protobuf.Struct> parameters = 4;
    }
    message Response {
        repeated AssignedModemAlarm created = 1;
        Request request = 2;
    }
}

/* Remove a direct assignment.
 * If an overlapping assignment using a rule exists, it is not affected, except that it is longer shadowed.
 *
 * Simplified version of assign.UnassignDirectly.
 */
message UnassignModemAlarms {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;
        ModemAlarmSelection alarms = 2;
        modem.ModemSelection modems = 3;
    }
    message Response {
        repeated AssignedModemAlarm removed_direct_assignments = 1;
        Request request = 2;
    }
}
