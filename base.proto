syntax = "proto3";

package hiber;

import "google/protobuf/descriptor.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "permission.proto";

option java_multiple_files = true;
option java_package = "global.hiber.api.grpc";
option go_package = ".;hiber";

/* Document permission usage to methods.
 * Documents the permissions that are used by methods, like this:
 *
 * ```
 * option (permission_usage) = MODEMS;
 * ```
 *
 * This results in an overview of which permissions are used by a method, with individual comments on which permissions
 * are required and which are optional.
 */
extend google.protobuf.MethodOptions {
    /* The OrganizationPermissions used by this call. See the individual permissions for more details. */
    repeated OrganizationPermission permission_usage = 1001;

    /* The UserPermissions used by this call. See the individual permissions for more details. */
    repeated UserPermission user_permission_usage = 1002;

    /* The SupportPermission used by this call. See the individual permissions for more details. */
    repeated SupportPermission support_permission_usage = 1003;
}

/* Update object for an int that can be set to 0.
 *
 * Since 0 is also the default value, we need to distinguish between an omitted value and setting the value to 0,
 * in an update object.
 *
 * To use this to update, set a value and set updated to true
 *
 * DEPRECATED: use alternative optional fields in the relevant places instead.
 */
message UpdateZeroableInt {
    option deprecated = true;

    bool updated = 1;
    uint32 value = 2;
}

/* Update object for a string that can be empty.
 *
 * Since an empty string is also the default value, we need to distinguish between an omitted value and
 * setting the value to an empty string, in an update object.
 *
 * To use this to update, set a value and set updated to true
 *
 * DEPRECATED: use alternative optional fields in the relevant places instead.
 */
message UpdateClearableString {
    option deprecated = true;

    bool updated = 1;
    string value = 2;
}

/* Update object for an optional id.
 *
 * To use this to update, set a value and set updated to true. To clear the id, set updated to true, but set no value.
 *
 * DEPRECATED: use alternative optional fields in the relevant places instead.
 */
message UpdateOptionalId {
    option deprecated = true;

    bool updated = 1;
    int64 value = 2;
}

/* Update object for an optional Duration.
 *
 * To use this to update, set a value and set updated to true.
 * To clear the duration, set updated to true, but set no value.
 *
 * DEPRECATED: use alternative optional fields in the relevant places instead.
 */
message UpdateOptionalDuration {
    option deprecated = true;

    bool updated = 1;
    Duration value = 2;
}

/* Update object for a boolean.
 *
 * Since false is the default value, we need to distinguish between an omitted value and setting the value to false,
 * in an update object.
 *
 * To use this to update, set a value and set updated to true
 *
 * DEPRECATED: use alternative optional fields in the relevant places instead.
 */
message UpdateBoolean {
    option deprecated = true;

    bool updated = 1;
    bool value = 2;
}

/* Period of time between two timestamps. Typically used for filtering.
 *
 * This can be used with textual shortcuts for timestamp, and some additional duration textual shortcuts:
 * - a duration as an offset of now, e.g. "-10h" or "PT-10h": converted to now + offset, so start.textual -10h is
 *   10 hours before the end time (using the ISO 8601 duration format)
 * Examples:
 * - start "-10h" end "now": a time range from 10 hours before the request time, to the request time
 * - start "-10h" end "2022-01-01 20:00": becomes start 2022-01-01 10:00 end 2022-01-01 20:00
 */
message TimeRange {
    Timestamp start = 1;
    Timestamp end = 2;
}

/* Decimal range. */
message DoubleRange {
    double start = 1;
    double end = 2;
}

/* Timestamp type for convenience.
 *
 * Some clients are better at parsing Google's seconds/nanos based timestamp, while others prefer a text-based format.
 * To accommodate this, this Timestamp type supports both.
 *
 * When used as API output, both the timestamp and textual fields will be set. The textual field has the commonly
 * used ISO 8601 format (e.g. "2018-01-01T13:00:00Z").
 * When used an API input, only one of the fields is needed, there is no need to set both. When both are set, the
 * timestamp field will be used, the textual field will be discarded.
 *
 * In addition, the textual field, when used as input, allows for a number of shortcuts that get converted into
 * timestamps:
 * - "now": converted to the current timestamp at the time of the request
 */
message Timestamp {
    optional google.protobuf.Timestamp timestamp = 1;
    optional string time_zone = 2;
    optional string textual = 4;
}

/* Date type for convenience.
 *
 * Some clients are better at parsing year, month and day of month as separate fields,
 * while others prefer a text-based format.
 * To accommodate this, this Date type supports both.
 *
 * When used as API output, both the int fields and textual fields will be set.
 * The textual field has the commonly used ISO 8601 local date format (e.g. "2018-01-01").
 * When used an API input, either specify the int fields or the textual field.
 * If both are specified, the textual field will be discarded.
 */
message Date {
    optional uint32 year = 1;
    optional uint32 month = 2;
    optional uint32 day = 3;
    optional string textual = 4;
}

message Duration {
    optional google.protobuf.Duration duration = 1;
    optional string textual = 2;
}

/* Geographic latitude and longitude coordinates specified in decimal degrees.
 * For more information, see the WGS-84 coordinate system, which is used for most GPS systems.
 */
message Location {
    /* Decimal degrees north. */
    double latitude = 1;
    /* Decimal degrees east. */
    double longitude = 2;

    /* Text representation. Can be used as an alternative input in a request, filled in by the API in responses. */
    optional string textual = 5;
}

/* Rectangular area between two locations, normalized to bottom-left and top-right points.
 *
 * Center point is added for convenience; it's simple the point directly between the two corner points.
 * When sending an Area to the api, the center location is ignored.
 */
message Area {
    Location center = 1;
    Location bottom_left = 2;
    Location top_right = 4;

    /* Text representation. Can be used as an alternative input in a request, filled in by the API in responses. */
    optional string textual = 5;
}

/* Polygon shape defined by a list of locations, which draw a shape on the map.
 * The last point is connected to the first to close the shape.
 *
 * For example, the outline of a city would be defined using a Shape,
 * while a rectangular region is easier to define using Area.
 */
message Shape {
    repeated Location path = 1;

    /* Text representation. Can be used as an alternative input in a request, filled in by the API in responses. */
    optional string textual = 5;
}

/* Selection object for map data.
 *
 * Also, filter the map data by level and area restriction, to only display a small area at a detailed map level,
 * for example
 */
message LocationSelection {
    /* Rectangular areas, each defined by two locations, normalized to bottom-left and top-right points. */
    repeated Area areas = 1;

    /* Polygon shapes, each defined by a list of locations, which draw a shape on the map. */
    repeated Shape shapes = 2;
}

/* Some clients may prefer direct binary data, while other prefer a hexadecimal string,
 * both for input and output. To support both methods, this object is used to represent binary data.
 *
 * When you receive this from the api, both fields are set. When sending it to the api, only one field is required.
 */
message BytesOrHex {
    optional bytes bytes = 1;
    optional string hex = 2;

    message Update {
        option deprecated = true;

        bool updated = 1;
        BytesOrHex value = 2;
    }
}

/* Pagination is normalized across the api. Provide a pagination object to get a specific page or offset,
 * or limit your data.
 *
 * Calls that have a pagination option automatically return a Pagination.Result, which contains
 * either the specified pagination options or the defaults, as well as total counts. It also contains Pagination
 * objects that can be used for the previous and next page.
 *
 * This effectively means that an api user would never need to create their own pagination object; as long as they
 * start at the first page and continue to the next, they can use the provided Pagination object.
 */
message Pagination {
    message Result {
        int32 size = 1;
        int32 page = 2;
        int32 total = 3;
        int32 total_pages = 4;
        Pagination previous = 6;
        Pagination next = 7;

        /* Indicates that the total is an approximation, and not an exact value.
         * This can be set for data that changes often, or is generally only fetched in an infinite scrolling manner.
         * For example, unbundled events are likely to return an approximated total, but not guaranteed to do so.
         */
        bool approximated_total = 8;
    }
    optional int32 size = 1;
    optional int32 page = 2;
}

/* Enum of api-accessible events.
 * The event types in this enum have a protobuf implementation, and can be used, for example, in the
 * api event stream and publishers.
 */
enum EventType {
    DEFAULT = 0;

    /* A new organization was created under your organization. */
    ORGANIZATION_CREATED = 34;

    /* Your organization information was updated.
     * This deals with things like display name and contact information, not users and devices.
     */
    ORGANIZATION_UPDATED = 12;

    /* An organization under your organization was deleted. */
    ORGANIZATION_DELETED = 35;

    /* Your organization's event configuration was updated.
     * This refers to things like message summary configuration.
     */
    ORGANIZATION_EVENT_CONFIGURATION_UPDATED = 43;

    /* A new asset was created in your organization. */
    ASSET_CREATED = 70;

    /* A new process point was created in your organization. */
    PROCESS_POINT_CREATED = 73;

    /* An asset in your organization was updated (e.g. renamed, tagged). */
    ASSET_UPDATED = 71;

    /* An process point in your organization was updated (e.g. renamed, tagged). */
    PROCESS_POINT_UPDATED = 74;

    /* An asset in your organization was deleted. */
    ASSET_DELETED = 72;

    /* An process point in your organization was deleted. */
    PROCESS_POINT_DELETED = 75;

    /* A new device was created in your organization, either manually or by a gateway. */
    DEVICE_CREATED = 55;

    /* A device in your organization was manually updated (e.g. renamed, tagged). */
    DEVICE_UPDATED = 36;

    /* The location of a device in your organization was updated, either manually or by a message. */
    DEVICE_LOCATION_UPDATED = 4;

    /* A device in your organization was installed and should now be active. */
    DEVICE_INSTALLED = 33;

    /* A device in your organization sent a message.
     * This event is the final output for the message, after any parsing and post-processing.
     */
    MESSAGE_RECEIVED = 5;

    /* A device in your organization sent a message, and it was parsed by a message body parser.
     * For the final event, with all applied parsers and post processing, use MESSAGE_RECEIVED instead.
     */
    MESSAGE_BODY_PARSED = 39;

    /* A device in your organization sent a message, and it has been scheduled for parsing by message body parsers
     * and post-processing.
     * For the final event, with all applied parsers and post processing, use MESSAGE_RECEIVED instead.
     */
    MESSAGE_BODY_RECEIVED = 45;

    /* A device in your organization sent a message, and it could not be parsed by any assigned message body parser.
     * This is typically a configuration issue. Please contact customer support if this is not resolved.
     */
    MESSAGE_CANNOT_BE_PARSED = 15;

    /* A summary of messages in your organization was created, based on your event configuration. */
    MESSAGE_SUMMARY = 42;

    /* A new message body parser was created in your organization.
     * This typically only happens for custom solutions.
     */
    MESSAGE_BODY_PARSER_CREATED = 46;

    /* A message body parser in your organization was updated.
     * This typically only happens for custom solutions.
     */
    MESSAGE_BODY_PARSER_UPDATED = 47;

    /* A message body parser in your organization was deleted.
     * This typically only happens for custom solutions.
     */
    MESSAGE_BODY_PARSER_DELETED = 48;

    /* An alarm was triggered in your organizations.
     * Depending on the alarm, this may mean that a device sent a message with a value (e.g. pressure)
     * outside of the expected range, or moved out of the expected area.
     */
    ALARM_TRIGGERED = 56;

    /* A new alarm was created in your organization. */
    ALARM_CREATED = 57;

    /* An alarm in your organization was updated. */
    ALARM_UPDATED = 58;

    /* An alarm in your organization was deleted. */
    ALARM_DELETED = 59;

    /* An assignment was made in your organization.
     * For example: assigning a tag or alarm to a modem.
     */
    ASSIGNED = 63;

    /* An assignment was removed in your organization.
     * For example: removing a tag or alarm from a modem.
     */
    UNASSIGNED = 64;

    /* A device was transferred into or out of your organization.
     * Transferred device lose their data and are only used in the new organization if connected to a gateway in that
     * organization.
     */
    TRANSFER = 18;

    /* A new publisher was created in your organization.
     * Publishers are any system that pushes data out of the system, like webhooks, MQTT integrations and
     * even email preferences.
     */
    PUBLISHER_CREATED = 1;

    /* A publisher in your organization was updated.
     * Publishers are any system that pushes data out of the system, like webhooks, MQTT integrations and
     * even email preferences.
     */
    PUBLISHER_UPDATED = 2;

    /* A publisher in your organization was deleted.
     * Publishers are any system that pushes data out of the system, like webhooks, MQTT integrations and
     * even email preferences.
     */
    PUBLISHER_DELETED = 3;

    /* A publisher in your organization failed to send its data.
     * This can be a temporary issue (perhaps the webhook endpoint is down) or an indication of a configuration issue.
     * Publishers are any system that pushes data out of the system, like webhooks, MQTT integrations and
     * even email preferences.
     */
    PUBLISHER_FAILED = 11;

    /* A publisher in your organization failed to send its data for a long enough period that is has been disabled.
     * This means the failures were not a temporary issue, but there is something wrong with the configuration.
     * Publishers are any system that pushes data out of the system, like webhooks, MQTT integrations and
     * even email preferences.
     */
    PUBLISHER_AUTO_DISABLED = 37;

    /* A user has requested access to your organization. You can review their request and approve or reject them. */
    USER_ACCESS_REQUEST = 8;

    /* A user was invited into your organization. They can review your invite and accept it or ignore it. */
    USER_INVITED = 38;

    /* A user was granted access to your organization, by request, invite, or created by an organization admin. */
    USER_ADDED = 9;

    /* A user was removed from your organization by an organization admin. */
    USER_REMOVED = 10;

    /* The user validation (i.e. email domain) for your organization was updated. */
    USER_VALIDATION_UPDATED = 54;

    /* A new token was created for your organization. */
    TOKEN_CREATED = 31;

    /* A token in your organization will expire within 2 weeks. */
    TOKEN_EXPIRY_WARNING = 25;

    /* A token in your organization has expired. */
    TOKEN_EXPIRED = 26;

    /* A token in your organization was deleted. */
    TOKEN_DELETED = 32;

    /* A new export was started for your organization, exporting data (e.g. messages) to a file. */
    EXPORT_CREATED = 65;

    /* An export in your organization has completed and the resulting file with data (e.g. messages as CSV)
     * is ready to be downloaded.
     */
    EXPORT_READY = 66;

    /* An export in your organization has failed (typically because of incorrect data selection). */
    EXPORT_FAILED = 67;

    reserved 6, 7, 13, 14, 16, 17, 19 to  24, 27, 28, 29, 30;
}

/* Filters used in many api calls to filter the data sources, results, etc.
 *
 * "Include" fields filter out anything not in the include set.
 * When not set, all items will be returned (except excluded items)
 *
 * "Exclude" fields filter out anything in the exclude set.
 * When combined with include, exclude takes precedence when determining whether an item is filtered
 */
message Filter {
    /* Specify which organizations to get data from. By default, data is only retrieved for the current organization,
     * but using ChildOrganizations we can specify to include a number of, or all, sub-organizations.
     *
     * Note: ChildOrganization differs from other filters in that it defaults to not allowing anything, where the
     * other filters default to allowing everything
     */
    message ChildOrganizations {
        bool include_all = 1;
        repeated string include = 2;
        repeated string exclude = 3;

        /* Update object to update a Filter.ChildOrganizations field. */
        message Update {
            option deprecated = true;

            bool updated = 1;
            Filter.ChildOrganizations value = 2;
        }
    }

    message Organizations {
        repeated string include = 1;
        repeated string exclude = 2;
    }

    message Events {
        repeated EventType include = 1;
        repeated EventType exclude = 2;

        /* Update object to update a Filter.Events field. */
        message Update {
            option deprecated = true;

            bool updated = 1;
            Filter.Events value = 2;
        }
    }

    message Modems {
        /* Include all modems with these modem numbers (HEX) */
        repeated string include = 1;

        /* Exclude all modems with these modem numbers (HEX).
         * Exclude takes precedence over include.
         */
        repeated string exclude = 2;

        /* Update object to update a Filter.Modems field. */
        message Update {
            option deprecated = true;

            bool updated = 1;
            Filter.Modems value = 2;
        }
    }

    message ModemIdentifiers {
        repeated string include = 1;
        repeated string exclude = 2;
    }

    message DeviceTypes {
        repeated string include = 1;
        repeated string exclude = 2;
    }

    message SensorBrands {
        repeated string include = 1;
        repeated string exclude = 2;
    }

    message Tags {
        repeated int64 include = 1;
        repeated int64 exclude = 2;

        /* Update object to update a Filter.Tags field. */
        message Update {
            option deprecated = true;

            bool updated = 1;
            Filter.Tags value = 2;
        }
    }

    message Webhooks {
        repeated int64 include = 1;
        repeated int64 exclude = 2;
        bool only_active = 3;
    }

    message Publishers {
        repeated int64 include = 1;
        repeated int64 exclude = 2;
        bool only_active = 3;
    }

    message Users {
        repeated string include = 1;
        repeated string exclude = 2;
    }

    message Roles {
        repeated string include = 1;
        repeated string exclude = 2;
    }

    message OrganizationPermissions {
        bool include_all = 1;
        repeated OrganizationPermission include = 2;
        repeated OrganizationPermission exclude = 3;
    }

    message UserPermissions {
        bool include_all = 1;
        repeated UserPermission include = 2;
        repeated UserPermission exclude = 3;
    }

    message SupportPermissions {
        repeated SupportPermission include = 1;
        repeated SupportPermission exclude = 2;
    }

    message FieldEnumValues {
        string field = 1;
        repeated string include = 2;
        repeated string exclude = 3;
    }

    message HealthLevels {
        repeated string include = 1;
        repeated string exclude = 2;
    }

    /* Filter result on specific properties encoded in map-value pairs. */
    message Properties {
        oneof selection {
            MapFilter properties = 1;
            /* When set to true, match only empty property-sets. */
            bool include_only_empty = 2;
        }
    }
}

/* Some properties are stored as a name-value pair (e.g. bluetooth: 4.0, bluetooth: BLE).
 * This filter allows selecting a range of values for a specific name.
 * One could imagine wanting to include "all devices with bluetooth 4.0 or 4.1".
 *
 * To select for multiple versions of a property,
 * add the name of the property as a map-key and add a repeated list of versions as the map-value.
 *
 * For example:
 * - include { 'bluetooth' -> [ ] }
 *     returns all items that have any version of bluetooth,
 * - include { 'bluetooth' -> [ '4.0', '5.0' ] }
 *     will only return items that have bluetooth version 4.0 _or_ 5.0 (inclusive or),
 * - include { 'bluetooth' -> [ '' ] }
 *     would only select bluetooth peripherals that don't have any version set,
 * - include { 'bluetooth' -> [ ], 'LoRaWAN' -> [ ] }
 *     will only select items that have both bluetooth (any version) _and_ LoRaWAN (any version),
 * - include { 'bluetooth' -> [ ] }, exclude { 'bluetooth' -> [ ] }
 *     will return an empty list since exclude will take precedence, and
 * - include { 'bluetooth' -> [ ] }, exclude { 'bluetooth' -> [ '3.0' ] }
 *     returns only items that have bluetooth, but not version 3.0.
 */
message MapFilter {

    /* Technical solution to make map<k, v> into a map<k, repeated v>,
     * which is not possible in protobuf without trickery. */
    message OneOfValues {
        repeated string value = 1;
    }

    /* Filter to only include items with all of the given set of properties. */
    map<string, OneOfValues> include_and = 1;

    /* Filter to exclude items with any of the given set of properties.*/
    map<string, OneOfValues> exclude = 2;
}


/* Health is an indicator for issues. It is used for publishers to give a quick indication of issues.
 */
enum Health {
    OK = 0;
    WARNING = 1;
    ERROR = 2;
}

/* Unit of measurement for a numeric value. */
enum UnitOfMeasurement {
    UNIT_UNKNOWN = 0;

    DURATION_MILLISECONDS = 40;
    DURATION_SECONDS = 1;
    DURATION_MINUTES = 2;
    DURATION_HOURS = 3;
    DURATION_DAYS = 4;
    DURATION_WEEKS = 41;

    FUEL_EFFICIENCY_LITER_PER_100_KILOMETER = 30;
    FUEL_EFFICIENCY_KILOMETER_PER_LITER = 31;
    FUEL_EFFICIENCY_KILOMETER_PER_US_GALLON = 32;
    FUEL_EFFICIENCY_KILOMETER_PER_IMPERIAL_GALLON = 33;
    FUEL_EFFICIENCY_MILE_PER_US_GALLON = 34;
    FUEL_EFFICIENCY_MILE_PER_IMPERIAL_GALLON = 35;
    FUEL_EFFICIENCY_MILE_PER_LITER = 36;

    DISTANCE_METER = 8;
    DISTANCE_MILLIMETER = 9;
    DISTANCE_CENTIMETER = 10;
    DISTANCE_KILOMETER = 11;
    DISTANCE_NAUTICAL_MILE = 26;
    DISTANCE_MILE = 21;
    DISTANCE_YARD = 27;
    DISTANCE_FOOT = 28;
    DISTANCE_INCH = 29;

    PERCENT = 16;

    PRESSURE_BAR = 12;
    PRESSURE_PSI = 14;
    PRESSURE_K_PA = 17;
    PRESSURE_KILOGRAM_PER_CENTIMETER_SQUARED = 53;

    SPEED_KILOMETERS_PER_HOUR = 18;
    SPEED_KNOTS = 19;
    SPEED_METERS_PER_SECOND = 20;
    SPEED_MILES_PER_HOUR = 22;
    SPEED_FEET_PER_SECOND = 47;

    TEMPERATURE_KELVIN = 5;
    TEMPERATURE_DEGREES_CELSIUS = 6;
    TEMPERATURE_DEGREES_FAHRENHEIT = 7;

    VOLTAGE_MILLIVOLT = 15;

    VOLUME_LITER = 23;
    VOLUME_GALLON_US = 24;
    VOLUME_GALLON_IMPERIAL = 25;
    VOLUME_CUBIC_METER = 42;
    VOLUME_CUBIC_FOOT = 43;

    MASS_KILOGRAMS = 37;
    MASS_POUNDS = 38;

    FLOW_BARRELS_PER_DAY = 46;
    FLOW_CUBIC_METER_PER_HOUR = 39;
    FLOW_CUBIC_METER_PER_SECOND = 49;
    FLOW_LITER_PER_HOUR = 51;
    FLOW_LITER_PER_SECOND = 52;
    FLOW_CUBIC_FEET_PER_HOUR = 48;
    FLOW_CUBIC_FEET_PER_SECOND = 50;

    REVOLUTIONS_PER_MINUTE = 44;

    ITEMS_PER_24_HOURS = 45;

    OTHER = 54;

    reserved 13;
}
