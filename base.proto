syntax = "proto3";

package hiber;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "permission.proto";

option java_multiple_files = true;
option java_package = "global.hiber.api.grpc";
option go_package = "hiber";

/* Update object for an int that can be set to 0.
 *
 * Since 0 is also the default value, we need to distinguish between an omitted value and setting the value to 0,
 * in an update object.
 *
 * To use this to update, set a value and set updated to true
 */
message UpdateZeroableInt {
    bool updated = 1;
    uint32 value = 2;
}

/* Update object for a string that can be empty.
 *
 * Since an empty string is also the default value, we need to distinguish between an omitted value and
 * setting the value to an empty string, in an update object.
 *
 * To use this to update, set a value and set updated to true
 */
message UpdateClearableString {
    bool updated = 1;
    string value = 2;
}

/* Update object for an optional id.
 *
 * To use this to update, set a value and set updated to true. To clear the id, set updated to true, but set no value.
 */
message UpdateOptionalId {
    bool updated = 1;
    int64 value = 2;
}

/* Update object for an optional Duration.
 *
 * To use this to update, set a value and set updated to true.
 * To clear the duration, set updated to true, but set no value.
 */
message UpdateOptionalDuration {
    bool updated = 1;
    Duration value = 2;
}

/* Update object for a boolean.
 *
 * Since false is the default value, we need to distinguish between an omitted value and setting the value to false,
 * in an update object.
 *
 * To use this to update, set a value and set updated to true
 */
message UpdateBoolean {
    bool updated = 1;
    bool value = 2;
}

/* Period of time between two timestamps. Typically used for filtering. */
message TimeRange {
    Timestamp start = 1;
    Timestamp end = 2;
}

/* Decimal range. */
message DoubleRange {
    double start = 1;
    double end = 2;
}

/* Timestamp type for convenience.
 *
 * Some clients are better at parsing Google's seconds/nanos based timestamp, while others prefer a text-based format.
 * To accommodate this, this Timestamp type supports both.
 *
 * When used as API output, both the timestamp and textual fields will be set. The textual field has the commonly
 * used ISO 8601 format (i.e. "2018-01-01T13:00:00Z").
 * When used an API input, only one of the fields is needed, there is no need to set both. When both are set, the
 * timestamp field will be used, the textual field will be discarded.
 */
message Timestamp {
    google.protobuf.Timestamp timestamp = 1;
    string textual = 4;
}

/* Date type for convenience.
 *
 * Some clients are better at parsing year, month and day of month as separate fields,
 * while others prefer a text-based format.
 * To accommodate this, this Date type supports both.
 *
 * When used as API output, both the int fields and textual fields will be set.
 * The textual field has the commonly used ISO 8601 local date format (i.e. "2018-01-01").
 * When used an API input, either specify the int fields or the textual field.
 * If both are specified, the textual field will be discarded.
 */
message Date {
    uint32 year = 1;
    uint32 month = 2;
    uint32 day = 3;
    string textual = 4;
}

message Duration {
    google.protobuf.Duration duration = 1;
    string textual = 2;
}

/* Geographic latitude and longitude coordinates specified in decimal degrees.
 * For more information, see the WGS-84 coordinate system, which is used for most GPS systems.
 */
message Location {
    /* Decimal degrees north. */
    double latitude = 1;
    /* Decimal degrees east. */
    double longitude = 2;

    /* Text representation. Can be used as an alternative input in a request, filled in by the API in responses. */
    string textual = 5;
}

/* Rectangular area between two locations, normalized to bottom-left and top-right points.
 *
 * Center point is added for convenience; it's simple the point directly between the two corner points.
 * When sending an Area to the api, the center location is ignored.
 */
message Area {
    Location center = 1;
    Location bottom_left = 2;
    Location top_right = 4;

    /* Text representation. Can be used as an alternative input in a request, filled in by the API in responses. */
    string textual = 5;
}

/* Polygon shape defined by a list of locations, which draw a shape on the map.
 * The last point is connected to the first to close the shape.
 *
 * For example, the outline of a city would be defined using a Shape,
 * while a rectangular region is easier to define using Area.
 */
message Shape {
    repeated Location path = 1;

    /* Text representation. Can be used as an alternative input in a request, filled in by the API in responses. */
    string textual = 5;
}

/* Selection object for map data. Filter modems on the map by id, (child)organization.
 *
 * Also, filter the map data by level and area restriction, to only display a small area at a detailed map level,
 * for example
 */
message LocationSelection {
    /* Rectangular areas, each defined by two locations, normalized to bottom-left and top-right points. */
    repeated Area areas = 1;

    /* Polygon shapes, each defined by a list of locations, which draw a shape on the map. */
    repeated Shape shapes = 2;
}

/* Some clients may prefer direct binary data, while other prefer a hexadecimal string,
 * both for input and output. To support both methods, this object is used to represent binary data.
 *
 * When you receive this from the api, both fields are set. When sending it to the api, only one field is required.
 */
message BytesOrHex {
    bytes bytes = 1;
    string hex = 2;

    message Update {
        bool updated = 1;
        BytesOrHex value = 2;
    }
}

/* Pagination is normalized across the api. Provide a pagination object to get a specific page or offset,
 * or limit your data.
 *
 * Calls that have a pagination option automatically return a Pagination.Result, which contains
 * either the specified pagination options or the defaults, as well as total counts. It also contains Pagination
 * objects that can be used for the previous and next page.
 *
 * This effectively means that an api user would never need to create their own pagination object; as long as they
 * start at the first page and continue to the next, they can use the provided Pagination object.
 */
message Pagination {
    message Result {
        int32 size = 1;
        int32 page = 2;
        int32 total = 3;
        int32 total_pages = 4;
        Pagination previous = 6;
        Pagination next = 7;

        /* Indicates that the total is an approximation, and not an exact value.
         * This can be set for data that changes often, or is generally only fetched in an infinite scrolling manner.
         * For example, unbundled events are likely to return an approximated total, but not guaranteed to do so.
         */
        bool approximated_total = 8;
    }
    int32 size = 1;
    int32 page = 2;
}

/* Enum of api-accessible events.
 *
 * The event types in this enum have a protobuf implementation, and can be used, for example, in the
 * api event stream and publishers.
 */
enum EventType {
    DEFAULT = 0;

    ORGANIZATION_CREATED = 34;
    ORGANIZATION_UPDATED = 12;
    ORGANIZATION_DELETED = 35;
    ORGANIZATION_EVENT_CONFIGURATION_UPDATED = 43;

    MODEM_CREATED = 55;
    MODEM_UPDATED = 36;
    MODEM_LOCATION_UPDATED = 4;
    MODEM_ACTIVATED = 33;
    MODEM_STALE = 16;

    MODEM_MESSAGE_RECEIVED = 5;
    MODEM_MESSAGE_BODY_PARSED = 39;
    MODEM_MESSAGE_BODY_RECEIVED = 45;
    MODEM_MESSAGE_DROPPED = 13;
    MODEM_MESSAGE_DELAYED = 14;
    MODEM_MESSAGE_CANNOT_BE_PARSED = 15;
    MODEM_MESSAGE_SUMMARY = 42;

    MODEM_MESSAGE_BODY_PARSER_CREATED = 46;
    MODEM_MESSAGE_BODY_PARSER_UPDATED = 47;
    MODEM_MESSAGE_BODY_PARSER_DELETED = 48;

    MODEM_ALARM = 56;
    MODEM_ALARM_CREATED = 57;
    MODEM_ALARM_UPDATED = 58;
    MODEM_ALARM_DELETED = 59;

    ASSIGNED = 63;
    UNASSIGNED = 64;

    MODEM_TRANSFER_STARTED = 17;
    MODEM_TRANSFER_RECEIVED = 18;
    MODEM_TRANSFER_CANCELLED = 19;
    MODEM_TRANSFER_NOT_RECEIVED = 20;
    MODEM_TRANSFER_RETURN_TRANSFER_STARTED = 21;

    MODEM_CLAIMED = 22;

    PUBLISHER_CREATED = 1;
    PUBLISHER_UPDATED = 2;
    PUBLISHER_DELETED = 3;
    PUBLISHER_AUTO_DISABLED = 37;
    PUBLISHER_FAILED = 11;

    USER_ACCESS_REQUEST = 8;
    USER_INVITED = 38;
    USER_ADDED = 9;
    USER_REMOVED = 10;

    USER_VALIDATION_UPDATED = 54;

    TOKEN_CREATED = 31;
    TOKEN_EXPIRY_WARNING = 25;
    TOKEN_EXPIRED = 26;
    TOKEN_DELETED = 32;

    EXPORT_CREATED = 65;
    EXPORT_READY = 66;
    EXPORT_FAILED = 67;

    // reserved 6, 7, 23, 24, 27, 28, 29, 30;
}

/* Filters used in many api calls to filter the data sources, results, etc.
 *
 * "Include" fields filter out anything not in the include set.
 * When not set, all items will be returned (except excluded items)
 *
 * "Exclude" fields filter out anything in the exclude set.
 * When combined with include, exclude takes precedence when determining whether an item is filtered
 */
message Filter {
    /* Specify which organizations to get data from. By default, data is only retrieved for the current organization, but
     * using ChildOrganizations we can specify to include a number of, or all, sub-organizations.
     *
     * Note: ChildOrganization differs from other filters in that it defaults to not allowing anything, where the
     * other filters default to allowing everything
     */
    message ChildOrganizations {
        bool include_all = 1;
        repeated string include = 2;
        repeated string exclude = 3;

        /* Update object to update a Filter.ChildOrganizations field. */
        message Update {
            bool updated = 1;
            Filter.ChildOrganizations value = 2;
        }
    }

    message Organizations {
        repeated string include = 1;
        repeated string exclude = 2;
    }

    message Events {
        repeated EventType include = 1;
        repeated EventType exclude = 2;

        /* Update object to update a Filter.Events field. */
        message Update {
            bool updated = 1;
            Filter.Events value = 2;
        }
    }

    message Modems {
        /* Include all modems with these modem numbers (HEX) */
        repeated string include = 1;

        /* Exclude all modems with these modem numbers (HEX).
         * Exclude takes precedence over include.
         */
        repeated string exclude = 2;

        /* Update object to update a Filter.Modems field. */
        message Update {
            bool updated = 1;
            Filter.Modems value = 2;
        }
    }

    message Tags {
        repeated int64 include = 1;
        repeated int64 exclude = 2;

        /* Update object to update a Filter.Tags field. */
        message Update {
            bool updated = 1;
            Filter.Tags value = 2;
        }
    }

    message Webhooks {
        repeated int64 include = 1;
        repeated int64 exclude = 2;
        bool only_active = 3;
    }

    message Publishers {
        repeated int64 include = 1;
        repeated int64 exclude = 2;
        bool only_active = 3;
    }

    message Users {
        repeated string include = 1;
        repeated string exclude = 2;
    }

    message OrganizationPermissions {
        bool include_all = 1;
        repeated OrganizationPermission include = 2;
        repeated OrganizationPermission exclude = 3;
    }

    message UserPermissions {
        bool include_all = 1;
        repeated UserPermission include = 2;
        repeated UserPermission exclude = 3;
    }
}

/* Health is an indicator for issues. It is used for publishers to give a quick indication of issues.
 */
enum Health {
    OK = 0;
    WARNING = 1;
    ERROR = 2;
}

/* A NamedFile contains bytes with its mime-type and name.
 * It can represent any file of any type.
 *
 * Note that depending on where in the API this is used,
 * the server might put restrictions on file size, media-type or name length.
 *
 * The file name should be interpreted as-is.
 * No hierarchical information is stored in the name, nor should you look at the "extension" to know its media-type.
 * It might not even have a file extension.
 * The file name may contain characters that cannot be a valid file name on certain systems.
 *
 * Specific API calls may pur restrictions on the name or size of the file.
 *
 * When showing this as an image in a browser, one can make use of a `data` URI.
 * The client must convert the bytes to base64 and can then construct a data URI like this
 *
 *     data:<media-type>;base64,<base64-encoded-bytes>
 *
 * Other type clients should be able to sort-of-directly set the data bytes as the source for an image.
 */
message NamedFile {
    /* The binary payload that represents the file */
    BytesOrHex data = 1;

    /* The media-type of the file, as defined by RFC 6838 or its extensions */
    string media_type = 2;

    /* A semantic name for this file. */
    string name = 3;
}

/* An avatar is represented either by a (publicly) fetchable URL that serves an image,
 * xor a binary payload that knows its name and mime-type.
 *
 * If it is a url, it must be obtainable without credentials, though this is not validated by the API.
 * Because the content behind URL's can change or become unavailable over time,
 * the client should make sure it properly caches the data fetched from the URL.
 * ("Properly" means [among other things] respecting the response headers for this resource)
 */
message Avatar {
    oneof url_or_image {
        /* A URL that contains the location of avatar. */
        string url = 1;

        /* The data of the avatar as a Named File. */
        NamedFile image = 2;
    }
}

/* Unit of measurement for a numeric value. */
enum UnitOfMeasurement {
    UNIT_UNKNOWN = 0;
    DURATION_SECONDS = 1;
    DURATION_MINUTES = 2;
    DURATION_HOURS = 3;
    DURATION_DAYS = 4;
    TEMPERATURE_KELVIN = 5;
    TEMPERATURE_DEGREES_CELSIUS = 6;
    TEMPERATURE_DEGREES_FAHRENHEIT = 7;
    DISTANCE_METER = 8;
    DISTANCE_MILLIMETER = 9;
    DISTANCE_CENTIMETER = 10;
    DISTANCE_KILOMETER = 11;
    PRESSURE_BAR = 12;
    PRESSURE_BAR_GROUND = 13;
    PRESSURE_PSI = 14;
    PRESSURE_K_PA = 17;
    VOLTAGE_MILLIVOLT = 15;
    PERCENT = 16;
}
