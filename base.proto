syntax = "proto3";

import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "global.hiber.api.grpc";
option go_package = "hiber";

package hiber;

/* Update object for an int that can be set to 0.
 * Since 0 is also the default value, we need to distinguish between an omitted value and setting the value to 0,
 * in an update object.
 *
 * To use this to update, set a value and set updated to true
 */
message UpdateZeroableInt {
    bool updated = 1;
    uint32 value = 2;
}

/* Update object for a string that can be empty.
 * Since an empty string is also the default value, we need to distinguish between an omitted value and
 * setting the value to an empty string, in an update object.
 *
 * To use this to update, set a value and set updated to true
 */
message UpdateClearableString {
    bool updated = 1;
    string value = 2;
}

/* Update object for a boolean.
 * Since false is the default value, we need to distinguish between an omitted value and setting the value to false,
 * in an update object.
 *
 * To use this to update, set a value and set updated to true
 */
message UpdateBoolean {
    bool updated = 1;
    bool value = 2;
}

/* Period of time between two timestamps. Typically used for filtering.
 */
message TimeRange {
    Timestamp start = 1;
    Timestamp end = 2;
}

/* Timestamp type for convenience.
 * Some clients are better at parsing Google's seconds/nanos based timestamp, while others prefer a text-based format.
 * To accomodate this, this Timestamp type supports both.
 * When used as API output, both the timestamp and textual fields will be set. The textual field has the commonly
 * used ISO 8601 format (i.e. "2018-01-01T13:00:00Z").
 * When used an API input, only one of the fields is needed, there is no need to set both. When both are set, the
 * timestamp field will be used, the textual field will be discarded.
 */
message Timestamp {
    google.protobuf.Timestamp timestamp = 1;
    string textual = 4;
}

message Location {
    double latitude = 1;
    double longitude = 2;
}

/* Area between two locations, normalized to bottom-left and top-right points.
 * Center point is added for convenience; it's simple the point directly between the two corner points.
 */
message Area {
    Location center = 1;
    Location bottom_left = 2;
    Location top_right = 4;
}

/* Pagination is normalized across the api. Provide a pagination object to get a specific page or offset,
 * or limit your data.
 *
 * Calls that have a pagination option automatically return a Pagination.Result, which contains
 * either the specified pagination options or the defaults, as well as total counts. It also contains Pagination
 * objects that can be used for the previous and next page.
 *
 * This effectively means that an api user would never need to create their own pagination object; as long as they
 * start at the first page and continue to the next, they can use the provided Pagination object.
 */
message Pagination {
    message Result {
        int32 size = 1;
        int32 page = 2;
        int32 total = 3;
        int32 totalPages = 4;
        Pagination previous = 6;
        Pagination next = 7;
    }
    int32 size = 1;
    int32 page = 2;
}

/* Enum of api-accessible events.
 * The event types in this enum have a protobuf implementation, and can be used, for example, in the
 * api event stream and webhooks.
 */
enum EventType {
    DEFAULT = 0;
    WEBHOOK_CREATED = 1;
    WEBHOOK_UPDATED = 2;
    WEBHOOK_DELETED = 3;
    MODEM_LOCATION_UPDATED = 4;
    MODEM_MESSAGE_RECEIVED = 5;
    CREDENTIAL_UPDATED = 8;
    CREDENTIAL_CREATED = 9;
    CREDENTIAL_DELETED = 10;
}

/* Filters used in many api calls to filter the data sources, results, etc.
 *
 * "Include" fields filter out anything not in the include set.
 * When not set, all items will be returned (except excluded items)
 * "Exclude" fields filter out anything in the exclude set.
 * When combined with include, exclude takes precedence when determining whether an item is filtered
 */
message Filter {
    /* Specify which accounts to get data from. By default, data is only retrieved for the current account, but
     * using ChildAccounts we can specify to include a number of, or all, sub-accounts.
     */
    message ChildAccounts {
        bool include_all = 1;
        repeated string include = 2;
        repeated string exclude = 3;
    }

    message Events {
        repeated EventType include = 1;
        repeated EventType exclude = 2;
    }

    message Modems {
        repeated string include = 1;
        repeated string exclude = 2;
    }

    message Tags {
        repeated int64 include = 1;
        repeated int64 exclude = 2;
    }

    message Webhooks {
        repeated int64 include = 1;
        repeated int64 exclude = 2;
        bool only_active = 3;
    }

    message Users {
        repeated string include = 1;
        repeated string exclude = 2;
    }
}

/* Health is an indicator for issues. It is used for modems and webhooks to give a quick indication of issues.
 */
enum Health {
    OK = 0;
    WARNING = 1;
    ERROR = 2;
}
