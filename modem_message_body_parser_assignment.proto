syntax = "proto3";

package hiber.modem.message.bodyparser;

import "base.proto";
import "modem.proto";
import "modem_message_body_parser.proto";
import "modem_message_body_parser_automatic_assignment.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.modem.message.bodyparser";
option java_outer_classname = "ModemMessageBodyParserAssignmentApi";
option go_package = "hiber";

service ModemMessageBodyParserAssignmentService {
    rpc List (ListAssignedModemMessageBodyParsers.Request) returns (ListAssignedModemMessageBodyParsers.Response);
    rpc Assign (AssignModemMessageBodyParsersToModems.Request) returns (AssignModemMessageBodyParsersToModems.Response);
    rpc Unassign (UnassignModemMessageBodyParsersFromModems.Request) returns (UnassignModemMessageBodyParsersFromModems.Response);
}

/* The body parsers that are assigned to a modem, either directly or automatically. */
message ModemMessageBodyParsersAssignment {
    /* The modem number that has parsers assigned. */
    string modem_number = 1;

    /* The parsers assigned to this modem (both directly and automatic). */
    repeated ModemMessageBodyParser parsers = 2;

    /* The rules that were applied to assign these parsers to this modem. */
    repeated string rules_applied = 3;
}

/* Selection for assigned parsers, to dynamically filter the assignments by body parsers,
 * modems it applies to, rules that are used, the way it was assigned to the modem, etc.
 */
message ModemMessageBodyParsersAssignmentSelection {
    /* Only return parsers that match the given selection. */
    ModemMessageBodyParserSelection parsers = 1;

    /* Only return parsers that have been assigned to the given modems. */
    modem.ModemSelection modems = 2;

    /* Only return parsers that have been assigned to the modem by one of these rules.
     * This can also be used to include certain inactive rules, to test what they apply to,
     * either in combination with active rules, or only that specific rule.
     * To do so, either set include_inactive or only_inactive in ModemMessageBodyParserAutomaticAssignmentRuleSelection.
     */
    ModemMessageBodyParserAutomaticAssignmentRuleSelection rules = 3;

    /* Only return parsers that have been directly assigned to the modem. */
    bool only_directly_assigned = 4;

    /* Only return parsers that have been assigned to the modem by a rule. */
    bool only_automatically_assigned = 5;

    /* If childOrganizations is configured to include child organizations, modems from child organizations
     * can also be in the results, if the other conditions match.
     */
    Filter.ChildOrganizations child_organizations = 6;

    /* Use onlyChildOrganizations to *only* see which selected modems have the selected parsers assigned
     * in the selected child_organizations, excluding any modems in your organization.
     */
    bool only_child_organizations = 7;
}

/* List modems with assigned parsers, based on the selections and flags in the request. */
message ListAssignedModemMessageBodyParsers {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;
        ModemMessageBodyParsersAssignmentSelection selection = 2;
        Pagination pagination = 3;

        /* Whether to omit the parser content in the resulting ModemMessageBodyParsers, to save data. */
        bool exclude_content = 4;
    }

    message Response {
        repeated ModemMessageBodyParsersAssignment assigned_parsers_per_modem = 1;
        Request request = 2;
        Pagination.Result pagination = 3;
    }
}

/* Assign parser(s) to modem(s) directly. */
message AssignModemMessageBodyParsersToModems {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;

        /* The parser(s) to assign to the given modem(s) directly. */
        ModemMessageBodyParserSelection selection = 2;

        /* The modem(s) to assign the given parser(s) to. */
        modem.ModemSelection modem_selection = 3;
    }

    message Response {
        repeated ModemMessageBodyParsersAssignment directly_assigned_parsers_per_modem = 1;
        Request request = 2;
    }
}

/* Unassign directly assigned parser(s) from modem(s). */
message UnassignModemMessageBodyParsersFromModems {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;

        /* The parser(s) to unassign from the given modem(s), if they are directly assigned. */
        ModemMessageBodyParserSelection selection = 2;

        /* The modem(s) to unassign the given parser(s) from. */
        modem.ModemSelection modem_selection = 3;
    }

    message Response {
        repeated ModemMessageBodyParsersAssignment directly_assigned_parsers_per_modem = 1;
        Request request = 2;
    }
}
