syntax = "proto3";

package hiber.email;

import "base.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.email";
option java_outer_classname = "EmailNotificationsApi";
option go_package = ".;hiber";

service EmailNotificationPreferencesService {
    rpc List (ListEmailNotificationPreferencesRequest) returns (ListEmailNotificationPreferencesRequest.Response);
    rpc View (ViewEmailNotificationPreferencesRequest) returns (EmailNotificationPreferences);
    rpc Update (UpdateEmailNotificationPreferencesRequest) returns (EmailNotificationPreferences);
    rpc Delete (RemoveAllEmailNotificationPreferencesRequest) returns (RemoveAllEmailNotificationPreferencesRequest.Response);
    rpc History (EmailNotificationHistoryRequest) returns (EmailNotificationHistoryRequest.Response);
}

message EmailNotificationPreferences {
    message CustomRecipient {
        string email = 1;
        string name = 2;
    }

    /* The organization that owns this publisher */
    string organization = 1;

    /* Events to receive by email. */
    Filter.Events enabled_notifications = 2;

    /* Filter events by modems. */
    Filter.Modems filter_modems = 3;

    /* Filter events by tags. */
    Filter.Tags filter_tags = 4;

    /* Filter events by health level caused. */
    repeated string filter_health_levels = 8;

    oneof recipient {
        /* User who created this publisher. Only set if no custom email address is given. */
        string user_id = 5;
        /* Custom email address. For publishers that send to an email address other than this users' email address. */
        CustomRecipient custom = 6;
    }

    /* Whether email is active for this user/address. */
    bool active = 7;
}

/* List the custom recipients and their preferences. Optionally, personal email preferences can be included. */
message ListEmailNotificationPreferencesRequest {
    message Response {
        repeated EmailNotificationPreferences email_preferences = 1;
        ListEmailNotificationPreferencesRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* Search for a (partial) custom email address. */
    optional string search_email = 2;

    /* By default, this request only returns the email preferences for custom emails,
     * but you can choose to view user-specific preferences as well.
     */
    optional bool include_personal_email_preferences = 3;

    optional Pagination pagination = 4;
}

message ViewEmailNotificationPreferencesRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* View the configuration for any email publisher with a custom email address.
     * Optional, should only be used if you want to get the email preferences for a custom recipient.
     * When not set, your personal email preferences are returned.
     */
    optional string email = 2;
}

message UpdateEmailNotificationPreferencesRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* Custom email address.
     * Only set this if you want to send notification to an email address not associated with your user.
     */
    optional EmailNotificationPreferences.CustomRecipient custom = 2;

    /* Events to receive by email. An empty value enables email for all events. */
    optional Filter.Events enabled_notifications = 8;
    optional Filter.Events.Update deprecated_enabled_notifications = 3 [deprecated = true];

    /* Filter events by modems. An empty value enables email for every modem's events. */
    optional Filter.Modems filter_modems = 9;
    optional Filter.Modems.Update deprecated_filter_modems = 4 [deprecated = true];

    /* Filter events by tags. An empty value enables email for all tags. */
    optional Filter.Tags filter_tags = 10;
    optional Filter.Tags.Update deprecated_filter_tags = 5 [deprecated = true];

    /* Add health levels to the health levels filter. */
    repeated string add_health_levels_to_filter = 6;

    /* Remove health levels from the health levels filter. */
    repeated string remove_health_levels_from_filter = 7;
}

message RemoveAllEmailNotificationPreferencesRequest {
    message Response {}

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* Custom email address preferences to disable. */
    optional EmailNotificationPreferences.CustomRecipient custom = 2;
}

message EmailHistorySelection {
    optional TimeRange time_range = 1;
    optional bool only_failures = 2;
}

message EmailNotificationHistoryRequest {
    message Response {
        message Email {
            Timestamp time = 1;
            string title = 2;
            bool successful = 4;
            string error = 5;
        }

        repeated Email emails = 1;
        EmailNotificationHistoryRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* Custom email address preferences to get the history for. If not set, your email is used. */
    optional EmailNotificationPreferences.CustomRecipient custom = 2;

    optional EmailHistorySelection selection = 3;
    optional Pagination pagination = 4;
}
