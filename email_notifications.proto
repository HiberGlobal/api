syntax = "proto3";

package hiber.email;

import "base.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.email";
option java_outer_classname = "EmailNotificationsApi";
option go_package = ".;hiber";

service EmailNotificationPreferencesService {
    rpc View (ViewEmailNotificationPreferencesRequest) returns (EmailNotificationPreferences) {
        /* Only when viewing email publishers that are not yours. */
        option (permission_usage) = PUBLISHERS;
    }
    rpc Update (UpdateEmailNotificationPreferencesRequest) returns (EmailNotificationPreferences) {
        /* Only when updating email publishers that are not yours. */
        option (permission_usage) = PUBLISHERS;
        option (support_permission_usage) = DEVICE_VIEW_ALL_LIFECYCLES;
    }
    rpc Delete (RemoveAllEmailNotificationPreferencesRequest) returns (RemoveAllEmailNotificationPreferencesRequest.Response) {
        /* Only when deleting email publishers that are not yours. */
        option (permission_usage) = PUBLISHERS;
    }
    rpc History (EmailNotificationHistoryRequest) returns (EmailNotificationHistoryRequest.Response) {
        option (permission_usage) = PUBLISHERS;
    }
}

message EmailNotificationPreferences {
    /* The organization that owns this publisher */
    string organization = 1;

    /* Events to receive by email. */
    Filter.Events enabled_notifications = 2;

    /* Filter events by modems. */
    Filter.Modems filter_modems = 3;

    /* Filter events by tags. */
    Filter.Tags filter_tags = 4;

    /* Filter events by health level caused. */
    repeated string filter_health_levels = 8;

    /* User who created this publisher. */
    string user_id = 5;

    /* Whether email is active for this user/address. */
    bool active = 7;

    reserved 6;
}

message ViewEmailNotificationPreferencesRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
}

message UpdateEmailNotificationPreferencesRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* Events to receive by email. An empty value enables email for all events. */
    optional Filter.Events enabled_notifications = 8;
    optional Filter.Events.Update deprecated_enabled_notifications = 3 [deprecated = true];

    /* Filter events by modems. An empty value enables email for every modem's events. */
    optional Filter.Modems filter_modems = 9;
    optional Filter.Modems.Update deprecated_filter_modems = 4 [deprecated = true];

    /* Filter events by tags. An empty value enables email for all tags. */
    optional Filter.Tags filter_tags = 10;
    optional Filter.Tags.Update deprecated_filter_tags = 5 [deprecated = true];

    /* Add health levels to the health levels filter. */
    repeated string add_health_levels_to_filter = 6;

    /* Remove health levels from the health levels filter. */
    repeated string remove_health_levels_from_filter = 7;
}

message RemoveAllEmailNotificationPreferencesRequest {
    message Response {}

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
}

message EmailHistorySelection {
    optional TimeRange time_range = 1;
    optional bool only_failures = 2;
}

message EmailNotificationHistoryRequest {
    message Response {
        message Email {
            Timestamp time = 1;
            string title = 2;
            bool successful = 4;
            string error = 5;
        }

        repeated Email emails = 1;
        EmailNotificationHistoryRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    optional EmailHistorySelection selection = 3;
    optional Pagination pagination = 4;
}
