syntax = "proto3";

import "base.proto";
import "tag.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.webhook";
option java_outer_classname = "WebhookApi";
option go_package = "hiber";

package hiber.webhook;

service WebhookService {
    rpc List (ListWebhooksRequest) returns (ListWebhooksRequest.Response);
    rpc History (WebhookHistoryRequest) returns (WebhookHistoryRequest.Response);
    rpc Create (CreateWebhookRequest) returns (Webhook);
    rpc Enable (EnableWebhookRequest) returns (Webhook);
    rpc Disable (DisableWebhookRequest) returns (Webhook);
    rpc UpdateFilter (UpdateWebhookFilterRequest) returns (Webhook);
    rpc Update (UpdateWebhookRequest) returns (Webhook);
    rpc UpdateTags (UpdateWebhookTagsRequest) returns (UpdateWebhookTagsRequest.Response);
    rpc Get (GetWebhookRequest) returns (Webhook);
    rpc Delete (DeleteWebhookRequest) returns (DeleteWebhookRequest.Response);
}

message Webhook {
    int64 id = 1;
    string organization = 2;
    string description = 3;
    WebhookData data = 4;
    WebhookFilters filters = 5;
    repeated hiber.tag.Tag tags = 6;
    Health health = 7;

    /* When the webhook call fails, it enters cooldown, so as not to overload a failing server
     * or spend unnecessary time on an incorrectly configured webhook.
     * When the first call after the cooldown time has passed fails again, the cooldown is increased as follows:
     * 1m, 2m, 5m, 10m, 15m, 30m, 1h, 3h, 6h, 12h, 24h
     *
     * To disable the cooldown, use EnableWebhookRequest to re-enable it.
     */
    Timestamp in_cooldown_until = 8;

    enum ContentType {
        DEFAULT = 0;
        JSON = 1;
        PROTO = 2;
    }

    message WebhookData {
        string url = 1;
        /* Used to generate the HMAC-SHA256 header on every webhook call, which you can use to verify the message.
         * The HMAC-SHA256 header is calculated with the message body and this secret.
         * There are many examples of how to do this in different languages, for example:
         * https://github.com/danharper/hmac-examples
         */
        string secret = 2;
        ContentType content_type = 3;
        bool disabled = 4;
        int64 certificate_id = 5;
    }

    message WebhookFilters {
        Filter.Events event_types = 1;
        Filter.Modems modem_numbers = 2;
        Filter.Tags tags = 3;
    }
}

message WebhookSelection {
    string description = 1;
    string url = 2;
    Filter.Webhooks webhooks = 3;
    hiber.tag.TagSelection tags = 4;
    repeated Health health = 5;
    repeated int64 certificate_ids = 6;
}

message WebhookCall {
    Timestamp time = 1;
    string url = 2;
    map<string, string> headers = 3;
    bytes body = 4;
    bool successful = 5;
    string error = 6;
}

message WebhookHistorySelection {
    bool only_failures = 2;
    TimeRange time_range = 3;
}

message ListWebhooksRequest {
    message Response {
        repeated Webhook webhooks = 1;
        ListWebhooksRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    WebhookSelection selection = 2;
    Pagination pagination = 3;
}

message WebhookHistoryRequest {
    message Response {
        repeated WebhookCall calls = 1;
        WebhookHistoryRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    int64 webhook_id = 2;
    WebhookHistorySelection selection = 3;
    Pagination pagination = 4;
}

message CreateWebhookRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    string description = 2;
    Webhook.WebhookData data = 3;
    Webhook.WebhookFilters filters = 4;
    repeated int64 tags = 5;
    /* Optionally, a client certificate can be used for the webhook call.
     * See the CertificateService for certificate management options.
     */
    int64 certificate_id = 6;
}

message GetWebhookRequest {
    int64 id = 1;
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 2;
    reserved 3;
}

message EnableWebhookRequest {
    int64 id = 1;
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 2;
    reserved 3;
}

message DisableWebhookRequest {
    int64 id = 1;
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 2;
    reserved 3;
}

message UpdateWebhookFilterRequest {
    message UpdateEvents {
        bool updated = 1;
        Filter.Events value = 2;
    }
    message UpdateModems {
        bool updated = 1;
        Filter.Modems value = 2;
    }
    message UpdateTags {
        bool updated = 1;
        Filter.Tags value = 2;
    }

    int64 id = 1;
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 2;
    UpdateEvents event_filter = 3;
    UpdateModems modem_filter = 4;
    UpdateTags tag_filter = 5;
    reserved 6;
}

message UpdateWebhookRequest {
    message UpdateWebhook {
        message UpdateEvents {
            bool updated = 1;
            Filter.Events value = 2;
        }
        message UpdateModems {
            bool updated = 1;
            Filter.Modems value = 2;
        }
        message UpdateTags {
            bool updated = 1;
            Filter.Tags value = 2;
        }

        string url = 1;
        UpdateClearableString secret = 2;
        Webhook.ContentType content_type = 3;
        UpdateClearableString description = 4;
        UpdateEvents event_filter = 5;
        UpdateModems modem_filter = 6;
        UpdateTags tag_filter = 7;
        UpdateBoolean active = 8;
        /* A value of 0 removes the certificate */
        UpdateOptionalId certificate_id = 9;
    }

    int64 id = 1;
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 2;
    UpdateWebhook update = 3;
    reserved 4;
}

message UpdateWebhookTagsRequest {
    message Response {
        repeated Webhook webhooks = 1;
    }

    string organization = 1;
    repeated int64 webhook_ids = 2;
    hiber.tag.UpdateTagsForItem update = 3;
    reserved 4;
}

message DeleteWebhookRequest {
    message Response {
    }

    int64 id = 1;
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 2;
}
