syntax = "proto3";

package hiber.user;

import "base.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.user";
option java_outer_classname = "UserApi";
option go_package = "hiber";

service UserService {
    rpc List (ListUsersRequest) returns (ListUsersRequest.Response);

    rpc ListAccessRequests (ListAccessRequestsRequest) returns (ListAccessRequestsRequest.Response);
    rpc Approve (ApproveUserRequest) returns (ApproveUserRequest.Response);
    rpc Remove (RemoveUserRequest) returns (RemoveUserRequest.Response);
    rpc Invite (InviteUserRequest) returns (InviteUserRequest.Response);
    rpc ListInvitations (ListInvitationsRequest) returns (ListInvitationsRequest.Response);

    rpc CreateUser (CreateUserRequest) returns (User);
    rpc CreateUsers (CreateUsersRequest) returns (CreateUsersRequest.Response);

    rpc ResetPassword (ResetUserPasswordRequest) returns (ResetUserPasswordRequest.Response);
    rpc UpdateUserRoles (UpdateUserRoles.Request) returns (UpdateUserRoles.Response);

    rpc GetUserValidation (GetUserValidationRequest) returns (UserValidation);
    rpc UpdateUserValidation (UpdateUserValidationRequest) returns (UserValidation);
    rpc TestUserValidation (TestUserValidationRequest) returns (TestUserValidationRequest.Response);

    rpc Activity (UserActivitySummaryRequest) returns (UserActivitySummaryRequest.Response);
}

message User {
    string id = 1;
    string email = 2;
    string name = 3;
    string organization = 7;

    /* Roles for the current organization. */
    repeated string roles = 5;

    /* Permissions for the current organization. */
    Filter.OrganizationPermissions permissions = 4;

    /* Permissions for customer support.
     * Used for features typically reserved for customer support, or that behave differently
     * when used by a customer support operator.
     */
    Filter.SupportPermissions support_permissions = 6;
}

message UserSelection {
    repeated string user_ids = 3;
    optional string by_email = 1;
    optional string by_name = 2;
    optional string search = 4;

    /* Select users by roles for the current organization. */
    optional Filter.Roles roles = 5;

    /* Select users by permissions for the current organization. */
    optional Filter.OrganizationPermissions permissions = 6;

    /* Select users by permissions for customer support. */
    optional Filter.SupportPermissions support_permissions = 7;
}

enum UserSort {
    EMAIL_ASC = 0;
    EMAIL_DESC = 1;
    NAME_ASC = 2;
    NAME_DESC = 3;
}

message UserValidation {
    string email_validation_regex = 1;
    repeated SignInProvider allowed_sign_in_providers = 2;

    enum SignInProvider {
        PASSWORD = 0;
        GOOGLE = 1;
    }
}

message ListUsersRequest {
    message Response {
        repeated User users = 1;
        ListUsersRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* Select the users to list. Optional, when omitted or empty everything is included. */
    optional UserSelection selection = 2;
    optional Pagination pagination = 3;
    UserSort sort = 4;
    optional Filter.ChildOrganizations child_organizations = 5;
}

message ListAccessRequestsRequest {
    message Response {
        repeated User users = 1;
        ListAccessRequestsRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* Select the users to list. Optional, when omitted or empty everything is included. */
    optional UserSelection selection = 2;
    optional Pagination pagination = 3;
    UserSort sort = 4;
}

message ApproveUserRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    repeated string user_ids = 2;

    /* Roles the new user should get. */
    Filter.Roles roles = 5;

    /* By default, the server returns an error when you don't specify any roles.
     * Set this to true to allow it.
     */
    optional bool override_allow_no_roles = 4;

    reserved 3;
}

message RemoveUserRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    repeated string user_ids = 2;

    /* Remove all tokens created by this user. If this is not set, only the tokens with user permissions are removed. */
    optional bool remove_all_tokens = 3;
}

/* List all invited users (email addresses). */
message ListInvitationsRequest {
    message Response {
        repeated string emails = 1;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* Search the invited email addresses. */
    optional string search = 2;

    /* Whether to include invitations that were already accepted. */
    optional bool include_accepted = 3;
}

/* Accept an invitation to an organization. */
message InviteUserRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* The email address of the user you want to invite. */
    string email = 2;

    /* Invite the user again, even if there is an open invite. This can be done a limited amount of times. */
    optional bool retry = 3;

    /* Roles the new user should get. */
    Filter.Roles roles = 6;

    /* By default, the server returns an error when you don't specify any roles.
     * Set this to true to allow it.
     */
    optional bool override_allow_no_roles = 5;

    reserved 4;
}

message CreateUserRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    string email = 2;
    string name = 3;

    /* Optional. If no password is given, the account can only be accessed using a password reset. */
    optional string password = 4;

    /* Roles the new user should get. */
    Filter.Roles roles = 10;

    /* Send an automated email prompting the user to verify their email address. */
    optional bool send_verification_mail = 6;

    /* Send an automated email prompting the user to set a password. Recommended when password is not set. */
    optional bool send_password_reset_mail = 7;

    /* When the user cannot be created, (i.e. they already exist because they are in a different organization)
     * we can send an invite instead, effectively calling InviteUserRequest with the email and roles.
     * Set this to true to allow this behaviour.
     */
    optional bool allow_invite_instead = 8;

    /* By default, the server returns an error when you don't specify any roles. Set this to true to allow it. */
    optional bool override_allow_no_roles = 9;

    reserved 5;
}

message CreateUsersRequest {
    message Response {
        repeated User users = 1;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* Users to create. Allows for individual impersonation and mail settings. */
    repeated CreateUserRequest users = 2;

    /* Roles the new users should get. Can be replaced for specific settings in the CreateUserRequest. */
    Filter.Roles roles = 6;

    /* Send an automated email prompting the users to verify their email addresses. If true, applies to all users. */
    optional bool send_verification_mail = 4;

    /* Send an automated email prompting the users to set their password. If true, applies to all users. */
    optional bool send_password_reset_mail = 5;
}

message ResetUserPasswordRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    string user_id = 2;
}

message UpdateUserRoles {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        optional string organization = 1;
        repeated string user_ids = 2;

        /* Grant and remove roles on the current roles the users have. */
        message ModifyRoles {
            /* Grant roles in addition to the current roles the users have. */
            repeated string add = 1;

            /* Remove roles from the current roles the users have. */
            repeated string remove = 2;
        }

        /* Completely replace the roles the users have. */
        message ReplaceRoles {
            repeated string roles = 1;
        }

        oneof update {
            ModifyRoles modify = 3;
            ReplaceRoles replace = 4;
        }

        /* By default, the server returns an error when you don't specify any roles.
         * Set this to true to allow it.
         */
        bool override_allow_no_roles = 5;
    }
    message Response {
    }
}

message GetUserValidationRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
}

message UpdateUserValidationRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    UpdateClearableString deprecated_email_validation_regex = 2 [deprecated = true];
    optional string email_validation_regex = 3;

    repeated UserValidation.SignInProvider replace_allowed_sign_in_providers = 4;
}

message TestUserValidationRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    oneof validate {
        /* Test with existing user(s). */
        UserSelection selection = 2;

        /* Test with a given email address. */
        string email_address = 3;
    }

    /* Test the given validation instead of the validation configured for your organization. */
    UserValidation custom_validation = 4;
}

message UserActivitySummaryRequest {
    message Response {
        message UserActivitySummary {
            string organization = 1;
            string user_id = 2;
            Date date = 3;
            repeated string actions = 4;
            uint32 total_requests = 5;
        }

        repeated UserActivitySummary summaries = 1;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;

    /* The user to request activity for. */
    string user_id = 2;

    /* The dates to request user activity for. */
    repeated Date dates = 3;

    /* Include activity for child organizations. */
    Filter.ChildOrganizations child_organizations = 4;
}
