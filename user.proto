syntax = "proto3";

import "base.proto";
import "permission.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.user";
option java_outer_classname = "UserApi";
option go_package = "hiber";

package hiber.user;

service UserService {
    rpc List (ListUsersRequest) returns (ListUsersRequest.Response);

    rpc ListAccessRequests (ListAccessRequestsRequest) returns (ListAccessRequestsRequest.Response);
    rpc Approve (ApproveUserRequest) returns (ApproveUserRequest.Response);
    rpc Remove (RemoveUserRequest) returns (RemoveUserRequest.Response);
    rpc Invite (InviteUserRequest) returns (InviteUserRequest.Response);
    rpc ListInvitations (ListInvitationsRequest) returns (ListInvitationsRequest.Response);

    rpc CreateUser (CreateUserRequest) returns (User);
    rpc CreateUsers (CreateUsersRequest) returns (CreateUsersRequest.Response);

    rpc ResetPassword (ResetUserPasswordRequest) returns (ResetUserPasswordRequest.Response);
    rpc UpdateUserPermissions (UpdateUserPermissionsRequest) returns (UpdateUserPermissionsRequest.Response);

    rpc GetUserValidation (GetUserValidationRequest) returns (UserValidation);
    rpc UpdateUserValidation (UpdateUserValidationRequest) returns (UserValidation);
    rpc TestUserValidation (TestUserValidationRequest) returns (TestUserValidationRequest.Response);

    rpc Activity (UserActivitySummaryRequest) returns (UserActivitySummaryRequest.Response);
}

message User {
    string id = 1;
    string email = 2;
    string name = 3;
    Filter.OrganizationPermissions permissions = 4;
}

message UserSelection {
    repeated string user_ids = 3;
    string by_email = 1;
    string by_name = 2;
    string search = 4;
}

enum UserSort {
    EMAIL_ASC = 0;
    EMAIL_DESC = 1;
    NAME_ASC = 2;
    NAME_DESC = 3;
}

message UserValidation {
    string email_validation_regex = 1;
}

message ListUsersRequest {
    message Response {
        repeated User users = 1;
        ListUsersRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    UserSelection selection = 2;
    Pagination pagination = 3;
    UserSort sort = 4;
}

message ListAccessRequestsRequest {
    message Response {
        repeated User users = 1;
        ListAccessRequestsRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    UserSelection selection = 2;
    Pagination pagination = 3;
    UserSort sort = 4;
}

message ApproveUserRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    repeated string user_ids = 2;
    Filter.OrganizationPermissions permissions = 3;

    /* By default, the server returns an error when you don't specify any permissions. Set this to true to allow it. */
    bool override_allow_no_permissions = 4;
}

message RemoveUserRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    repeated string user_ids = 2;

    /* Remove all tokens created by this user. If this is not set, only the tokens with user permissions are removed. */
    bool remove_all_tokens = 3;
}

/* List all invited users (email addresses). */
message ListInvitationsRequest {
    message Response {
        repeated string emails = 1;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;

    /* Search the invited email addresses. */
    string search = 2;
}

/* Accept an invitation to an organization. */
message InviteUserRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;

    /* The email address of the user you want to invite. */
    string email = 2;

    /* Invite the user again, even if there is an open invite. This can be done a limited amount of times. */
    bool retry = 3;

    Filter.OrganizationPermissions permissions = 4;

    /* By default, the server returns an error when you don't specify any permissions. Set this to true to allow it. */
    bool override_allow_no_permissions = 5;
}

message CreateUserRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    string email = 2;
    string name = 3;

    /* Optional. If no password is given, the account can only be accessed using a password reset. */
    string password = 4;

    /* Permissions the new user should get. */
    Filter.OrganizationPermissions permissions = 5;

    /* Send an automated email prompting the user to verify their email address. */
    bool send_verification_mail = 6;

    /* Send an automated email prompting the user to set a password. Recommended when password is not set. */
    bool send_password_reset_mail = 7;

    /* When the user cannot be created, (i.e. they already exist because they are in a different organization)
     * we can send an invite instead, effectively calling InviteUserRequest with the email and permissions.
     * Set this to true to allow this behaviour.
     */
    bool allow_invite_instead = 8;

    /* By default, the server returns an error when you don't specify any permissions. Set this to true to allow it. */
    bool override_allow_no_permissions = 9;
}

message CreateUsersRequest {
    message Response {
        repeated User users = 1;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    /* Users to create. Allows for individual impersonation and mail settings. */
    repeated CreateUserRequest users = 2;
    /* Set the permissions for all users. Can be replaced for specific settings in the CreateUserRequest. */
    Filter.OrganizationPermissions permissions = 3;
    /* Send an automated email prompting the users to verify their email addresses. If true, applies to all users. */
    bool send_verification_mail = 4;
    /* Send an automated email prompting the users to set their password. If true, applies to all users. */
    bool send_password_reset_mail = 5;
}

message ResetUserPasswordRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    string user_id = 2;
}

message UpdateUserPermissionsRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    repeated string user_ids = 2;

    /* The previous permissions are replaced! */
    Filter.OrganizationPermissions new_permissions = 3;

    /* By default, the server returns an error when you don't specify any permissions. Set this to true to allow it. */
    bool override_allow_no_permissions = 4;
}

message GetUserValidationRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
}

message UpdateUserValidationRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;

    UpdateClearableString email_validation_regex = 2;
}

message TestUserValidationRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;

    oneof validate {
        /* Test with existing user(s). */
        UserSelection selection = 2;

        /* Test with a given email address. */
        string email_address = 3;
    }

    /* Test the given validation instead of the validation configured for your organization. */
    UserValidation custom_validation = 4;
}

message UserActivitySummaryRequest {
    message Response {
        message UserActivitySummary {
            string organization = 1;
            string user_id = 2;
            Date date = 3;
            repeated string actions = 4;
            uint32 total_requests = 5;
        }

        repeated UserActivitySummary summaries = 1;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;

    /* The user to request activity for. */
    string user_id = 2;

    /* The dates to request user activity for. */
    repeated Date dates = 3;

    /* Include activity for child organizations. */
    Filter.ChildOrganizations child_organizations = 4;
}
