syntax = "proto3";

package hiber.organization.location;

import "base.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.organization.location";
option java_outer_classname = "NamedLocationApi";
option go_package = "hiber";

/* Manage saved locations for your organization.
 * This allows you to save locations to be displayed on the map or used in alarms.
 * Note that when a saved location is used in an alarm, it may be exposed to child organization when the alarm
 * is available to child organizations.
 */
service NamedLocationService {
    rpc List (ListNamedLocations.Request) returns (ListNamedLocations.Response);
    rpc Create (CreateNamedLocations.Request) returns (CreateNamedLocations.Response);
    rpc Update (UpdateNamedLocation.Request) returns (UpdateNamedLocation.Response);
    rpc Delete (DeleteNamedLocation.Request) returns (DeleteNamedLocation.Response);
}

/* A saved location within an organization. */
message NamedLocation {
    string name = 1;
    oneof definition {
        Location location = 2;
        Area area = 3;
        Shape shape = 4;
    }
}

/* Look up saved locations by name, or by overlap with a given selection. */
message NamedLocationSelection {
    /* Free text search in the saved location names. */
    string search = 1;

    /* Select the saved locations with the given names. */
    repeated string names = 2;

    /* Select all saved locations that overlap with the given LocationOverlapSelection. */
    LocationOverlapSelection overlaps = 3;
}

/* Selection for overlapping with (saved) locations.
 *
 * For example:
 * - Select everything that overlaps with saved location "my-area":
 *     { overlaps = { saved = "my-area" } }
 * - Select everything that overlaps with a custom shape:
 *     { overlaps = { shape = { path = ... } } }
 * - Select everything that overlaps with the intersection of a saved location and a custom area:
 *     { overlaps_all = [{ saved = "my-saved-location" }, { area = ... }] }
 * - Recursive selection using a combination of any and all by adding deeper selections:
 *     { overlaps_any = [{ overlap_all = { ... } }, { saved = { .. } }] }
 */
message LocationOverlapSelection {
    oneof element {
        /* Matches anything that contains this location. */
        Location location = 1;

        /* Matching anything that overlaps with this shape. */
        Area area = 2;

        /* Matching anything that overlaps with this area. */
        Shape shape = 3;

        /* Matches anything that overlaps with this named location. */
        string name = 4;
    }

    /* Must overlap with all items.
     * If used in combination with element or overlaps_any, they must all match.
     */
    repeated LocationOverlapSelection overlaps_all = 6;

    /* Must overlap with at least one of the items.
     * If used in combination with element or overlaps_all, they must all match.
     */
    repeated LocationOverlapSelection overlaps_any = 7;
}

message ListNamedLocations {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;
        NamedLocationSelection selection = 2;
        Pagination pagination = 3;
    }

    message Response {
        repeated NamedLocation named_locations = 1;
        Pagination.Result pagination = 2;
        Request request = 3;
    }
}

message CreateNamedLocations {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;

        /* The locations to save. If the name for any of the given locations already exists, the request fails. */
        repeated NamedLocation create = 2;
    }

    message Response {
        repeated NamedLocation added = 1;
    }
}

message UpdateNamedLocation {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;

        /* The name of the saved location to update. */
        string name = 2;

        /* The new saved location. If the name is different, the saved location is renamed. */
        NamedLocation updated = 3;
    }

    message Response {
        NamedLocation updated = 1;
    }
}

message DeleteNamedLocation {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;

        /* The name of the saved location to delete. */
        string name = 2;
    }

    message Response {
    }
}
