syntax = "proto3";

package hiber.testing;

import "google/protobuf/struct.proto";

import "base.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.testing";
option java_outer_classname = "TestingApi";
option go_package = "hiber";

/* Method to test the system in different ways, meant for customer access. For example, you can use this to test
 * whether everything works from message to webhook call, and further in your own system.
 */
service TestingService {
    rpc PushModemMessages (PushModemMessagesRequest) returns (PushModemMessagesRequest.Response);
    rpc PushModemMessagesFromDebugPort (PushModemMessagesFromDebugPortRequest) returns (PushModemMessagesFromDebugPortRequest.Response);
}

/* Push any number of modem messages. These are marked as test messages, which means they will be treated
 * differently in a few places (i.e. message sequence, to avoid errors on the next real messages).
 * The message is handled like a real message, it's encrypted as if sent from a modem, then goes through
 * the decryption process and all relevant events are triggered (including webhooks calls caused by the events).
 */
message PushModemMessagesRequest {
    message Response {
        PushModemMessagesRequest request = 2;
    }

    message MessageToPush {
        string modem_number = 1;
        Timestamp time = 2;
        Location location = 3;
        bytes content = 4;

        /* Metadata for this message. For example: LoRaWAN values like fPort. */
        google.protobuf.Struct metadata = 5;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    repeated MessageToPush messages = 2;
}

/* Push a message using the data gotten from the modem debug port.
 * This means the message is an encrypted string, which the server can parse.
 */
message PushModemMessagesFromDebugPortRequest {
    message Response {
        PushModemMessagesFromDebugPortRequest request = 1;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    repeated string encoded_messages = 2;
}
