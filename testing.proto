syntax = "proto3";

package hiber.testing;

import "google/protobuf/struct.proto";

import "base.proto";
import "modem.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.testing";
option java_outer_classname = "TestingApi";
option go_package = "hiber";

/* Method to test the system in different ways, meant for customer access. For example, you can use this to test
 * whether everything works from message to webhook call, and further in your own system.
 */
service TestingService {
    rpc PushModemMessages (PushModemMessagesRequest) returns (PushModemMessagesRequest.Response);
}

/* Simulation service to manage active simulations.
 * Simulation can help fill in the gaps until real data is present, by, for example, simulating messages from a device.
 */
service SimulationService {
    rpc Get (Simulation.GetRequest) returns (Simulation);
    rpc Update (Simulation.UpdateRequest) returns (Simulation);

    rpc ListModemMessageSimulations (Simulation.ModemMessageSimulation.List.Request) returns (Simulation.ModemMessageSimulation.List.Response);
    rpc UpdateModemMessageSimulations (Simulation.ModemMessageSimulation.Update.Request) returns (Simulation.ModemMessageSimulation.Update.Response);
    rpc DisableModemMessageSimulations (Simulation.ModemMessageSimulation.Delete.Request) returns (Simulation.ModemMessageSimulation.Delete.Response);
}

/* Push any number of modem messages. These are marked as test messages, which means they will be treated
 * differently in a few places (i.e. message sequence, to avoid errors on the next real messages).
 * The message is handled like a real message, it's encrypted as if sent from a modem, then goes through
 * the decryption process and all relevant events are triggered (including webhooks calls caused by the events).
 */
message PushModemMessagesRequest {
    message Response {
        PushModemMessagesRequest request = 2;
    }

    message MessageToPush {
        string modem_number = 1;
        optional Timestamp time = 2;
        optional Location location = 3;
        optional bytes content = 4;

        /* Metadata for this message. For example: LoRaWAN values like fPort. */
        optional google.protobuf.Struct metadata = 5;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    repeated MessageToPush messages = 2;
}

/* Simulation settings for this organization.
 *
 * The simulation settings for an organization can be used to configure some organization-wide setting for
 * specific simulations, like a default for the number of messages to simulate per enabled modem), or configuring
 * a percentage of simulated messages to trigger a delayed event.
 */
message Simulation {
    /* Simulate modem inactivity randomly.
     *
     * Requires modems with message simulation.
     * For all those modems, randomly picks modems up to the configured percentage to be inactive.
     * Those modems are excluded from the simulation for a period between period_min and period_max.
     * When a modem is no longer inactive, another modem is randomly picked to be inactive. This allows you to test
     * inactivity detection, health, etc.
     *
     * This does not affect messages that are not simulated (like test messages or real messages).
     */
    message ModemInactivitySimulation {
        uint32 percentage_of_simulating_modems = 1;
        Duration period_min = 2;
        Duration period_max = 3;
    }

    /* Simulate delayed messages.
     *
     * Requires modems with message simulation.
     * Adds a random delay between minimum_message_delay and maximum_message_delay to a percentage of messages
     * generated by the modem message simulation.
     * The messages themselves are not actually delayed; this just sets the sent time further into the past.
     */
    message DelayedMessageSimulation {
        uint32 percentage_of_simulated_messages = 1;
        Duration minimum_message_delay = 2;
        Duration maximum_message_delay = 3;
    }

    string organization = 1;

    /* Whether or not all simulations for this organization are enabled. */
    bool enabled = 2;

    /* Configuration for simulating modem inactivity. */
    ModemInactivitySimulation modem_inactivity = 3;

    /* Configuration for simulating delayed messages. */
    DelayedMessageSimulation delayed_messages = 4;

    /* Default configuration for the modem message simulation. */
    ModemMessageSimulation.Defaults modem_message_simulation_defaults = 5;

    /* Summary of modems with message simulation. */
    ModemMessageSimulation.Summary modem_message_simulation = 6;

    message GetRequest {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        optional string organization = 1;
    }

    message UpdateRequest {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        optional string organization = 1;
        UpdateBoolean enabled = 2;
        optional ModemInactivitySimulation simulate_modem_inactivity = 3;
        optional DelayedMessageSimulation simulate_delayed_messages = 4;
        optional ModemMessageSimulation.Defaults modem_message_simulation_defaults = 5;
    }

    message ModemMessageSimulation {
        string modem_number = 1;

        /* The number of simulated messages per day for this modem.
         * This value is either the custom amount per day for this modem or the default value
         */
        uint32 messages_per_interval = 2;

        /* Interval messages should be simulated at (i.e. once every hour). */
        Duration simulation_interval = 3;

        oneof message_bodies {
            /* A message body to use for the simulated messages. */
            BytesOrHex message_body = 4;

            /* Rotate through a list of message bodies. */
            MessageBodyRotation message_body_rotation = 8;
        }

        /* The indices of bytes in the message body that should be randomized (to have variable values). */
        repeated uint32 message_body_variable_byte_indices = 5;

        oneof location {
            /* Randomize modem location within the given area. */
            Area random_location_in_area = 7;

            /* Rotate through a list of locations. */
            LocationRotation location_rotation = 9;
        }

        /* Timestamp after which the next simulation run will be triggered (not guaranteed to be exactly at this time).
         * If further in the future, message simulation for this modem is inactive until this time.
         * This may be set to a time in the future manually, or by the ModemInactivitySimulation.
         */
        Timestamp next_simulation_run_after = 6;

        /* Rotate through a list of message bodies. */
        message MessageBodyRotation {
            /* The rotating list of message bodies to use when simulating messages. */
            repeated BytesOrHex message_bodies = 1;
        }

        /* Rotate through a list of locations. */
        message LocationRotation {
            /* The rotating list of locations to use when simulating messages. */
            repeated Location locations = 1;
        }

        message Defaults {
            /* Default for the amount of messages to simulate per interval for a modem that has simulation enabled.
             * Must be between 1 and 24 (for a maximum of 240 message per day).
             */
            uint32 messages_per_interval = 1;

            /* Default for interval messages should be simulated at (i.e. once every hour). */
            Duration simulation_interval = 2;
        }

        message Summary {
            /* The number of modems for which message simulation has been enabled. */
            uint32 enabled_modems = 1;

            /* The number of modems that are actively simulating messages. */
            uint32 active_modems = 2;

            /* The number of modems that have been marked inactive (by ModemInactivitySimulation or a user). */
            uint32 inactive_modems = 3;

            /* The total amount of messages that will be simulated in this organization per day. */
            uint32 total_messages_per_day = 4;

            /* The number of modem message simulation runs for this organization per day. */
            uint32 total_simulations_per_day = 5;
        }

        message List {
            message Request {
                /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
                optional string organization = 1;
                modem.ModemSelection modems = 2;
                optional Pagination pagination = 3;

                /* Include modems for which message simulation is disabled. */
                bool include_disabled = 4;
            }
            message Response {
                repeated ModemMessageSimulation modems = 1;
                Request request = 2;
                Pagination.Result pagination = 3;
            }
        }

        /* Create or update the modem message simulation for a selection of modems. */
        message Update {
            message Request {

                /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
                optional string organization = 1;

                /* Modems to create or update the message simulation for. */
                modem.ModemSelection modems = 2;

                /* The number of simulated messages per simulation interval for these modems.
                 * This value is either the custom amount per day for these modems or the default value
                 */
                uint32 messages_per_interval = 3;

                /* Interval messages should be simulated at (i.e. once every hour). */
                Duration simulation_interval = 4;

                oneof message_body {
                    /* A message body to use for the simulated messages. */
                    BytesOrHex.Update update_message_body = 5;

                    /* Replace the list of message bodies to rotate through.
                     * This does not have to match the length of the location rotation, if any.
                     * Note that this **replaces** the entire list of values, to ensure the order is maintained.
                     */
                    MessageBodyRotation replace_message_body_rotation = 12;
                }

                /* Add indices of bytes in the message body that should be randomized (to have variable values). */
                repeated uint32 message_body_add_variable_byte_indices = 6;

                /* Remove indices of bytes in the message body that should be randomized (to have variable values). */
                repeated uint32 message_body_remove_variable_byte_indices = 7;

                oneof location {
                    /* Randomize modem location within the given area. */
                    Area random_location_in_area = 11;

                    /* Replace the list of locations to rotate through.
                     * This does not have to match the length of the message body rotation, if any.
                     * Note that this **replaces** the entire list of values, to ensure the order is maintained.
                     */
                    LocationRotation replace_location_rotation = 13;
                }

                /* Disable the message simulation until the given date (UTC). */
                Timestamp set_inactive_until = 8;

                optional Pagination pagination = 10;
            }
            message Response {
                repeated ModemMessageSimulation modems = 1;
                Request request = 2;
                Pagination.Result pagination = 3;
            }
        }

        message Delete {
            message Request {
                /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
                optional string organization = 1;
                modem.ModemSelection modems = 2;
            }
            message Response {
                uint32 deleted = 1;
                Request request = 2;
            }
        }
    }
}
