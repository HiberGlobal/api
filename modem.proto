syntax = "proto3";

package hiber.modem;

import "google/protobuf/struct.proto";

import "base.proto";
import "health.proto";
import "subscription.proto";
import "tag.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.modem";
option java_outer_classname = "ModemApi";
option go_package = "hiber";

/* The core of the Hiber system, modems are the network nodes that send information and user data.
 * This service contains calls to list and manage them, as well as list their messages.
 */
service ModemService {
    rpc Get (GetModemRequest) returns (Modem);
    rpc List (ListModemsRequest) returns (ListModemsRequest.Response);
    rpc Grouped (ListModemsGrouped.Request) returns (ListModemsGrouped.Response);
    rpc Messages (ListModemMessagesRequest) returns (ListModemMessagesRequest.Response);
    rpc MessageCount (MessageCountRequest) returns (MessageCountRequest.Response);

    rpc Rename (RenameModemRequest) returns (Modem);

    rpc UpdateTags (UpdateModemTagsRequest) returns (UpdateModemTagsRequest.Response);
    rpc UpdateNotes (UpdateModemNotesRequest) returns (UpdateModemNotesRequest.Response);
    rpc UpdateSecureNotes (UpdateModemSecureNotesRequest) returns (UpdateModemSecureNotesRequest.Response);
    rpc UpdateStatus (UpdateModemStatusRequest) returns (UpdateModemStatusRequest.Response);
    rpc UpdateModemHealthConfig (UpdateModemHealthConfig.Request) returns (UpdateModemHealthConfig.Response);
    rpc UpdatePeripherals (UpdatePeripheralsRequest) returns (UpdatePeripheralsRequest.Response);

    rpc LicenseKeys (LicenseKeysRequest) returns (LicenseKeysRequest.Response);

    rpc HealthCount (ModemHealthCount.Request) returns (ModemHealthCount.Response);
}

/* Modem data, including location and last message (if available).
 * Location, last message and firmware version can be updated by messages, the rest is typically either set
 * when the modem is registered into the system or when a subscription is authorized.
 */
message Modem {
    /* An 8-character hexadecimal string */
    string number = 1;
    string organization = 2;
    /* An optional descriptor given to the modem */
    string name = 3;

    Location location = 4;

    uint64 last_message_id = 16;

    /* Time the server has received the last message. */
    Timestamp last_message_received_at = 5;

    /* Time the modem has sent the last message. */
    Timestamp last_message_sent_at = 14;

    /* The body of the last message. */
    BytesOrHex last_message_body = 15;

    /* The amount of time since the last message from this modem was received on the server. */
    Duration inactivity = 30;

    /* Period in days, if modem inactivity exceeds this period, alerts will be triggered and health will go to error */
    int32 maximum_inactivity_period = 8 [deprecated = true];

    /* If modem inactivity exceeds this period, alerts will be triggered and health will go to error */
    Duration maximum_inactivity = 29;

    /* Deprecated health based on the number of error and warning events this modem has received in the past 30 days
     * Uses the OK, WARNING, ERROR format.
     */
    Health health = 9 [deprecated = true];

    /* Health level based on the modem alarm and some always-present alarms. */
    health.HealthLevel health_level = 28;

    /* Health configuration for unresolvable built-in modem alarms, like delayed or skipped messages. */
    HealthConfig health_config = 24;

    Status status = 12;

    // additional information
    ActiveSubscription active_subscription = 6;
    TechnicalData technical = 7;
    Peripherals peripherals = 11;
    Transfer in_transfer = 13;

    /* Notes field that can be used to add additional information to a modem. */
    string notes = 17;

    /* Secure notes field that can be used to add additional information to a modem, with limited accessibility. */
    string secure_notes = 18;

    repeated hiber.tag.Tag tags = 10;

    /* [DEPRECATED] Whether the modem is a gateway, it has been configured as a gateway and has connected devices.
     * Use `type` instead.
     */
    bool is_gateway = 20 [deprecated = true];

    /* [DEPRECATED] Whether the modem is connected to a modem configured as a gateway.
     * Use `type` instead.
     */
    bool is_device_connected_to_gateway = 21 [deprecated = true];

    /* [DEPRECATED] The modem number that this modem is connected to, if any.
     * Use `connected_device_info.connected_to_gateway` instead.
     */
    string connected_to_gateway = 22 [deprecated = true];

    /* [DEPRECATED] External device ids, if any.
     * Use `connected_device_info.external_device_ids` instead.
     */
    repeated string external_device_ids = 23 [deprecated = true];

    /* The type of modem.
     * Used mainly to differentiate in the UI or to sort on.
     */
    Modem.Type type = 25;

    /* Additional information when this modem is a gateway. */
    GatewayInfo gateway_info = 26;

    /* Additional information when this modem is a connected device. */
    ConnectedDeviceInfo connected_device_info = 27;

    /* Additional information when this modem is a gateway. */
    message GatewayInfo {
        int32 number_of_connected_devices = 1;
    }

    /* Additional information when this modem is a connected device. */
    message ConnectedDeviceInfo {
        /* The gateways that this modem is connected to.
         * This field reflects the gateway that processed the last message for this modem.
         * If the modem is connected to multiple gateways, the last used gateway is tracked here.
         */
        string connected_to_gateway = 1;

        /* External device ids for this modem. */
        repeated string external_device_ids = 2;
    }

    message TechnicalData {
        string hardware_name = 2;
        string firmware_version_name = 3;
        string hardware_production_batch = 6;
        string manufacturer = 7;
        reserved 1, 4, 5;
    }

    message ActiveSubscription {
        hiber.organization.subscription.ServiceType type = 3;
        Timestamp start_date = 4;
        Timestamp end_date = 5;
        reserved 1, 2;
    }

    message Transfer {
        enum Status {
            NONE = 0;
            /* Modem has been shipped or transferred to you and is inbound.
             * When you mark the transfer as received, the modems are added to your organization.
             * If you encounter any issues, you can mark modems for return using the ModemTransferReturnService.
             */
            INBOUND = 1;
            /* Modem has been shipped or transferred by you and is outbound.
             * When the transfer is received, the modems are removed from your organization, though the recipient may
             * still return them later.
             */
            OUTBOUND = 2;
            /* You shipped this modem to another organization, but they are returning it.
             * When you mark the transfer as received, the modems are added back to your organization.
             */
            RETURNING = 3;
        }

        Status status = 1;
        string identifier = 2;
    }

    /* Peripherals attached to the modem, including antenna, whether it has a gps antenna and an
     * open field for peripherals like battery, sensors, etc.
     */
    message Peripherals {
        /* A Hiber antenna is required for the modem to function.
         */
        enum HiberAntenna {
            DEFAULT = 0;
            HIBER_PANDA = 1;
            HIBER_GRIZZLY = 2;
            HIBER_BLACK = 3;
            CUSTOM = 4;
        }

        HiberAntenna hiber_antenna = 1;
        bool gps = 2;
        map<string, string> peripherals = 3;
        string custom_antenna = 4;
    }

    /* Health configuration for the modem. Defines how the health is calculated for certain built-in alarms. */
    message HealthConfig {
        reserved 1;

        /* The health level that unresolvable alarms, like delayed or skipped messages, set the modem to. */
        string health_level = 3;

        /* Period to consider when determining health from warning events. Warning events cannot be resolved. */
        Duration health_unresolvable_period = 2;
    }

    /* Modem statuses for its lifecycle. */
    enum Status {
        /* Modem is in your inventory, but not deployed or active. */
        DEFAULT = 0;
        /* Modem is active and sending messages.
         * See health for more details on its health, based on the past messages.
         */
        ACTIVE = 1;
        DAMAGED = 2;
        LOST = 3;
        DEAD = 4;
        DISABLED = 5;
    }

    /* The effective type of this modem.
     * Type can depend on the hardware itself as well as network topology.
     */
    enum Type {
        /* A device of which the specific type is not known */
        OTHER = 0;
        /* A devices that directly connects to the satellite */
        DIRECT = 1;
        /* A device that can receive messages from sensors in the field and relay them (directly) to the satellite.
         * Typically a LoRaWAN hub.
         * Note that gateways also send messages themselves (e.g. a daily heartbeat).
         */
        GATEWAY = 2;
        /* A sensor that can (only) send data to a gateway. Typically using a LoRaWAN connection. */
        CONNECTED_DEVICE = 3;
    }
}

/* Selection object for modems.
 * Filter modems by modem id, (child)organization, tags, activation status and time, service type and last message time.
 */
message ModemSelection {
    message Transfers {
        repeated string transfers_identifiers = 1;
        reserved 2, 3;
    }

    Filter.Modems modems = 1;
    string free_text_search = 8;

    bool only_active = 4;
    TimeRange activated_in = 5;
    TimeRange with_last_message_in = 7;
    repeated hiber.organization.subscription.ServiceType with_service_type = 6;

    /* Deprecated health that uses the OK, WARNING, ERROR format. */
    repeated Health health = 9 [deprecated = true];

    /* Filter modems by health level. */
    repeated string health_levels = 18;

    /* Filter modems by status(es). Defaults to health statuses, excluding dead, lost or damaged modems. */
    repeated Modem.Status status = 10;
    Transfers transfers = 11;

    /* Only include modems that have a type listed in types.
     * In other words, when providing multiple types, this is an "OR" relationship.
     */
    repeated Modem.Type types = 16;

    /* [DEPRECATED] Only list devices that are a gateway.
     * Replaced by `types`.
     * If you only want to have gateways in the result, create a selection with only `Modem.Type.GATEWAY` for `types`.
     */
    bool only_gateways = 12 [deprecated = true];
    /* [DEPRECATED] Only list devices that are a connected devices. Typically these are LoRaWAN sensors.
     * Replaced by `types`.
     * If you only want to have connected devices in the result,
     * create a selection with only `Modem.Type.CONNECTED_DEVICE` for `types`.
     */
    bool only_has_external_device_ids = 13 [deprecated = true];
    Filter.Modems connected_to_gateways = 14;
    repeated string external_device_ids = 15;

    hiber.tag.TagSelection filter_by_tags = 2;

    reserved 3, 17;
}

/* Decrypted modem message. Messages are received encrypted and decrypted asynchronously, which adds the location
 * data and message body. (Your message body is, of course, still encrypted if you've encrypted it yourself)
 */
message ModemMessage {
    enum Source {
        /* A real message from a modem or gateway, sent over Hiberband to the server. */
        HIBERBAND = 0;
        /* A real message from a modem or gateway, sent directly to the API using a persistent connection. */
        DIRECT_TO_API = 1;
        /* A test message sent to the testing API. */
        TEST = 2;
        /* A simulated message, generated by the server. */
        SIMULATION = 3;
    }

    /* Parsed message body.
     * If any parsers are configured for the modem, they are applied to the message.
     * The result is stored either as a json object or an error string.
     */
    message ParsedBody {
        /* Id of the parser that was used, if the parser and modem are owned by the same organization.
         * [DEPRECATED] Deprecated in favour of the identifier, which is globally unique.
         */
        int32 parser_id = 1 [deprecated = true];

        /* Globally unique identifier of the parser that was used. */
        string parser_identifier = 6;

        /* Name of the parser that was used. */
        string parser_name = 2;

        oneof parsed {
            /* Error while parsing the message body. */
            string error = 4;

            /* Result of parsing the body with this parser. */
            google.protobuf.Struct result = 5;
        }

        reserved 3;
    }

    /* Unique message identifier. */
    uint64 message_id = 7;

    /* Modem number of the modem that sent the message. */
    string modem_number = 1;

    /* Time the message was sent from the modem. */
    Timestamp sent_at = 3;

    /* Time the message was received on the server. */
    Timestamp received_at = 6;

    /* Modem location when the message was sent. */
    Location location = 4;

    /* Message body. */
    bytes body = 5;

    /* Message body convenience object. */
    BytesOrHex body_bytes = 8;

    /* A list of applied body parsers and their results. */
    repeated ParsedBody body_parsed = 11;

    /* Convenience flag marking whether the body was parsed successfully by at least one parser. */
    bool body_parsed_successfully = 12;

    /* Message source(s) for this message (i.e. it was received through the satellite or directly to the server). */
    repeated Source sources = 10;

    /* True if the the TEST source is in the sources. */
    bool is_test = 9;

    /* Whether this message contains other messages. */
    bool is_gateway_message = 13;

    /* The gateway message this message was sent in. */
    uint64 via_gateway_message = 14;

    /* Message metadata, defined by the modem or gateway. */
    google.protobuf.Struct metadata = 15;

    reserved 2;
}

/* Selection object for modem messages.
 * Filter messages by modem id, (child)organization, and time sent (note that this is not the time the message was received)
 */
message ModemMessageSelection {
    message ModemMessageSourceFilter {
        repeated ModemMessage.Source include = 1;
        repeated ModemMessage.Source exclude = 2;
    }

    /* Define the modems to return messages from, i.e. include = [AAAA AAAA, BBBB BBBB] */
    Filter.Modems modems = 1;

    /* Filter message by time range. This field is required, to limit the amount of messages. */
    TimeRange time_range = 3;

    /* Filter messages by the given source filter.
     * For example, to exclude test and simulated messages, use exclude = [TEST, SIMULATED]
     * or to only return Hiberband messages, use include = [HIBERBAND].
     * Note that if a message has sources [HIBERBAND, DIRECT_TO_API], including [HIBERBAND] will include the message,
     * and excluding [HIBERBAND] will filter out the message, even though it also has DIRECT_TO_API.
     */
    ModemMessageSourceFilter filter_by_sources = 4;

    reserved 2;
}

message GetModemRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    string modem_number = 2;
    reserved 3;
    Filter.ChildOrganizations child_organizations = 4;
}

message ListModemsRequest {
    message Response {
        repeated Modem modems = 1;
        ListModemsRequest request = 2;
        Pagination.Result pagination = 3;
        repeated Sort sorted_by = 4;

        /* This will be populated with missing group parents (i.e. gateways) for the the modems on this page.
         * Any group parent that is on the current page is not included in this list to avoid duplicate data.
         * Only set when include_missing_group_parents is true in the request.
         */
        repeated Modem group_parents = 5;
    }

    /* Sorting options for the results. */
    enum Sort {
        LAST_MESSAGE_RECEIVED = 0;
        LAST_MESSAGE_RECEIVED_INVERTED = 1;

        /* Sort numerically on the number of the modem. */
        MODEM_NUMBER_ASC = 2;
        MODEM_NUMBER_DESC = 3;

        STATUS_ASC = 4;
        STATUS_DESC = 5;

        /* Sort alphabetically on the name of the modem. De default name of the modem is its HEX number */
        MODEM_NAME_ASC = 6;
        MODEM_NAME_DESC = 7;

        /* Sort alphabetically on the name of the organization that owns the modem */
        ORGANIZATION_ASC = 8;
        ORGANIZATION_DESC = 9;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;

    /* Select which modems to return. */
    ModemSelection selection = 2;

    /* Paginate through results. */
    Pagination pagination = 3;

    /* Sort the modem with the given sort options. */
    repeated Sort sort_by = 4 [packed = false];

    /* Whether to include inbound modems in the results.
     * Inbound modems are modems that are in a transfer that has been sent *to* your organization, but that has not
     * been marked as received yet.
     */
    bool include_inbound_modems = 6;

    /* Whether to include outbound modems in the results.
     * Inbound modems are modems that are in a transfer that has been sent *from* your organization, but that has not
     * been marked as received yet.
     */
    bool include_outbound_modems = 7;

    /* Include modems from the selected child organizations. */
    Filter.ChildOrganizations child_organizations = 8;

    /* Filter modems by location. */
    LocationSelection location_selection = 9;

    /* Set this to true to populate the group_parents field in the response.
     * This will be populated with missing group parents (i.e. gateways) for the the modems on this page.
     * Any group parent that is on the current page is not included in this list to avoid duplicate data.
     */
    bool include_missing_group_parents = 10;

    reserved 5;
}

/* Lists all modems the given criteria, grouped by gateway.
 * Pagination is applied to modems in a group, not to the groups themselves.
 */
message ListModemsGrouped {
    message Request {
        /* The modems you want to display in the groups.
         * This is a ListModemsRequest that is used to fetch the modems for each group, with the added limitation
         * that the modems must be in the group.
         *
         * The usage of ListModemsRequest and ListModemsRequest.Response in the Response.Group was intentionally
         * chosen to simplify pagination withing a group, since the response contains the request
         * (which will be updated with the group it is in) and pagination to select the next page using the
         * list method.
         */
        ListModemsRequest group_content = 1;

        /* Select the parents for the groups to display.
         *
         * Anything selected here that cannot have any connected modems (i.e. a direct modem) wil be omitted
         * unless allow_any_group_parent is set to true.
         * Only gateways will have connected devices, so unless allow_any_group_parent is true,
         * type is replaced with GATEWAY. This may change in the future if more grouping options are introduced.
         */
        ListModemsRequest groups = 2;

        /* Set to true to allow group request to return modems that can never be the parent of a group.
         * - If this flag is false, the modems for the groups are automatically filtered on being a parent of a group.
         *   Note that the group may still be empty, i.e. when a gateway has no connected devices.
         * - If this flag is true, the group parents can include modems which cannot be a parent and for which
         *   the group can only be empty.
         */
        bool allow_any_group_parent = 3;
    }

    message Response {
        /* The groups, based on a parent (typically a gateway unless allow_any_group_parent was set).
         * This is a ListModemsRequest.Response, with the selection updated with its parent and includes
         * the group parent in the group_parents field.
         *
         * The usage of ListModemsRequest and ListModemsRequest.Response in the Response.Group was intentionally
         * chosen to simplify pagination withing a group, since the response contains the request
         * (which will be updated with the group it is in) and pagination to select the next page using the
         * list method.
         */
        repeated ListModemsRequest.Response groups = 1;
        Request request = 2;
        Pagination.Result pagination = 3;
        repeated ListModemsRequest.Sort sorted_by = 4;
    }
}

message ListModemMessagesRequest {
    message Response {
        repeated ModemMessage messages = 1;
        ListModemMessagesRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    ModemMessageSelection selection = 2;
    Pagination pagination = 3;
}

message MessageCountRequest {
    message Response {
        message MessageCount {
            Date date = 1;
            int32 count = 2;
        }

        repeated MessageCount message_count_per_day = 1;
        MessageCountRequest request = 2;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    ModemMessageSelection selection = 2;
    /* Numeric timezone offset for day grouping. Optional. */
    int32 time_zone_offset = 5;
    /* Timezone string for day grouping. Optional. */
    string time_zone = 6;
}

message RenameModemRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    string modem_number = 2;
    string name = 3;
    reserved 4;
}

message UpdateModemTagsRequest {
    message Response {
        repeated Modem modems = 1;
        UpdateModemTagsRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    hiber.tag.UpdateTagsForItem update = 3;
    ModemSelection selection = 5;
    Pagination pagination = 6;
}

message UpdateModemNotesRequest {
    message Response {
        repeated Modem modems = 1;
        UpdateModemNotesRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    ModemSelection selection = 2;
    Pagination pagination = 3;

    /* Notes content */
    string notes = 4;

    /* When you try to set a new notes value to multiple modems, the API returns an error if their previous
     * values were different. Set this to true to apply it anyway.
     */
    bool allow_override_existing_notes = 5;
}

message UpdateModemSecureNotesRequest {
    message Response {
        Modem modem = 1;
        UpdateModemSecureNotesRequest request = 2;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    string modem_number = 2;
    string secure_notes = 3;
}

message UpdateModemStatusRequest {
    message Response {
        Modem modem = 1;
        UpdateModemStatusRequest request = 2;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;

    /* Either pick a single modem to update. DEPRECATED, since ModemSelection is more flexible. */
    string modem_number = 2 [deprecated = true];

    /* Or a modem selection. */
    ModemSelection modem_selection = 4;

    /* The new status for the modem(s). */
    Modem.Status update_status = 3;
}

message UpdatePeripheralsRequest {
    /* The result is paginated if affecting more than 100 modems. Use the list call to paginate further.
     */
    message Response {
        UpdatePeripheralsRequest request = 1;
        repeated Modem modems = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    ModemSelection selection = 2;
    Modem.Peripherals.HiberAntenna hiber_antenna = 3;
    UpdateBoolean gps = 4;
    Location hardcoded_gps_location = 5;
    map<string, string> add_peripherals = 6;
    repeated string remove_peripherals = 7;
    reserved 8;
    Pagination pagination = 9;
    string custom_antenna = 10;
}

message UpdateModemHealthConfig {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;
        ModemSelection selection = 2;

        reserved 3;

        /* Period to consider when determining health from warning events. Warning events cannot be resolved. */
        Duration health_warning_period = 4;
    }

    message Response {
    }
}

message LicenseKeysRequest {
    message Response {
        message ModemLicenseKey {
            string modem_number = 1;
            string license_key = 2;
        }

        LicenseKeysRequest request = 1;
        repeated ModemLicenseKey license_keys = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    ModemSelection selection = 2;
    Pagination pagination = 3;
}

message ModemHealthCount {
    message Request {
        /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
        string organization = 1;

        /* Selection of modems to count. If default, all modems are counted. */
        ModemSelection modem_selection = 2;

        /* Whether to return specific counts for tags, selected using the tag_count_selection. */
        bool include_tag_count = 3;

        /* Selection of tags to return specific counts for. If default, count is calculated for all tags. */
        tag.TagSelection tag_count_selection = 4;
    }

    message HealthCount {
        /* Health level based on the modem alarm and some always-present alarms. */
        health.HealthLevel health_level = 1;

        /* The number of modems matching the modem selection with this health level */
        uint32 count = 2;

        /* Deprecated health based on the number of error and warning events this modem has received in the past 30 days
         * Uses the OK, WARNING, ERROR format.
         */
        Health health = 3 [deprecated = true];
    }

    message HealthCountGroupedPerTag {
        /* The tag this count is for. */
        hiber.tag.Tag tag = 1;
        repeated HealthCount health_counts = 2;
    }

    message Response {
        repeated HealthCount health_totals = 1;
        repeated HealthCountGroupedPerTag health_grouped_per_tag = 4;
        Request request = 3;

        reserved 2;
    }
}
