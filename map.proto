syntax = "proto3";

import "base.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.map";
option java_outer_classname = "MapApi";
option go_package = "hiber";

package hiber.map;

/* Map of modems, in different map levels to enable data to be displayed efficiently
 */
service MapService {
    rpc Map (MapRequest) returns (MapRequest.Response);
    rpc Satellites (SatellitesRequest) returns (SatellitesRequest.Response);
}

/* Selection object for map data. Filter modems on the map by id, (child)organization.
 * Also, filter the map data by level and area restriction, to only display a small area at a detailed map level,
 * for example
 */
message MapSelection {
    message AreaRestriction {
        Location bottom_left = 1;
        Location top_right = 2;
    }

    message ShapeRestriction {
        repeated Location path = 1;
    }

    Filter.Modems modems = 1;
    reserved 2;
    int32 level = 3;
    AreaRestriction area = 4;
    ShapeRestriction shape = 5;
}

/* The location of ground stations that receive the data sent from the satellite(s).
 * Currently, ground station is just a marker on the map.
 */
message GroundStation {
    Location location = 1;
    string name = 2;
}

message Satellite {
    message Position {
        Timestamp time = 1;
        Location location = 2;
    }

    int32 id = 1;
    string name = 2;
    repeated Position positions = 3;
}

/* Map block that specifies a modem count in a specific area, bounded by a latitude / longitude 'square' (not really a
 * square, since the earth is not flat).
 * Also contains an error count and percentage, which signifies any problems in the area.
 * Note that the block's area is specified by the selected map level, which the most course map level defined as
 * squares of 20 by 20 degrees latitude/longitude.s
 */
message MapBlock {
    Area area = 1;
    int32 modem_count = 2;
    int32 error_count = 3;
    float error_percentage = 4;
}

message MapRequest {
    message Response {
        repeated GroundStation ground_stations = 1;
        repeated MapBlock map_blocks = 2;
        MapRequest request = 4;
        repeated Satellite satellites = 5;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    MapSelection selection = 2;
    /* Include modems that belong to organizations created by your current organization. */
    Filter.ChildOrganizations child_organizations = 3;
}

message SatellitesRequest {
    message Response {
        repeated Satellite satellites = 1;
    }
}
