syntax = "proto3";

package hiber.integration.mqtt;

import "base.proto";
import "tag.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.integration.mqtt";
option java_outer_classname = "MQTTIntegrationApi";
option go_package = "hiber";

service MQTTService {
    rpc List (ListMQTTPublishersRequest) returns (ListMQTTPublishersRequest.Response);
    rpc Create (CreateMQTTPublisherRequest) returns (MQTTPublisher);
    rpc Update (UpdateMQTTPublisherRequest) returns (MQTTPublisher);
    rpc UpdateTags (UpdateMQTTPublisherTagsRequest) returns (UpdateMQTTPublisherTagsRequest.Response);
    rpc Enable (EnableMQTTPublisherRequest) returns (EnableMQTTPublisherRequest.Response);
    rpc Disable (DisableMQTTPublisherRequest) returns (DisableMQTTPublisherRequest.Response);
    rpc Delete (DeleteMQTTPublisherRequest) returns (DeleteMQTTPublisherRequest.Response);
    rpc History (MQTTPublisherHistoryRequest) returns (MQTTPublisherHistoryRequest.Response);
}

message MQTTPublisher {
    int64 id = 1;
    string description = 2;

    /* The uid of the user that created this publisher */
    string created_by = 10;

    Data data = 3;
    Filter.Events filter_event_types = 4;
    Filter.Modems filter_modem_numbers = 5;
    Filter.Tags filter_tags = 6;
    Health health = 7;
    HealthConfig health_config = 9;
    repeated hiber.tag.Tag tags = 8;

    enum ContentType {
        DEFAULT = 0;
        JSON = 1;
        PROTO = 2;
    }

    message Data {
        /* The url of an MQTT server to send the events to, i.e. mqtt[s]://example.com:8883 */
        string url = 1;

        ContentType content_type = 2;

        /* The MQTT topic to send to on the receiving server. */
        string topic = 3;

        /* MQTT QoS value. */
        QoS qos = 4;

        /* Identifier used by the MQTT client. Defaults to "hiber". */
        string identifier = 5;

        /* Optional username to authenticate with. */
        string username = 6;

        /* Optional password to authenticate with. Requires username to be set. */
        string password = 7;

        /* Client certificate to use when connecting to the MQTT server. */
        int64 certificate_id = 8;
        string certificate_name = 10;

        /* CA certificate for the client certificate to use when connecting to the MQTT server. */
        int64 ca_certificate_id = 11;
        string ca_certificate_name = 12;

        /* Server CA certificate to use when connecting to the MQTT server. */
        int64 server_ca_certificate_id = 13;
        string server_ca_certificate_name = 14;

        bool disabled = 9;

        enum QoS {
            DEFAULT = 0;
            /* Qos level 0 */
            AT_MOST_ONCE = 1;
            /* Qos level 1 */
            AT_LEAST_ONCE = 2;
            /* Qos level 2 */
            EXACTLY_ONCE = 3;
        }
    }

    /* Health configuration for the mqtt integration. Defines how the health is calculated. */
    message HealthConfig {
        reserved 1;

        /* Period to consider when determining health from warning events. Warning events cannot be resolved. */
        Duration health_warning_period = 2;

        /* Allowed percentage of failures.
         * If the failure percentage is higher, within the warning period, the health is switched to WARNING.
         */
        int32 health_warning_failure_percentage = 3;
    }
}

message MQTTMessage {
    Timestamp time = 1;
    MQTTPublisher.Data publisher_data = 2;
    BytesOrHex message = 3;
    bool successful = 4;
    string error = 5;
}

message MQTTPublisherSelection {
    /* Filter by id. */
    optional Filter.Publishers publishers = 1;

    /* Partial text match on the description. */
    optional string description = 2;

    /* Partial text match on the url. */
    optional string search_url = 3;

    /* Partial text match on the topic. */
    optional string search_topic = 4;

    /* Only return MQTT integrations that use the given content types. */
    repeated MQTTPublisher.ContentType content_types = 5;

    /* Filter by referenced certificate (id), either as client or server certificate. */
    repeated int64 certificate_ids = 6;

    optional hiber.tag.TagSelection tags = 7;
    repeated Health health = 8;
}

message ListMQTTPublishersRequest {
    enum Sort {
        /* Sort by id. */
        DEFAULT = 0;

        /* Sort by id, high to low. */
        ID_DESC = 1;

        /* Sort by description. */
        DESCRIPTION = 2;

        /* Sort by description, z to a. */
        DESCRIPTION_DESC = 3;

        /* Sort by url. */
        URL = 4;

        /* Sort by url, z to a. */
        URL_DESC = 5;

        /* Sort by topic. */
        TOPIC = 6;

        /* Sort by topic, z to a. */
        TOPIC_DESC = 7;

        /* Sort unhealthy webhooks before health webhooks. */
        HEALTH = 8;
    }

    message Response {
        repeated MQTTPublisher publishers = 1;
        ListMQTTPublishersRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    optional MQTTPublisherSelection selection = 2;
    optional Pagination pagination = 3;
    repeated Sort sort = 4;
}

message MQTTPublisherHistorySelection {
    optional TimeRange time_range = 1;
    optional bool only_failures = 2;
}

message MQTTPublisherHistoryRequest {
    message Response {
        repeated MQTTMessage items = 1;
        MQTTPublisherHistoryRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    int64 id = 2;
    optional MQTTPublisherHistorySelection selection = 3;
    optional Pagination pagination = 4;
}

message CreateMQTTPublisherRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    optional string description = 2;

    optional Filter.Events filter_event_types = 3;
    optional Filter.Modems filter_modem_numbers = 4;
    optional Filter.Tags filter_tags = 5;

    /* The url of an MQTT server to send the events to, i.e. mqtt[s]://example.com:8883 */
    string url = 10;
    MQTTPublisher.ContentType content_type = 11;

    /* The MQTT topic to send to on the receiving server. */
    string topic = 12;

    /* MQTT QoS value. */
    MQTTPublisher.Data.QoS qos = 13;

    /* Identifier used by the MQTT client. Defaults to "hiber". */
    optional string identifier = 14;

    /* Optional username to authenticate with. */
    optional string username = 15;

    /* Optional password to authenticate with. Requires username to be set. */
    optional string password = 16;

    /* Client certificate to use when connecting to the MQTT server. */
    optional int64 certificate_id = 17;

    /* Server CA certificate to use when connecting to the MQTT server. */
    optional int64 server_ca_certificate_id = 21;

    /* Disable the MQTT publisher after creation, so it needs to be enabled before it is active. */
    optional bool disabled = 18;

    repeated int64 tags = 20;

    reserved 19;
}

/* Enable a disabled publisher or re-enable a publisher that's failed and is in cooldown. */
message EnableMQTTPublisherRequest {
    message Response {
        repeated MQTTPublisher publishers = 1;
        EnableMQTTPublisherRequest request = 2;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    MQTTPublisherSelection selection = 2;
}

message DisableMQTTPublisherRequest {
    message Response {
        repeated MQTTPublisher publishers = 1;
        DisableMQTTPublisherRequest request = 2;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    MQTTPublisherSelection selection = 2;
}

message UpdateMQTTPublisherRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    int64 id = 2;

    optional Filter.Events.Update filter_event_types = 3;
    optional Filter.Modems.Update filter_modem_numbers = 4;
    optional Filter.Tags.Update filter_tags = 5;

    optional UpdateClearableString description = 10;

    /* The url of an MQTT server to send the events to, i.e. mqtt[s]://example.com:8883 */
    optional string url = 11;
    optional MQTTPublisher.ContentType content_type = 12;

    /* The MQTT topic to send to on the receiving server. */
    optional string topic = 13;

    /* MQTT QoS value. */
    optional MQTTPublisher.Data.QoS qos = 14;

    /* Identifier used by the MQTT client. Defaults to "hiber". */
    optional UpdateClearableString identifier = 15;

    /* Optional username to authenticate with. */
    optional UpdateClearableString username = 16;

    /* Optional password to authenticate with. Requires username to be set. */
    optional UpdateClearableString password = 17;

    /* Update or remove the client certificate to use when connecting to the MQTT server. */
    optional UpdateOptionalId certificate_id = 18;

    /* Update or remove the server CA certificate to use when connecting to the MQTT server. */
    optional UpdateOptionalId server_ca_certificate_id = 23;

    /* Disable the MQTT publisher, so it needs to be enabled again before it is active. */
    optional UpdateBoolean active = 19;

    reserved 20;

    /* Period to consider when determining health from warning events. Warning events cannot be resolved.
     * Set this to 0 to disable warnings based on failure percentage.
     */
    optional Duration health_warning_period = 21;

    /* Allowed percentage of call failures.
     * If the failure percentage is higher, within the warning period, the health is switched to WARNING.
     */
    optional UpdateZeroableInt health_warning_failure_percentage = 22;
}

message UpdateMQTTPublisherTagsRequest {
    message Response {
        repeated MQTTPublisher mqtt_publishers = 1;
    }

    optional string organization = 1;
    MQTTPublisherSelection selection = 2;
    hiber.tag.UpdateTagsForItem update = 3;
}

message DeleteMQTTPublisherRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    int64 id = 2;
}
