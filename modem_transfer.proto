syntax = "proto3";

package hiber.modem;

import "base.proto";
import "modem.proto";
import "organization.proto";
import "tag.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.modem";
option java_outer_classname = "ModemTransferApi";
option go_package = "hiber";

/* Tracking services for transferring modems between parties.
 * Modems can be transferred between organizations for any number of reason, ranging from actually shipping to a different
 * company to handing them over to a third party for installation.
 */
service ModemTransferService {
    /* Transfer modems to a different organization.
     * As a result, the modem will get the outbound status for you, and the inbound status for the recipient.
     * Note: this call can automatically generate a child organization for the recipient if it has no organization.
     */
    rpc Transfer (TransferModemsRequest) returns (TransferModemsRequest.Response);

    /* List transfers for modems. This could be used to list all active transfers on a selection of modems,
     * or, for example, to list this history of all transfers for one modem.
     */
    rpc List (ListModemTransfersRequest) returns (ListModemTransfersRequest.Response);

    /* Cancel a started transfer.
     */
    rpc Cancel (CancelModemTransferRequest) returns (CancelModemTransferRequest.Response);

    /* Mark inbound modems as received, adding them to your organization.
     */
    rpc Received (ReceivedModemTransferRequest) returns (ReceivedModemTransferRequest.Response);

    /* Mark modems as not received when they were inbound but did not show up.
     * If you do receive the modems after marking them as not received, you can claim them to still get them in
     * your organization.
     */
    rpc NotReceived (NotReceivedModemTransferRequest) returns (NotReceivedModemTransferRequest.Response);
}

service ModemTransferReturnService {
    /* If any problems are detected with the modems within the return period, mark them using this method.
     * Modems marked using this method can be returned in one transfer, as long as they are returned to the same
     * organization.
     */
    rpc Prepare (PrepareModemForReturnRequest) returns (PrepareModemForReturnRequest.Response);

    /* List the return lines, either for a return transfer, or lines that have not been
     * returned with a return transfer yet.
     */
    rpc Lines (ListModemTransferReturnLinesRequest) returns (ListModemTransferReturnLinesRequest.Response);

    rpc DeleteLine (DeleteModemTransferReturnLinesRequest) returns (DeleteModemTransferReturnLinesRequest.Response);

    /* Transfer modems marked for return back to the sender.
     */
    rpc Send (SendReturnRequest) returns (SendReturnRequest.Response);
}

message ModemTransfer {
    enum Type {
        TRANSFER = 0;
        RETURN = 1;
    }

    enum Status {
        IN_TRANSIT = 0;
        RECEIVED = 1;
        CANCELLED = 3;
        NOT_RECEIVED = 4;
    }

    string identifier = 1;
    repeated string modem_numbers = 2;
    Type type = 3;
    Status status = 4;
    string sender_organization = 5;
    string recipient_organization = 6;
    repeated string return_transfers = 7;
    repeated string return_for = 8;
    string tracking_information = 9;
    Timestamp created_at = 10;
    Timestamp received_at = 11;
    Timestamp cancelled_at = 12;
    Timestamp not_received_at = 13;
    Timestamp return_deadline = 14;
    repeated hiber.tag.Tag tags = 15;
}

message ModemTransferReturnLine {
    enum Reason {
        OTHER = 0;
        INVALID_RECIPIENT = 1;
        INVALID_CONFIGURATION = 2;
        DAMAGED = 3;
        DEAD = 4;
        MISSING = 5;
    }

    string original_transfer = 1;
    string return_transfer = 2;
    repeated string modem_numbers = 3;
    Reason reason = 4;
    string comment = 5;
    Timestamp created_at = 6;
    Timestamp returned_at = 7;
    Timestamp return_deadline = 8;
}

message ModemTransferSelection {
    repeated string identifiers = 1;
    ModemSelection modems = 2;
    repeated string senders = 3;
    repeated string recipients = 4;
    repeated ModemTransfer.Status statuses = 5;
    TimeRange created_in = 6;
    TimeRange received_in = 7;
    TimeRange not_received_in = 8;
    TimeRange cancelled_in = 9;
    repeated ModemTransfer.Type types = 10;
    /* Convenience method to setting recipients = my organization.
     * Will ignore any current value for recipients, since the only valid recipient is you.
     */
    bool inbound_only = 11;
    /* Convenience method to setting senders = my organization.
     * Will ignore any current value for senders, since the only valid sender is you.
     */
    bool outbound_only = 12;
}

message TransferModemsRequest {
    /* What to do with external devices on transferring a gateway.
     * This mode is evaluated twice: once when the transfer is created and once when the transfer is finalised.
     * When creating, a double check is done on whether or not your transfer contains gateways or external devices.
     * When finalising, the actual state of currently connected external devices is determined.
     * Note: Any *new* external devices that start transmitting after starting the transfer will be processed as well.
     */
    enum GatewayTransferMode {
        /* Signifies that no selection has been made.
         * This is not allowed for gateways, the client must explicitly choose what happens to external devices.
         */
        NOTHING_SELECTED = 0;

        /* When transferring a gateway, *orphan* all external devices.
         * The devices are re-created in the recipient organization when they transmit through the gateway.
         *
         * The old modem is unchanged, but can no longer receive new messages, unless it is connected to
         * another gateway in the sender organization.
         * Old messages from the modem remain in the sender organization under its old modem number.
         */
        ORPHAN_EXTERNAL_DEVICES = 1;

        /* When transferring a gateway, mark all external devices as *DEAD*.
         * The devices are re-created in the recipient organization when they transmit through the gateway.
         *
         * Old messages from this device remain in the sender organization under its old modem, which is marked DEAD.
         * DEAD modems are be automatically hidden, but can still be accessed.
         */
        DELETE_EXTERNAL_DEVICES = 2;

        /* When transferring a gateway, *transfer* all external devices together with the gateway.
         * This moves all existing external devices with the gateway, while they keep their modem number and messages.
         * Old messages from this device will be available to the new owner.
         */
        TRANSFER_EXTERNAL_DEVICES = 3;
    }

    message Response {
        TransferModemsRequest request = 1;
        ModemTransfer transfer = 2;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;

    /* The ModemSelection is automatically appended with a status filter for 'in stock' modems. Modems with a different
     * status are ignored for the transfer.
     */
    ModemSelection selection = 2;

    /* Existing organization to send the modems to. */
    string recipient_organization = 3;

    /* Create a new organization to transfer the modems to. */
    hiber.organization.CreateOrganizationRequest create_recipient = 4;

    /* Optional tracking information, like package tracking codes */
    string tracking_information = 5;

    /* Mark the transfer as received automatically.
     * This only works if you're able to impersonate the recipient organization.
     */
    bool mark_received_automatically = 6;

    /* How to handle transfers that include gateways and/or external devices.
     * Since `allow_gateways_and_external_devices` is deprecated, opt for using `gateway_transfer_mode`.
     */
    oneof gateway_and_external_devices {
        /* When this value is not set to true, transferring gateways or modems with an external device id is not allowed.
         * Gateways and external devices are connected to the current organization.
         * Moving either a gateway or connected external device to another organization without moving the other can
         * cause a number of issues.
         *
         * Deprecated since 0.46.
         * To allow gateways to be transferred without their external devices must now be done using `gateway_transfer_mode`
         */
        bool allow_gateways_and_external_devices = 7 [deprecated=true];

        /* Set the mode with which this gateway is transferred.
         * It explicitly sets what needs to happen to external devices.
         * This setting is mutually exclusive with the (now deprecated) setting `allow_gateways_and_external_devices`.
         */
        GatewayTransferMode gateway_transfer_mode = 8;
    }
}

message ListModemTransfersRequest {
    message Response {
        ListModemTransfersRequest request = 1;
        repeated ModemTransfer transfers = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    ModemTransferSelection selection = 2;
    Pagination pagination = 3;
}

message CancelModemTransferRequest {
    message Response {
        CancelModemTransferRequest request = 1;
        repeated ModemTransfer cancelled = 2;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    ModemTransferSelection selection = 2;
}

message ReceivedModemTransferRequest {
    message Response {
        ReceivedModemTransferRequest request = 1;
        repeated ModemTransfer received = 2;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    ModemTransferSelection selection = 2;
}

message NotReceivedModemTransferRequest {
    message Response {
        NotReceivedModemTransferRequest request = 1;
        repeated ModemTransfer not_received = 2;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    ModemTransferSelection selection = 2;
}

message PrepareModemForReturnRequest {
    message Response {
        PrepareModemForReturnRequest request = 1;
        reserved 2;
        repeated ModemTransferReturnLine modem_return_lines = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;

    /* The transfer id that you received the modems with, to be used to the return.
     * If this is provided, only one return line is returned.
     * If this is not provided, the given modem selection could match multiple transfers, so multiple
     * return lines would be created.
     */
    string transfer_id = 2;

    /* Selection of modems, received from the transfer above. */
    ModemSelection selection = 3;

    /* The reason for the return. For the 'other' reason, a comment is required. */
    ModemTransferReturnLine.Reason reason = 4;

    /* Optional, unless the 'other' reason is selected. */
    string comment = 5;

    /* Use this to update the comment for a return line (using the same transfer_id and reason). */
    bool replace_previous_comment = 6;
}

message DeleteModemTransferReturnLinesRequest {
    message Response {
    }

    string organization = 1;
    string transfer_id = 2;
    repeated string modem_numbers = 3;
}

message ListModemTransferReturnLinesRequest {
    message Response {
        ListModemTransferReturnLinesRequest request = 1;
        repeated ModemTransferReturnLine lines = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    ModemTransferSelection selection = 2;
    Pagination pagination = 3;
}

message SendReturnRequest {
    message Response {
        SendReturnRequest request = 1;
        ModemTransfer return_transfer = 2;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    string organization = 1;
    ModemTransferSelection selection = 2;
    string tracking_information = 3;
}
