syntax = "proto3";

package hiber.integration.slack;

import "base.proto";
import "tag.proto";

option java_multiple_files = false;
option java_package = "global.hiber.api.grpc.integration.slack";
option java_outer_classname = "SlackIntegrationApi";
option go_package = "hiber";

service SlackIntegrationService {
    rpc List (ListSlackPublishersRequest) returns (ListSlackPublishersRequest.Response);
    rpc Create (CreateSlackPublisherRequest) returns (SlackPublisher);
    rpc Update (UpdateSlackPublisherRequest) returns (SlackPublisher);
    rpc UpdateTags (UpdateSlackPublisherTagsRequest) returns (UpdateSlackPublisherTagsRequest.Response);
    rpc Enable (EnableSlackPublisherRequest) returns (EnableSlackPublisherRequest.Response);
    rpc Disable (DisableSlackPublisherRequest) returns (DisableSlackPublisherRequest.Response);
    rpc Delete (DeleteSlackPublisherRequest) returns (DeleteSlackPublisherRequest.Response);
    rpc History (SlackPublisherHistoryRequest) returns (SlackPublisherHistoryRequest.Response);
}

message SlackPublisher {
    int64 id = 1;
    string description = 2;

    /* The uid of the user that created this publisher */
    string created_by = 10;

    Data data = 3;
    Filter.Events filter_event_types = 4;
    Filter.Modems filter_modem_numbers = 5;
    Filter.Tags filter_tags = 6;

    /* Filter events by health level caused. */
    repeated string filter_health_levels = 11;

    Health health = 7;
    HealthConfig health_config = 9;
    repeated hiber.tag.Tag tags = 8;

    message Data {
        /* The slack webhook URL. See https://api.slack.com/messaging/webhooks for information on Slack webhooks. */
        string url = 1;

        /* The channel the webhook is configured to send to. This is used purely for display purposes,
         * since Slack webhooks are bound to a single channel.
         */
        string channel = 2;

        bool disabled = 3;
    }

    /* Health configuration for the slack integration. Defines how the health is calculated. */
    message HealthConfig {
        reserved 1;

        /* Period to consider when determining health from warning events. Warning events cannot be resolved. */
        Duration health_warning_period = 2;

        /* Allowed percentage of failures.
         * If the failure percentage is higher, within the warning period, the health is switched to WARNING.
         */
        int32 health_warning_failure_percentage = 3;
    }
}

message SlackMessage {
    Timestamp time = 1;
    SlackPublisher.Data publisher_data = 2;
    BytesOrHex message = 3;
    bool successful = 4;
    string error = 5;
}

message SlackPublisherSelection {
    /* Filter by id. */
    optional Filter.Publishers publishers = 1;

    /* Partial text match on the description. */
    optional string description = 2;

    /* Partial text match on the url. */
    optional string search_url = 3;

    /* Partial text match on the channel. */
    optional string search_channel = 4;

    optional hiber.tag.TagSelection tags = 5;
    repeated Health health = 6;

    /* Search in the all available text, like description and url. */
    optional string search =7;
}

message ListSlackPublishersRequest {
    enum Sort {
        /* Sort by id. */
        DEFAULT = 0;

        /* Sort by id, high to low. */
        ID_DESC = 1;

        /* Sort by description. */
        DESCRIPTION = 2;

        /* Sort by description, z to a. */
        DESCRIPTION_DESC = 3;

        /* Sort by url. */
        URL = 4;

        /* Sort by url, z to a. */
        URL_DESC = 5;

        /* Sort by channel. */
        CHANNEL = 6;

        /* Sort by channel, z to a. */
        CHANNEL_DESC = 7;

        /* Sort unhealthy webhooks before health webhooks. */
        HEALTH = 8;
    }

    message Response {
        repeated SlackPublisher publishers = 1;
        ListSlackPublishersRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    optional SlackPublisherSelection selection = 2;
    optional Pagination pagination = 3;
    repeated Sort sort = 4;
}

message SlackPublisherHistorySelection {
    optional TimeRange time_range = 1;
    optional bool only_failures = 2;
}

message SlackPublisherHistoryRequest {
    message Response {
        repeated SlackMessage items = 1;
        SlackPublisherHistoryRequest request = 2;
        Pagination.Result pagination = 3;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    int64 id = 2;
    optional SlackPublisherHistorySelection selection = 3;
    optional Pagination pagination = 4;
}

message CreateSlackPublisherRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    string description = 2;

    optional Filter.Events filter_event_types = 3;
    optional Filter.Modems filter_modem_numbers = 4;
    optional Filter.Tags filter_tags = 5;

    /* Filter events by health level caused. */
    repeated string filter_health_levels = 11;

    string url = 6;
    optional string channel = 7;
    optional bool disabled = 8;

    repeated int64 tags = 10;
}

/* Enable a disabled publisher or re-enable a publisher that's failed and is in cooldown. */
message EnableSlackPublisherRequest {
    message Response {
        repeated SlackPublisher publishers = 1;
        EnableSlackPublisherRequest request = 2;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    SlackPublisherSelection selection = 2;
}

message DisableSlackPublisherRequest {
    message Response {
        repeated SlackPublisher publishers = 1;
        DisableSlackPublisherRequest request = 2;
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    SlackPublisherSelection selection = 2;
}

message UpdateSlackPublisherRequest {
    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    int64 id = 2;

    optional Filter.Events.Update deprecated_filter_event_types = 3 [deprecated = true];
    optional Filter.Events filter_event_types = 23;
    optional Filter.Modems.Update deprecated_filter_modem_numbers = 4 [deprecated = true];
    optional Filter.Modems filter_modem_numbers = 24;
    optional Filter.Tags.Update deprecated_filter_tags = 5 [deprecated = true];
    optional Filter.Tags filter_tags = 25;

    /* Add health levels to the health levels filter. */
    repeated string add_health_levels_to_filter = 6;

    /* Remove health levels from the health levels filter. */
    repeated string remove_health_levels_from_filter = 7;

    optional string description = 19;
    optional UpdateClearableString deprecated_description = 10 [deprecated = true];

    optional string url = 11;
    optional string channel = 20;
    optional UpdateClearableString deprecated_channel = 12 [deprecated = true];

    optional bool active = 21;
    optional UpdateBoolean deprecated_active = 15 [deprecated = true];

    reserved 16;

    /* Period to consider when determining health from warning events. Warning events cannot be resolved.
     * Set this to 0 to disable warnings based on failure percentage.
     */
    optional Duration health_warning_period = 17;

    /* Allowed percentage of call failures.
     * If the failure percentage is higher, within the warning period, the health is switched to WARNING.
     */
    optional uint32 health_warning_failure_percentage = 26;
    optional UpdateZeroableInt deprecated_health_warning_failure_percentage = 18 [deprecated = true];
}

message UpdateSlackPublisherTagsRequest {
    message Response {
        repeated SlackPublisher slack_publishers = 1;
    }

    optional string organization = 1;
    SlackPublisherSelection selection = 2;
    hiber.tag.UpdateTagsForItem update = 3;
}

message DeleteSlackPublisherRequest {
    message Response {
    }

    /* Pick the organization to use (/impersonate). If unset, your default organization is used. */
    optional string organization = 1;
    int64 id = 2;
}
